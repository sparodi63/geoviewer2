'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _server = require('bundle-buddy/server');

var _process = require('bundle-buddy/process');

var _utils = require('bundle-buddy/utils');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _utils2 = require('./utils');

var _utils3 = _interopRequireDefault(_utils2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HIDDEN_WARNING_INFO_FOOTER = 'To hide this warning set {warnings: false} inside the BundleBuddyWebpackPlugin configuration options.';
var INVALID_SOURCEMAP_WARNING = _chalk2.default.yellow(`[BundleBuddyWebpackPlugin] WARNING: config.options.devtool was not set to 'source-map'. Enabling full sourcemaps for bundle-buddy.
  ${HIDDEN_WARNING_INFO_FOOTER}
`);
var UGLIFYJS_WEBPACK_PLUGIN_WARNING = _chalk2.default.yellow(`[BundleBuddyWebpackPlugin] WARNING: UglifyJsWebpackPlugin has been detected.
  Setting {sourceMap: true} for UglifyJsWebpackPlugin options to ensure that sourcemaps are generated. bundle-buddy will fail if it this setting is not enabled.
  ${HIDDEN_WARNING_INFO_FOOTER}
`);

var UGLIFY_NAME_REGEX = /uglify/i;

var BundleBuddyWebpackPlugin = function () {
  function BundleBuddyWebpackPlugin(options) {
    _classCallCheck(this, BundleBuddyWebpackPlugin);

    var pluginOptions = Object.assign({ sam: false, warnings: true }, options);
    this.sam = pluginOptions.sam;
    this.warnings = pluginOptions.warnings;
  }

  _createClass(BundleBuddyWebpackPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      // eslint-disable-line
      var getUserConfigOptions = function getUserConfigOptions() {
        return compiler.options;
      };
      var isFullSourceMap = function isFullSourceMap() {
        return getUserConfigOptions().devtool === 'source-map';
      };
      var hasUglyJsPlugin = function hasUglyJsPlugin() {
        return getUserConfigOptions().plugins.some(function (plugin) {
          return UGLIFY_NAME_REGEX.test(plugin.constructor.name);
        });
      };

      if (!isFullSourceMap()) {
        if (this.warnings) {
          console.log(INVALID_SOURCEMAP_WARNING); //eslint-disable-line
        }

        compiler.options.devtool = 'source-map'; // eslint-disable-line
      }

      if (hasUglyJsPlugin()) {
        var uglifyPluginOptions = getUserConfigOptions().plugins.find(function (plugin) {
          return UGLIFY_NAME_REGEX.test(plugin.constructor.name);
        }).options;
        var sourceMap = uglifyPluginOptions.sourceMap;

        if (!sourceMap && this.warnings) {
          console.log(UGLIFYJS_WEBPACK_PLUGIN_WARNING); // eslint-disable-line
          uglifyPluginOptions.sourceMap = true;
        }
      }

      var getOutDirFor = function getOutDirFor() {
        var options = getUserConfigOptions();
        var outDir = options.output.path;
        return outDir;
      };

      var ensureDirectoryExistence = function ensureDirectoryExistence(filePath) {
        var dirname = _path2.default.dirname(filePath);
        if (_fs2.default.existsSync(dirname)) {
          return true;
        }

        ensureDirectoryExistence(dirname);
        _fs2.default.mkdirSync(dirname);
        return true;
      };

      var getSourceMapNamesFrom = function getSourceMapNamesFrom(compilation) {
        var assets = compilation.assets;

        var outDir = getOutDirFor(compilation);

        return Object.keys(assets).filter(function (assetName) {
          return assetName.endsWith('.map');
        }).map(function (assetName) {
          return `${outDir}/${assetName}`;
        });
      };

      var stringifedData = void 0;
      var dataPath = void 0;
      var context = void 0;

      compiler.plugin('after-emit', function (compilation, cb) {
        var maps = getSourceMapNamesFrom(compilation);
        var processed = (0, _process.processSourceMaps)(maps);
        stringifedData = (0, _utils.formatProcessedSourceMaps)(processed);
        dataPath = `data_${Date.now()}`;
        context = _path2.default.resolve('./', 'node_modules', 'bundle-buddy');
        var writePath = (0, _utils.getWritePathForSerializedData)(dataPath, context);

        ensureDirectoryExistence(writePath);
        _fs2.default.writeFileSync(writePath, stringifedData);
        cb();
      });

      compiler.plugin('done', function () {
        if (_this.sam) {
          process.nextTick(function () {
            (0, _utils3.default)();
          });
        }
        (0, _server.launchServer)(dataPath, context);
      });
    }
  }]);

  return BundleBuddyWebpackPlugin;
}();

exports.default = BundleBuddyWebpackPlugin;