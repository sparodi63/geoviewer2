"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const path = require("path");
const WEBPACK_MATCHER = /\/\/ WEBPACK FOOTER \/\/\n\/\/\s+(.*)/m;
const HASH_SPLITTER = "||||";
exports.VIZ_PATH = "viz/build";
function hashFileLineNumber(fileName, lineNumber) {
    return `${fileName}${HASH_SPLITTER}${lineNumber}`;
}
exports.hashFileLineNumber = hashFileLineNumber;
function hashToFileAndLineNumber(hash) {
    return {
        fileName: hash.split(HASH_SPLITTER)[0],
        lineNumber: parseInt(hash.split(HASH_SPLITTER)[1], 10)
    };
}
exports.hashToFileAndLineNumber = hashToFileAndLineNumber;
function hashBundlesToKey(files) {
    return Array.from(files).sort().join(HASH_SPLITTER);
}
exports.hashBundlesToKey = hashBundlesToKey;
function formatProcessedSourceMaps(processed) {
    return JSON.stringify({
        graph: processed.graph,
        sourceFiles: processed.sourceFiles,
        bundleFileStats: [...processed.bundleFileStats],
        outputFiles: processed.outputFiles,
        groupedBundleStats: [...processed.groupedBundleStats],
        perFileStats: [...processed.perFileStats],
        sourceFileLinesGroupedByCommonBundle: processed.sourceFileLinesGroupedByCommonBundle
    });
}
exports.formatProcessedSourceMaps = formatProcessedSourceMaps;
/**
 * Since the sourcemap file name does not always === the real file name
 * we need to do some cleanup work (specifically for webpack).
 */
function getOriginalFileNameFromSourceName(sourceName, sourceMapConsumer) {
    const contents = sourceMapConsumer.sourceContentFor(sourceName);
    // https://twitter.com/samccone/status/878773452169027588
    const match = WEBPACK_MATCHER.exec(contents);
    if (match && match[1]) {
        return match[1];
    }
    return sourceName;
}
exports.getOriginalFileNameFromSourceName = getOriginalFileNameFromSourceName;
function sourceMapToLineHits(hitTracks) {
    const sourceToLineMapping = new Set();
    for (const fileName of hitTracks.keys()) {
        Object.keys(hitTracks.get(fileName).inUse).forEach(lineNumber => {
            sourceToLineMapping.add(hashFileLineNumber(fileName, lineNumber));
        });
    }
    return sourceToLineMapping;
}
exports.sourceMapToLineHits = sourceMapToLineHits;
/**
 * @export
 * @param {string} dataPath Name of file being created.
 * @param {string} [contextPath=__dirname] Path to be passed in when function is not consumed by bundle-buddy cli process
 * @returns {string} Absolute path where data will be written to
 */
function getWritePathForSerializedData(dataPath, contextPath = __dirname) {
    return path.join(contextPath, exports.VIZ_PATH, dataPath || `data_${Date.now()}`);
}
exports.getWritePathForSerializedData = getWritePathForSerializedData;
class Logger {
    constructor(opts) {
        this.logLevel = opts.logLevel;
    }
    error(s) {
        console.warn(chalk.white.bgRed.bold(s));
    }
    success(s) {
        console.warn(chalk.white.bgGreen.bold(s));
    }
    info(s) {
        if (this.logLevel === "verbose") {
            console.warn(chalk.grey(s));
        }
    }
}
exports.Logger = Logger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtCQUErQjtBQUMvQiw2QkFBNkI7QUFFN0IsTUFBTSxlQUFlLEdBQUcsd0NBQXdDLENBQUM7QUFDakUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDO0FBRWhCLFFBQUEsUUFBUSxHQUFHLFdBQVcsQ0FBQztBQUVwQyw0QkFDRSxRQUFnQixFQUNoQixVQUEyQjtJQUUzQixNQUFNLENBQUMsR0FBRyxRQUFRLEdBQUcsYUFBYSxHQUFHLFVBQVUsRUFBRSxDQUFDO0FBQ3BELENBQUM7QUFMRCxnREFLQztBQUVELGlDQUF3QyxJQUFZO0lBQ2xELE1BQU0sQ0FBQztRQUNMLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxVQUFVLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0tBQ3ZELENBQUM7QUFDSixDQUFDO0FBTEQsMERBS0M7QUFFRCwwQkFBaUMsS0FBZTtJQUM5QyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELDRDQUVDO0FBRUQsbUNBQ0UsU0FBb0M7SUFFcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDcEIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxLQUFLO1FBQ3RCLFdBQVcsRUFBRSxTQUFTLENBQUMsV0FBVztRQUNsQyxlQUFlLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUM7UUFDL0MsV0FBVyxFQUFFLFNBQVMsQ0FBQyxXQUFXO1FBQ2xDLGtCQUFrQixFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsa0JBQWtC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