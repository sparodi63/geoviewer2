/**
 * Created by parodi on 02/08/2016.
 */
/*global GV:false, window:false, jQuery:false, $:false , console:false  , Marionette:false  , Backbone:false  , _:false , L:false  */
GV.Views.Layout = Marionette.LayoutView.extend({

    template: false,

    controls: [],

    initialize: function(options) {
        "use strict";
        this.el = options.el;

        // creo mappa leaflet/ol3
        this.addMap(options);

        // gestione eventi
        this.listenTo(GV.rlMaps, "add", this.onAddMap);
    },

    render: function (options){
        "use strict";

        var layoutConfig = options.config.application.layout;

        // aggiungo layer di base
        if (this.map && this.map.loadBaseLayers) {
            this.map.loadBaseLayers(options.config.baseLayers);
        }
        // aggiungo controlli
        if (this.map && this.map.loadControls) {
            this.map.loadControls(options);
        }

        // aggiungo toolbar
        if (layoutConfig.toolbar) {
            this.addToolbars(layoutConfig.toolbar);
        }

        // aggiungo legenda
        if (layoutConfig.legend) {
            this.addLegend(layoutConfig.legend);
        }

        return this;
    },

    addMap: function (options) {
        "use strict";

        //$(options.el).append("<div id = 'gv-map'></div>");
        //this.map = GV.map(options);

        var mapView = new GV.Views.MapView();
        $(options.el).append(mapView.el);
        mapView.render(options);
        this.map = mapView.map;

    },


    addToolbars: function (toolbar) {
        "use strict";

/*
        _.each(toolbar, function (tb) {
            var actions = [];
            _.each(tb.items, function (item) {
                if (GV.Buttons[item.name]) {
                    actions.push(GV.Buttons[item.name](item.options, this.map));
                } else {

                }
            }, this);
            var position = tb.position || "topleft";
            new L.Toolbar.Control({
                position:  position,
                actions: actions
            }).addTo(this.map);
        }, this);
*/

        _.each(toolbar, function (tb) {
            var position = tb.position || "topleft";
            _.each(tb.items, function (item) {
                var btnOptions = item.options || {};
                btnOptions.position = position;
                if (GV.Buttons[item.name]) {
                    var control = GV.Buttons[item.name](btnOptions, this.map);
                    control.name = item.name;
                    this.controls.push(control);
                    control.addTo(this.map);
                } else {
                    console.log("Bottone " + item.name + " non esistente")
                }
            }, this);
        }, this);

    },


    addLegend: function (legendConfig) {
        "use strict";

        $('#gv-container').append("<div id='gv-legend-button'> </div>");
        this.addRegions({
            legendButton: '#gv-legend-button'
        });
        var legendButton = new GV.Views.LegendButton();
        this.legendButton.show(legendButton);

        $('#gv-container').append("<div id='gv-legend' style='display:none;'></div>");
        this.addRegions({
            legend: '#gv-legend'
        });

        var legendLayout = new GV.Views.LegendLayout();
        this.legend.show(legendLayout);

        legendLayout.title.show(new GV.Views.LegendTitle());
        legendLayout.body.show(new GV.Views.LegendBody({ collection: GV.rlMaps }));

        if (legendConfig.show) {
            $('#gv-legend').css({ display: 'block' });
            $('#gv-legend-button').css({ display: 'none' });
        }
    },

    // Funzione richiamata quando si aggiungono mappe alla collection GV.rlMaps
    onAddMap: function(data){
        "use strict";
        var layers = data.attributes.layers.toJSON();
        this.map.loadLayers(layers);
    }

});
