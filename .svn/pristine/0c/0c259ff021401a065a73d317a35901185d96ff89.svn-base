import Vue from 'vue'
import globals from './globals'
import getConfig from './services/getConfig'
import getCatalog from './services/getCatalog'
import getEnti from './services/getEnti'
import mountComponent from './util/mountComponent'
import { Notification } from 'element-ui'

let _lastZIndex = 21
let debug = false
let containerId = 'gv-container'
let idMap = null
let title = null
let geoserverUrl
let application = {}
let baseLayers = [{ type: 'ESRI_IMAGERY', visible: true }]
let maps = []

function set(options) {
  if (!options) {
    throw new Error('Opzioni di inizializzazione non impostate!')
  }

  debug = options.debug
  idMap = options.idMap
  geoserverUrl = options.geoserverUrl
  if (options.application) {
    application = options.application
  }
  if (options.containerId) {
    containerId = options.containerId
  }

  application.layout = options.application && options.application.layout ? options.application.layout : {}

  if (options.application) {
    application.proxy = options.application.proxy || globals.DEFAULT_PROXY
  }
  if (options.application && options.application.layout && options.application.layout.title) {
    title = options.application.layout.title
  }

  if (options.idMap) {
    const callback = options.application ? options.application.callback : null
    const idMaps = options.idMap.split(',')
    idMaps.forEach(id => addRlMap(id, callback, true))
    // addRlMap(options.idMap, callback, true)
  } else {
    GV.eventBus.$on('gv-app-mounted', app => {
      options.maps.forEach(mapConfig => {
        this.addMapConfig(mapConfig)
        GV.app.setTitle(mapConfig)
      })
      if (application && application.callback) {
        application.callback(app)
      }
    })
  }

  // Gestione BaseLayers
  baseLayers = options.baseLayers
  baseLayers.forEach(layer => {
    layer.name = layer.type
    layer.label = globals.BASE_LAYERS[layer.type].label
    layer.icon = globals.BASE_LAYERS[layer.type].icon
  })

  GV.eventBus.$on('map-zoom', event => {
    var layers = this.getAllLayersConfig()
    layers.forEach(layer => {
      this.setLayerAttribute(layer.name, 'inRange', GV.app.map.layerInRange(layer))
    })
  })
}

function addMapConfig(mapConfig) {
  if (getMapConfig(mapConfig.id)) {
    return
  }
  mapConfig.layers.forEach(function(layer) {
    layer.minScale = layer.minScale === 0 ? 591657550 : layer.minScale
    layer.inRange = GV.app && GV.app.map ? GV.app.map.layerInRange(layer) : true
    layer.zIndex = _lastZIndex++
  })
  mapConfig.layers.reverse()
  maps.unshift(mapConfig)
  GV.eventBus.$emit('config-add-map', {
    config: mapConfig,
  })
}

function getAllLayersConfig() {
  let layers = []
  maps.forEach(function(map) {
    map.layers.forEach(function(layer) {
      layers.push(layer)
    })
  })
  return layers
}

function setLayerAttribute(layerName, attribute, value) {
  maps.forEach(function(map) {
    let layers = map.layers
    layers.forEach(function(layer) {
      if (layer.name === layerName) {
        layer[attribute] = value
      }
    })
  })
}

/**
 * @param {string} layerName
 * @return {boolean}
*/

function getLayerConfig(layerName) {
  let foundLayer = null
  maps.forEach(function(map) {
    let layers = map.layers
    foundLayer = layers.find(function(layer) {
      return layer.name === layerName
    })
  })
  if (foundLayer) {
    return foundLayer
  }
}

function getBaseLayerConfig(layerName) {
  let foundLayer = baseLayers.find(function(layer) {
    return layer.name === layerName
  })
  return foundLayer
}
function getMapConfig(idMap) {
  return maps.find(function(map) {
    return map.id == idMap
  })
}

function getButton(buttonName) {
  let button = null
  if (!application.layout || !application.layout.toolbar) {
    return null
  }
  application.layout.toolbar.forEach(function(tb) {
    tb.items.forEach(function(item) {
      if (item.name === buttonName) {
        button = item
      }
    }, this)
  }, this)
  return button
}

function getButtonOption(buttonName, optionName) {
  let option = null
  if (!application.layout || !application.layout.toolbar) {
    return null
  }
  application.layout.toolbar.forEach(function(tb) {
    tb.items.forEach(function(item) {
      if (item.name === buttonName) {
        option = item.options[optionName]
      }
    }, this)
  }, this)
  return option
}

function setButtonOption(buttonName, optionName, value) {
  let option = null
  if (!application.layout || !application.layout.toolbar) {
    return null
  }
  application.layout.toolbar.forEach(function(tb) {
    tb.items.forEach(function(item) {
      if (item.name === buttonName) {
        item.options[optionName] = value
      }
    }, this)
  }, this)
  return option
}

function getActiveBaseLayer() {
  let activeLayer = null
  baseLayers.forEach(layer => {
    if (layer.visible) {
      activeLayer = layer
    }
  })
  return activeLayer
}

function setActiveBaseLayer(layerName) {
  baseLayers.forEach(layer => {
    layer.visible = layer.name === layerName
  })
}

function removeMap(idMap) {
  const mapConfig = getMapConfig(idMap)
  GV.eventBus.$emit('config-remove-map', {
    config: mapConfig,
  })

  const index = maps.findIndex(function(map) {
    return map.id === idMap
  })
  if (index > -1) {
    maps.splice(index, 1)
  }
}

function removeLayer(idLayer) {
  var self = this
  maps.forEach(function(map) {
    let layerIndex = -1
    map.layers.forEach(function(layer, index) {
      if (layer.name === idLayer) {
        layerIndex = index
      }
    })
    if (layerIndex > -1) {
      map.layers.splice(layerIndex, 1)
    }
    if (map.layers.length === 0) {
      self.removeMap(map.id)
    }
  })

  GV.eventBus.$emit('config-remove-layer', {
    config: idLayer,
  })
}

function addRlMap(idMap, callback, setBaseLayer) {
  if (getMapConfig(idMap)) {
    return getMapConfig(idMap)
  }

  getConfig(idMap)
    .then(response => {
      if (!response.data.success) {
        throw new Error('Errore Caricamento Mappa: ' + response.data.message)
      }
      if (!response.data.data) {
        throw new Error('Errore Caricamento Mappa: configurazione non trovata')
      }

      // Aggiorno array delle mappe
      const mapConfig = response.data.data
      addMapConfig(mapConfig)
      if (GV.app && GV.app.setTitle) {
        GV.app.setTitle(mapConfig)
      }
      if (GV.app && GV.app.map && mapConfig.type && mapConfig.type == 'R' && setBaseLayer && getBaseLayerConfig('BLANK')) {
        GV.app.map.changeBaseLayer('BLANK')
        GV.baseLayerSwitcher.activeBaseLayer = 'BLANK'
      }
      // Gestione callback
      if (callback) {
        callback(this)
      }
      return mapConfig
    })
    .catch(error => {
      console.error(error)
      Notification.error({
        title: 'Attenzione',
        type: 'error',
        duration: 5000,
        offset: 70,
        message: error.message,
      })
    })
}

function loadCatalog(params) {
  getCatalog().then(data => {
    this.catalog = this.catalogFull = data.children
    getEnti().then(data => {
      this.enti = data
      if (params.showMapCatalogPanel) {
        // Mount Pannello
        mountComponent({
          elId: 'gv-map-catalog-panel',
          toggleEl: true,
          vm: new Vue({
            template: `<gv-map-catalog-panel></gv-map-catalog-panel>`,
          }),
        })
      }
    })
  })
}

export {
  debug,
  idMap,
  application,
  baseLayers,
  maps,
  title,
  geoserverUrl,
  set,
  addMapConfig,
  addRlMap,
  getAllLayersConfig,
  getLayerConfig,
  getBaseLayerConfig,
  getActiveBaseLayer,
  getMapConfig,
  loadCatalog,
  removeMap,
  removeLayer,
  getButton,
  getButtonOption,
  setButtonOption,
  setLayerAttribute,
  setActiveBaseLayer,
  containerId,
}
