<template>
    <div class="gv-map-catalog-panel gv-inverted-color-scheme" id="gv-map-catalog-panel">
      <vue-draggable-resizable :w="width" :resizable="false">
        <gv-title :title="title" :hide="true" :divId="'gv-map-catalog-panel'"></gv-title>
        <div class="gv-map-catalog-panel-body">
            <el-tabs v-model="activeTab" type="border-card">
                <el-tab-pane v-if="panels.repertorio" :label="panels.repertorio.label" name="repertorio">
                    <form @submit.prevent.stop @keyup.enter="submit">
                        <el-row class="gv-map-catalog-panel-form" type="flex" justify="left">
                            <el-col :span="11">
                                <el-input placeholder="Ricerca..." v-model="formData.query" icon="circle-close" :on-icon-click="handleIconClick" size="mini">
                                </el-input>
                            </el-col>
                            <el-col v-if="showEnti":span="20">
                                <span class="gv-map-catalog-label">nelle cartografie di </span>
                                <el-select v-model="formData.ente" size="mini" filterable clearable placeholder="tutti gli enti" @change="onChangeEnte">
                                    <el-option v-for="item in enti" :key="item.value" :label="item.value" :value="item.value">
                                    </el-option>
                                </el-select>
                            </el-col>
                        </el-row>
                    </form>
                    <div class="gv-map-catalog-tree">
                        <el-tree :data="panels.repertorio.tree" :props="defaultProps" @node-click="handleNodeClick" node-key="id" accordion :render-content="renderContent" :default-expanded-keys="expanded_nodes"></el-tree>
                    </div>
                </el-tab-pane>
                <el-tab-pane v-if="panels.canali" :label="panels.canali.label" name="canali">
                    <div class="gv-map-catalog-tree">
                        <el-tree :data="panels.canali.tree" :props="defaultProps" @node-click="handleNodeClick"></el-tree>
                    </div>
                </el-tab-pane>
            </el-tabs>
        </div>
      </vue-draggable-resizable>
    </div>
</template>

<script>
import Vue from 'vue'

import mountComponent from '../util/mountComponent'
import getCatalog from '../services/getCatalog'
import getScheda from '../services/getScheda'
import getCanali from '../services/getCanali'

//import VueDraggableResizable from 'vue-draggable-resizable'
const VueDraggableResizable = () => import(/* webpackChunkName: "gv-map-info-panel" */ 'vue-draggable-resizable')
Vue.component('vue-draggable-resizable', VueDraggableResizable)

const Title = () => import(/* webpackChunkName: "gv-title" */ './Title.vue')
Vue.component('gv-title', Title)

const MapInfoPanel = () => import(/* webpackChunkName: "gv-map-info-panel" */ './MapInfoPanel.vue')
Vue.component('gv-map-info-panel', MapInfoPanel)

import { Button, ButtonGroup, Row, Col, Tabs, TabPane, Tree, Input, Form, FormItem, Select, Option } from 'element-ui'
Vue.use(Button)
Vue.use(ButtonGroup)
Vue.use(Row)
Vue.use(Col)
Vue.use(Tabs)
Vue.use(TabPane)
Vue.use(Tree)
Vue.use(Input)
Vue.use(Form)
Vue.use(FormItem)
Vue.use(Select)
Vue.use(Option)

import lang from 'element-ui/lib/locale/lang/it'
import locale from 'element-ui/lib/locale'
locale.use(lang)

export default {
  name: 'gv-map-catalog-panel',
  data() {
    if (!GV.config.enti) {
      GV.config.enti = ['Regione Liguria']
    }
    const enti = GV.config.enti.filter(ente => ente !== 'REGIONE LIGURIA').map(ente => {
      return {
        value: ente
          .toLowerCase()
          .replace(/\b\w/g, l => l.toUpperCase())
          .replace('Di', 'di'),
      }
    })
    enti.unshift({
      value: 'Regione Liguria',
    })

    const config = GV.config.application.layout.legend.options.addMapConfig

    let panels = config.panels

    let activeTab = config.activePanel || Object.keys(config.panels)[0]

    const width = window.matchMedia('(min-width: 620px)').matches ? 600 : 400

    return {
      title: 'CATALOGO CARTOGRAFIE',
      panels: panels,
      showEnti: window.matchMedia('(min-width: 620px)').matches,
      defaultProps: {
        children: 'children',
        label: 'text',
      },
      catalogoCompleto: true,
      formData: {
        query: '',
        ente: '',
        download: false,
      },
      enti: enti,
      activeTab: activeTab,
      expanded_nodes: [],
      width: width,
    }
  },
  mounted() {
    // Carico i tree per i pannelli di tipo tree
    Object.keys(this.panels).forEach(panelName => {
      const panel = this.panels[panelName]
      if (panel.type === 'tree') {
        this.loadTree(panel)
      }
    })
  },
  methods: {
    onChangeEnte(value) {
      this.submit()
    },
    submit() {
      const panel = this.panels['repertorio']
      const filtriImpostati = this.formData.query !== '' || this.formData.ente !== ''

      if (filtriImpostati) {
        const params = {
          q: this.formData.query,
          ente: this.formData.ente.toUpperCase(),
        }
        getCatalog(params).then(data => {
          panel.tree = GV.config.catalog = data.children
          panel.tree.forEach(macro => {
            this.expanded_nodes.push(macro.id)
            if (params.ente !== 'REGIONE LIGURIA' || params.q) {
              macro.children.forEach(cat => {
                this.expanded_nodes.push(cat.id)
              })
            }
          })
        })
        this.expanded_nodes = ['REPERTORIO ENTI LOCALI']
        this.catalogoCompleto = false
      } else {
        if (this.catalogoCompleto) {
          return
        }
        panel.tree = GV.config.catalog = GV.config.catalogFull
        panel.tree.forEach(node => {
          this.expanded_nodes.push(node.id)
        })
        this.catalogoCompleto = true
      }
    },
    handleIconClick() {
      this.formData.query = ''
      this.submit()
    },
    handleNodeClick(data) {
      const idMap = data.idMap
      if (!idMap) {
        return
      }
      getScheda(idMap).then(data => {
        if (!data) {
          console.error('Scheda non trovata')
          return
        }
        GV.config.schedaInfoCartografia = data
        mountComponent({
          elId: 'gv-map-info-panel',
          clear: true,
          vm: new Vue({
            template: `<gv-map-info-panel visible="true" idMap="${idMap}" addToMapButton="true"></gv-map-info-panel>`,
          }),
        })
      })
    },
    loadTree(panel) {
      switch (panel.name) {
        case 'repertorio':
          // Se repertorio Ã¨ in cache lo recupero
          if (GV.config.catalog) {
            panel.tree = GV.config.catalog
            panel.tree.forEach(node => {
              this.expanded_nodes.push(node.id)
            })
          } else {
            getCatalog().then(data => {
              panel.tree = GV.config.catalog = GV.config.catalogFull = data.children
              panel.tree.forEach(node => {
                this.expanded_nodes.push(node.id)
              })
            })
          }
          break
        case 'canali':
          getCanali(panel.options).then(data => {
            panel.tree = data.children
          })
          break
      }
    },
    renderContent(h, { node, data, store }) {
      if (node.data.type === 'MAPPA') {
        return <span style="font-size: 12px; ">{node.label}</span>
      }

      if (node.data.type === 'CATEGORIA') {
        return <span style="font-size: 12px; font-weight: bold; ">{node.label}</span>
      }

      if (node.data.type === 'MACROCATEGORIA') {
        return <span style="font-size: 12px; font-weight: bold; background-color: #ddd; padding: 5px; ">{node.label}</span>
      }
    },
  },
}
</script>

<style scoped>
.gv-map-catalog-tree {
  max-height: 400px;
  height: 400px;
  width: 580px;
  overflow: auto;
}

.gv-map-catalog-panel {
  position: absolute;
  left: 0;
  top: 0;
  margin-left: 10px;
  margin-top: 50px;
  background-color: #fff;
  z-index: 800;
}

.gv-map-catalog-panel table {
  border: 1px solid #ddd;
  width: 100%;
  padding: 10px;
}

.gv-map-catalog-panel-th {
  white-space: nowrap;
  width: auto;
  padding: 5px 5px;
  text-align: left;
  font-weight: 400;
  font-size: 12px;
  border: 1px solid #e5e5e5;
}

.gv-map-catalog-panel table tr td {
  padding: 5px;
  font-size: 12px;
  border: 1px solid #e5e5e5;
}

.gv-map-catalog-panel-form {
  padding: 0px 10px 5px;
  width: 580px;
}

.gv-button-ricerca span {
  font-family: 'Raleway', Arial, sans-serif;
  font-weight: bold;
}

.gv-map-catalog-label {
  font-size: 12px;
  padding-left: 5px;
  font-family: 'Raleway', Arial, sans-serif;
}

@media (max-width: 650px) {
  .gv-map-catalog-tree {
    width: 400px;
    height: 350px;
  }
  .gv-map-catalog-panel-form {
    width: 400px;
  }
  .el-select {
    position: relative;
    width: 110px;
  }
}
</style>

<style>
.el-tree-node__label {
  font-size: 12px !important;
}

.el-tabs__item.is-active {
  color: #24386c !important;
}

.el-tabs__header {
  margin: 0 0 5px !important;
}

</style>