
GV.LayerFactory = function () {
    "use strict";
    var esriLink = '<a href="http://www.esri.com/">Esri</a>';

    return {

        lastZIndex: 11,

        createPane: function (name, zIndex, map) {
            var tilePane = map.getPane('tilePane');
            var pane = map.createPane(name, tilePane);
            pane.style.zIndex = zIndex;
            return pane;
        },

        create: function (layerConfig, map) {
            var layer = this[layerConfig.type](layerConfig, map);
            layer.legend = layerConfig.legend;
            layer.config = layerConfig;
            return layer;
        },

        OSM: function (layerConfig) {
            layerConfig.legend = {
                label: "OpenStreetMap"
            };
            return L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data Â© <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
            });
        },

        ESRI_IMAGERY: function (layerConfig, map) {
            layerConfig.legend = {label: "ESRI Imagery"};
            layerConfig.name = layerConfig.type;
            //this.createPane(layerConfig.name, 1, map);
            var attr = 'DigitalGlobe, GeoEye, i-cubed, USDA, USGS, AEX, Getmapping, Aerogrid, IGN, IGP, swisstopo, and the GIS User Community';
            return L.tileLayer(
                'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                {
                    attribution: '&copy; ' + esriLink + ', ' + attr,
                    maxZoom: 19 //,pane: layerConfig.name
                }
            );
        },

        ESRI_STREETS: function (layerConfig, map) {
            layerConfig.legend = {label: "ESRI Streets"};
            layerConfig.name = layerConfig.type;
            //this.createPane(layerConfig.name, 1, map);
            var attr = 'USGS, NOAA';
            return L.tileLayer(
                'http://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',
                {
                    attribution: '&copy; ' + esriLink + ', ' + attr,
                    maxZoom: 19 //,pane: layerConfig.name
                }
            );
        },

        ESRI_TOPOGRAPHIC: function (layerConfig, map) {
            layerConfig.legend = {label: "ESRI Topographic"};
            layerConfig.name = layerConfig.type;
            //this.createPane(layerConfig.name, 1, map);
            var attr = 'USGS, NOAA';
            return L.tileLayer(
                'http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
                {
                    attribution: '&copy; ' + esriLink + ', ' + attr,
                    maxZoom: 19 //,pane: layerConfig.name
                }
            );
        },

        ESRI_GRAY: function (layerConfig, map) {
            layerConfig.legend = {label: "ESRI Gray"};
            layerConfig.name = layerConfig.type;
            //this.createPane(layerConfig.name, 1, map);
            var attr = 'HERE, DeLorme, MapmyIndia, OpenStreetMap contributors';
            return L.tileLayer(
                'http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}',
                {
                    attribution: '&copy; ' + esriLink + ', ' + attr,
                    maxZoom: 16 //,pane: layerConfig.name
                }
            );
        },

        ESRI_DARKGRAY: function (layerConfig, map) {
            layerConfig.legend = {label: "ESRI Dark Gray"};
            layerConfig.name = layerConfig.type;
            //this.createPane(layerConfig.name, 1, map);
            var attr = 'HERE, DeLorme, MapmyIndia, OpenStreetMap contributors';
            return L.tileLayer(
                'http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/{z}/{y}/{x}',
                {
                    attribution: '&copy; ' + esriLink + ', ' + attr,
                    maxZoom: 16 //,pane: layerConfig.name
                }
            );
        },

        WMS: function (layerConfig, map) {
            GV.Util.log("GV.layerFactory - Creazione Layer WMS: " + layerConfig.name);
            GV.Util.log(layerConfig);

            //this.createPane(layerConfig.name, layerConfig.zIndex, map);

            var options = {
                'tiled': true,
                'transparent': true,
                'TILESORIGIN': '-20037508,-20037508',
                'FORMAT_OPTIONS': 'antialias:text'
            };

            var format = (layerConfig.geomType === 'VECTOR') ? 'image/png8' : (layerConfig.cacheMinZoomLevel) ? 'image/jpeg' : 'image/png',
                minZoom = (layerConfig.minScale) ? GV.Util.getZoomFromScaleDenom(layerConfig.minScale) : 8,
                maxZoom = (layerConfig.maxScale) ? GV.Util.getZoomFromScaleDenom(layerConfig.maxScale) : 20,
                url = layerConfig.wmsParams.url,
                name = layerConfig.name,
                opacity = layerConfig.opacity || 1,
                tileSize = (layerConfig.cacheMinZoomLevel) ? 256 : 1024;

            _.extend(options, {
                'layers': name,
                'format': format,
                'opacity': opacity,
                'minZoom': minZoom,
                'maxZoom': maxZoom,
                'tileSize': tileSize
                //,'pane': layerConfig.name
            });

            var layer = L.tileLayer.wms(url, options);

            layer.setZIndex(layerConfig.zIndex);

            layer.type = "WMS";
            layer.name = name;

            return layer;
        },

        JSON: function (layerConfig, map) {
            var url = layerConfig.url,
                name = layerConfig.name,
                wfsParams = layerConfig.wfsParams,
                classes = layerConfig.classes,
                tooltip = layerConfig.tooltip,
                popup = layerConfig.popup,
                dataType = layerConfig.dataType || 'jsonp';

            var options = {};

            if (classes && classes.length > 0) {
                if (layerConfig.geomSubType === 'POINT') {
                    options.pointToLayer = function (feature, latlng) {
                        var style;
                        _.each(classes, function (cls) {
                            if (cls.filter && cls.filter.key && cls.filter.value) {
                                if (feature.properties[cls.filter.key] == cls.filter.value) {
                                    style = cls.style;
                                }
                            } else {
                                style = cls.style;
                            }
                        });
                        if (style.iconUrl) {
                            var icon = L.icon({
                                iconUrl: style.iconUrl,
                                iconSize: style.iconSize,
                                iconAnchor: style.iconAnchor,
                                popupAnchor: style.popupAnchor
                            });
                            return L.marker(latlng, {icon: icon});
                        } else {
                            return L.circleMarker(latlng, style);
                        }
                    };
                } else {
                    options.style = function (feature) {
                        var style;
                        _.each(classes, function (cls) {
                            if (cls.filter && cls.filter.key && cls.filter.value) {
                                if (feature.properties[cls.filter.key] == cls.filter.value) {
                                    style = cls.style;
                                }
                            } else {
                                style = cls.style;
                            }
                        });
                        return style;
                    };
                }
                options.filter = function(feature, layer) {
                    var visible = false;
                    _.each(classes, function (cls) {
                        if (cls.filter && cls.filter.key && cls.filter.value) {
                            if (feature.properties[cls.filter.key] == cls.filter.value) {
                                visible = true;
                            }
                        }
                    });
                    return visible;
                };
            }

            if (tooltip || popup) {
                options.onEachFeature = function (feature, layer) {
                    if (tooltip) {
                        layer.options.title = GV.Util.template(tooltip, feature.properties);
                    }
                    if (popup) {
                        layer.bindPopup(GV.Util.template(popup, feature.properties));
                    }
                };
            }


            var layer = L.geoJson(null, options);
            layer.name = name;

            layer.setFilter = function(filters) {
                layer.filter = filters;
                if (filters) {
                    layer.eachLayer(function (marker) {
                        var opacity = 0;
                        _.each(filters, function (filter) {
                            if (marker.feature.properties[filter.key] == filter.value) {
                                opacity = layer.config.opacity || 1;
                            }
                        });
                        marker.setOpacity(opacity);
                    });
                } else {
                    layer.eachLayer(function (marker) {
                        var opacity = layer.config.opacity || 1;
                        marker.setOpacity(opacity);
                    });
                }
            };

            if (wfsParams && wfsParams.typeName && wfsParams.url) {
                var parameters = {
                    service: 'WFS',
                    version: '2.0.0',
                    request: 'GetFeature',
                    srsName: 'EPSG:4326',
                    outputFormat: 'text/javascript',
                    format_options: 'callback: getJson',
                    typeName: wfsParams.typeName
                };
                url = wfsParams.url + GV.Util.getParamString(parameters);
                dataType = 'jsonp';
            }

            $.ajax({
                url: url,
                dataType: dataType,
                jsonpCallback: 'getJson',
                success: function (data) {
                    layer.addData(data);
                }
            });


            return layer;

        }

    };

};
