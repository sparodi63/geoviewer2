/**
 * Created by parodi on 02/08/2016.
 */
GV.Map = L.Map.extend({
    //https://github.com/mapbox/mapbox.js/blob/mb-pages/src/map.js

    // array delle mappe RL caricate
    rlMaps: [],

    layers: [],

    baseLayers: [],

    initialExtent: [],

    mapOptions: {
        zoomControl: false,
        maxBounds: GV.Globals.MAX_BOUNDS,
        maxBoundsViscosity: 1.0,
        minZoom: 7
    },

    initialize: function (options) {
        "use strict";

        this.setMapOptions(options);

        L.Map.prototype.initialize.call(this, 'gv-map', _.extend(L.Map.prototype.options, this.mapOptions));

        this.setInitialExtent();

        this.setLayersInRange();

        this.setLoading();
    },

    setMapOptions: function (options) {
        "use strict";

        if (options.config.application && options.config.application.layout && options.config.application.mapOptions) {
            _.extend(this.mapOptions, options.config.application.mapOptions);
        }
    },

    setInitialExtent: function () {
        "use strict";

        var extent = this.mapOptions.initialExtent || "830036,5402959,1123018,5597635";
        var extArray = extent.split(',');
        var swPoint = L.point(extArray[0], extArray[1]);
        var nePoint = L.point(extArray[2], extArray[3]);
        var swLatLng = L.Projection.SphericalMercator.unproject(swPoint);
        var neLatLng = L.Projection.SphericalMercator.unproject(nePoint);
        this.initialExtent = L.latLngBounds(swLatLng, neLatLng);
        this.fitBounds(this.initialExtent);
    },

    setLayersInRange: function () {
        "use strict";
        this.on('zoom', function () {
            var layers = GV.rlMaps.getAllLayersConfig();
            _.each(layers, function (layer) {
                GV.rlMaps.setLayerAttribute(layer.name, 'inRange', this.layerInRange(layer));
            }, this);
        });
    },

    setLayerVisible: function (layerConfig, visible) {
        "use strict";
        if (visible) {
            this.loadLayers([layerConfig]);
        } else {
            this.removeLayer(this.getLayerByName(layerConfig.name));
        }
    },

    layerInRange: function (layerConfig) {
        "use strict";
        if (!layerConfig.minScale && !layerConfig.minScale) {
            return true;
        }
        return (this.getScale() < layerConfig.minScale && this.getScale() > layerConfig.maxScale );
    },

    loadControls: function (options) {
        "use strict";
        if (options.config.application && options.config.application.layout && options.config.application.layout.controls) {
            var controls = options.config.application.layout.controls;
            var cntrl;
            this.controls = {};
            _.each(controls, function (control) {
                switch (control.name) {
                    case 'scaleControl':
                        cntrl = L.control.scale({imperial: false}).addTo(this);
                        this.controls[control] = cntrl;
                        break;
                }
            }, this);
        }
    },

    loadBaseLayers: function (baseLayers) {
        "use strict";
        _.each(baseLayers, function (layerConfig) {
            var layer = GV.layerFactory.create(layerConfig, this);
            this.baseLayers[layer.config.legend.label] = layer;
            if (layer && layerConfig.visible) {
                layer.on('loading', function () {
                    this.loading(true, layer);
                }, this);
                layer.on('load', function () {
                    this.loading(false, layer);
                }, this);
                layer.addTo(this);
            }
        }, this);
    },

    loadLayers: function (layers) {
        "use strict";
        _.each(layers, function (layerConfig) {
            if (!this.getLayerByName(layerConfig.name)) {
                var layer = GV.layerFactory.create(layerConfig, this);
                if (layer && layerConfig.visible) {
                    layer.on('loading', function () {
                        this.loading(true, layer);
                    }, this);
                    layer.on('load', function () {
                        this.loading(false, layer);
                    }, this);
                    layer.addTo(this);
                }
            }
        }, this);
    },

    getLayerByName: function (layerName) {
        "use strict";
        var foundLayer = null;
        this.eachLayer(function (layer) {
            if (layer.config && layer.config.name && layer.config.name === layerName) {
                foundLayer = layer;
            }
        });
        return foundLayer;
    },

    getScaleLabel: function () {
        'use strict';
        return GV.Util.getScaleLabelsFromZoom(this._zoom);
    },

    getScale: function () {
        'use strict';
        return GV.Util.getScaleFromZoom(this._zoom);
    },

    setLoading: function () {
        this._spinning = 0;
        this.on('layerremove', function (e) {
            // Clean-up
            if (e.layer.loading) {
                this.loading(false);
            }
            if (typeof e.layer.on != 'function') {
                return;
            }
            e.layer.off('load');
            e.layer.off('loading');
        }, this);
    },

    loading: function (state, layer) {
        if (!!state) {
            if (this._spinning === 0) {
                console.log('start load: ' + layer.config.name, new Date());
                this._container.style.cursor = "progress";
            }
            this._spinning++;
        }
        else {
            this._spinning--;
            if (this._spinning <= 0) {
                console.log('end load: ' + layer.config.name, new Date());
                this._container.style.cursor = "default";
            }
        }
    }



});
