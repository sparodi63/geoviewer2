/**
 * Created by parodi on 02/08/2016.
 */


GV.InfoWmsManager = function () {
    'use strict';
    return {
        _requestCount: 0,
        _numRequests: 0,
        _features: [],
        _numPanels: 0,

        activate: function (map, callback) {
            GV.Util.log('GV.app.infoWmsManager.activate');
            this.map = map;
            // Aggiungo layer per evidenziazione
            this.map.loadLayers([{
                name: 'InfoWmsHilite',
                type: 'JSON',
                style: {
                    "color": "#ffcc00",
                    "fillOpacity": 0,
                    "weight": 6,
                    "opacity": 0.6
                },
                pointToLayer: function (feature, latlng) {
                    return L.circleMarker(latlng, {
                        "radius": 8,
                        "color": "#ffcc00",
                        "fillColor": "#ffcc00",
                        "fill": true,
                        "fillOpacity": 0.6,
                        "weight": 6,
                        "opacity": 0.6
                    });
                },
                visible: true
            }]);
            // Attivo evento click
            map.on('click', callback);
        },

        buildWMSOptions: function (url, layers, latlng) {
            var point = GV.app.map.latLngToContainerPoint(latlng, GV.app.map.getZoom()),
                size = GV.app.map.getSize(),
                bounds = GV.app.map.getBounds(),
                sw = GV.app.map.options.crs.project(bounds.getSouthWest()),
                ne = GV.app.map.options.crs.project(bounds.getNorthEast());

            var params = {
                request: 'GetFeatureInfo',
                service: 'WMS',
                crs: 'EPSG:3857',
                styles: '',
                version: '1.1.0',
                format: 'application/json',
                bbox: sw.x + ',' + sw.y + ',' + ne.x + ',' + ne.y,
                height: size.y,
                width: size.x,
                layers: layers,
                query_layers: layers,
                FEATURE_COUNT: 100,
                buffer: 10,
                info_format: 'application/json'
            };

            _.extend(params, {});
            params[params.version === '1.3.0' ? 'i' : 'x'] = point.x;
            params[params.version === '1.3.0' ? 'j' : 'y'] = point.y;

            return GV.app.proxy + url + GV.Util.getParamString(params, url, true);
        },

        handleResponse: function (features) {
            GV.app.infoWmsManager._requestCount++;
            _.each(features, function (feature) {
                var layerName = feature.id.split('.')[0];
                feature.layerName = layerName;
                feature.layer = GV.map.getLayerByName(layerName);
                feature.label = setFeatureLabel(layerName, feature.properties);
                feature.infoOptions = feature.layer.config.infoOptions;

            });
            Array.prototype.push.apply(GV.app.infoWmsManager._features, features);
            if (GV.app.infoWmsManager._requestCount === GV.app.infoWmsManager._numRequests) {
                this.map._container.style.cursor = "default";

                var vm = new Vue({
                    template:
                        '<gv-wms-info-list :cls="cls" visible="true" :items="items"></gv-wms-info-list>' ,
                    data: {
                        items: GV.app.infoWmsManager._features,
                        cls: 'gv-info-wms draggable'
                    },
                    created: function() {
                        $("#gv-container").append("<div id='gv-info-wms-list'></div>");
                    }
                });
                vm.$mount("#gv-info-wms-list");

                if (GV.app.infoWmsManager._features.length === 1) {
                    //$('#gv-info-wms').css({display: 'none'});
                    this.showFeatureInfo(GV.app.infoWmsManager._features[0]);
                }

                GV.Util.log('end info request: ' + new Date());
            }

            function setFeatureLabel(layerName, attributes) {
                var infoLabelAttr,
                    infoIdAttr;
                infoLabelAttr = getField(layerName, "infoLabelAttr");
                infoIdAttr = getField(layerName, "infoIdAttr");
                if (infoLabelAttr && attributes[infoLabelAttr]) {
                    return attributes[infoLabelAttr];
                }
                if (infoIdAttr && attributes[infoIdAttr]) {
                    return attributes[infoIdAttr];
                }
                return attributes[getFirstAttribute(attributes)];
            }

            function getField(layerName, fieldName) {
                try {
                    var layerConfig = GV.map.getLayerByName(layerName).config;
                    if (layerConfig && layerConfig.infoOptions && layerConfig.infoOptions[fieldName]) {
                        return layerConfig.infoOptions[fieldName];
                    } else {
                        return null;
                    }
                } catch (exception) {
                    GV.Util.log(exception,2);
                    return null;
                }
            }

            function getFirstAttribute(attributes) {

                for (var i in attributes) {
                    if (attributes.hasOwnProperty(i) && typeof(i) !== "function") {
                        return i;
                    }
                }
                return null;
            }

        },

        showFeatureInfo: function (feature) {

            var infoOptions = feature.infoOptions,
                infoUrl = infoOptions.infoUrl;


            if ((infoUrl.substr(infoUrl.length - 4) === ".xsl") || (infoUrl.substr(infoUrl.length - 5) === ".xslt")) {
                // Gestione xsl
                buildAndShowHtml(infoOptions, feature);
            } else {
                // Gestione html/asp
                if (!infoOptions.infoTarget || infoOptions.infoTarget === "panel") {
                    showPanel(infoUrl, null, infoOptions);
                } else {
                    openPopup(infoUrl, null, infoOptions);
                }
            }

            function buildAndShowHtml(infoOptions, data) {
                // costruisco il gml in formato getFeatureInfo Mapserver
                var xmlDoc = buildGml(data);

                var options = {
                    url: "/geoservices/REST/config/xsl_info_service?",
                    data: {
                        xslUrl: infoOptions.infoUrl,
                        ambiente: null,
                        idLayer: data.layerName.replace("L", ""),
                        featureAttributes: data.properties
                    }
                };

                GV.Util.getXML(options, function (xslDoc) {
                    // Aggiungo Nome Layer
                    $(xslDoc).find('td').each(function () {
                        if (this.id === "Titolo") {
                            this.textContent = data.layer.legend.label;
                            this.text = data.layer.legend.label;
                        }
                    });
                    // applico la trasformazione xslt
                    var result = xslTransform(xmlDoc, xslDoc);
                    // levo i caratteri di encoding %0A e %09 dai link
                    result = result.replace(new RegExp('%0A', 'g'), '').replace(new RegExp('%09', 'g'), '').replace(new RegExp('%20', 'g'), '');
                    // visualizzo il risultato
                    if (!infoOptions.infoTarget || infoOptions.infoTarget === "panel") {
                        showPanel(result, null, infoOptions);
                    } else {
                        openPopup(result, null, infoOptions);
                    }
                });

                // costruisce un documento GML in formato getFeatureInfo Mapserver
                function buildGml(feature) {
                    try {
                        var baseXml = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><msGMLOutput xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"></msGMLOutput>",
                            xmlDoc = GV.Util.parseXML(baseXml),
                            layerName = feature.layerName + "_layer",
                            layerNode = xmlDoc.createElement(layerName),
                            featureName = feature.layerName + "_feature",
                            featureNode = xmlDoc.createElement(featureName),
                            attributes = feature.properties;

                        for (var key in attributes) {
                            if (attributes.hasOwnProperty(key)) {
                                var text = null;
                                if (attributes[key]) {
                                    text = xmlDoc.createTextNode(attributes[key]);
                                } else {
                                    text = xmlDoc.createTextNode("");
                                }
                                var attrNode = xmlDoc.createElement(key);
                                attrNode.appendChild(text);
                                featureNode.appendChild(attrNode);
                            }
                        }
                        layerNode.appendChild(featureNode);
                        xmlDoc.documentElement.appendChild(layerNode);
                        return xmlDoc;
                    } catch (exception) {
                        GV.Util.log(exception,2);
                    }
                }

                // trasformo xml in html applicando xslt
                function xslTransform(xmlDoc, xslDoc) {
                    try {
                        if (window.XSLTProcessor) {
                            var xsltProcessor = new XSLTProcessor();
                            xsltProcessor.importStylesheet(xslDoc);
                            var transformedDoc = xsltProcessor.transformToDocument(xmlDoc);
                            return (new XMLSerializer()).serializeToString(transformedDoc);
                        } else {
                            return xmlDoc.transformNode(xslDoc);
                        }
                    } catch (exception) {
                        GV.Util.log(exception,2);
                    }
                }


                // apre una popup con un documento html

            }

            function createHtmlPanel(html, configOptions) {
                var width = configOptions.infoWidth || 400,
                    height = configOptions.infoHeight || 300;


                var vm = new Vue({
                    template:
                        '<gv-iframe-panel visible="true" :src="src" :html="html" :height="height" :width="width" :cls="cls" :title="title"></gv-iframe-panel>' ,
                    data: {
                        title: 'Risultato Info',
                        src: null,
                        html: html,
                        width: width,
                        height: height,
                        cls: "draggable gv-info-wms-html"
                    },
                    created: function() {
                        $("#gv-container").append("<div id='gv-info-wms-html'></div>");
                    }
                });
                vm.$mount("#gv-info-wms-html");

            }

            // apre una panel div con un documento html
            function showPanel(html, url, configOptions) {
                if (html) {
                    createHtmlPanel(html, configOptions)
                } else {
                    //TODO
                    // 1 - faccio request dell'html
                    // 2 - sostituisco variabile con valore - prerequisito: deve esistere un attributo con nome uguale alla variabile
                    // es: se infoUrl e' http://pippo/pluto.asp?id=${gid} deve esistere attributo "gid" in attributes della feature
                    // var infoUrl = OpenLayers.String.format(configOptions.infoUrl, data.attributes);
                    // 3 - creo il pannello html
                    //createHtmlPanel (html, configOptions)
                }
            }

            function openPopup(html, url, options) {
                var width = options.infoWidth || 400,
                    height = options.infoHeight || 500,
                    popup = window.open(url, null, "status=yes, toolbar=yes, menubar=no, width=" + width + ", height=" + height + ", resizable=yes, scrollbars=yes");

                popup.document.open();
                popup.document.write(html);
                popup.document.close();
                popup.focus();
            }

            var url = this.buildWFSUrl(feature);
            $.ajax({
                url: url,
                dataType: 'json'
            }).done(function (response) {
                var layer = GV.map.getLayerByName('InfoWmsHilite');
                if (response.features && response.features[0] && response.features[0].geometry) {
                    layer.clearLayers();
                    layer.addData(response.features[0].geometry);
                    GV.map.fitBounds(layer.getBounds(), { maxZoom: 15 });
                }
            });
        },

        clearHiliteLayer: function () {
            var layer = GV.map.getLayerByName('InfoWmsHilite');
            layer.clearLayers();
        },

        buildWFSUrl: function (attr) {
            var wsName = "M" + attr.layer.config.idMap;
            var baseUrl = attr.layer.config.wfsParams.url.replace("/" + wsName, "");
            var idAttr = attr.layer.config.infoOptions.infoIdAttr;
            var url = GV.Globals.DEFAULT_PROXY;
            url += baseUrl + "service=WFS&version=2.0.0&request=GetFeature&srsName=EPSG%3A4326&outputFormat=application%2Fjson";
            url += "&typeName=" + wsName + ":" + attr.layer.config.wfsParams.typeName + "&cql_filter=" + idAttr + "=" + attr.properties[idAttr] + "";
            return url;
        },

        showWaiting: function () {
            // Hook to customize AJAX wait animation
            if (!this.map) {
                return;
            }
            this.map._container.style.cursor = "progress";
        },

        request: function (e) {
            GV.Util.log('start info request: ' + new Date());

            GV.app.infoWmsManager._requestCount = 0;
            GV.app.infoWmsManager._numRequests = 0;
            GV.app.infoWmsManager._features = [];

            // Ciclo sulle mappe caricate
            var rlMaps = GV.rlMaps.maps;
            _.each(rlMaps, function (rlMap) {
                var url = null,
                    layersArray = [];

                // Ciclo sui layer caricati sulla mappa leaflet
                _.each(rlMap.layers, function (layerConfig) {
                    if (layerConfig.idMap === rlMap.id && layerConfig.type === 'WMS' && layerConfig.queryable && layerConfig.visible && GV.app.map.layerInRange(layerConfig)) {
                        url = layerConfig.wmsParams.url;
                        layersArray.push(layerConfig.wmsParams.name);
                    }
                });

                var layers = layersArray.join(',');

                if (url && layersArray.length > 0) {
                    var wmsUrl = GV.app.infoWmsManager.buildWMSOptions(url, layers, e.latlng);
                    GV.app.infoWmsManager._numRequests++;
                    this._container.style.cursor = "progress";
                    $.ajax({
                        url: wmsUrl,
                        dataType: 'json'
                    }).done(function (response) {
                        GV.app.infoWmsManager.handleResponse(response.features);
                    });
                }
            }, this);
        }
    };

};
