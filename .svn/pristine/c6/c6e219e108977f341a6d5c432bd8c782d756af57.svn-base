<template>
    <div id="gv-container">
        <gv-map ref="gv-map"></gv-map>
        <div v-show="showTitle" class="gv-color-scheme" id="gv-title">{{this.getTitle()}}</div>
        <gv-legend ref="gv-legend" v-if="showLegend"></gv-legend>
    </div>
</template>


<script>
import globals from '../globals'
import GV from '../GV'
import isTouch from '../util/isTouch'
import getProtocol from '../util/getProtocol'
import infoWmsManager from '../infoWmsManager'
import mountComponent from '../util/mountComponent'
import Vue from 'vue'

// Componenti Vue
import Map from './Map'
//const Map = () => import(/* webpackChunkName: "gv-map" */ './Map.vue')
Vue.component('gv-map', Map)
import Legend from './Legend'
Vue.component('gv-legend', Legend)

const IFrame = () => import(/* webpackChunkName: "gv-iframe-panel" */ './IFrame.vue')
//import IFrame from './IFrame'
Vue.component('gv-iframe-panel', IFrame)

//import InfoWmsList from './InfoWmsList.vue'
const InfoWmsList = () => import(/* webpackChunkName: "gv-info-wms-list" */ './InfoWmsList.vue')
Vue.component('gv-info-wms-list', InfoWmsList)

//import InfoWmsHtml from './InfoWmsHtml.vue'
const InfoWmsHtml = () => import(/* webpackChunkName: "gv-info-wms-html" */ './InfoWmsHtml.vue')
Vue.component('gv-info-wms-html', InfoWmsHtml)

import { Notification } from 'element-ui'

export default {
  name: 'gv-app',
  data() {
    return {
      //showTitle: true,
      showTitle: GV.config.application.layout.title,
      showLegend: GV.config.application.layout.legend,
    }
  },
  created() {
    // imposto GV.app in modo da averlo a disposizione appena creato il componente
    GV.app = this
  },
  mounted() {
    GV.log('gv-app: mounted')

    // gestione toolbar
    this.addToolbars(GV.config.application.layout.toolbar)

    // gestione click su mappa
    if (GV.config.application.mapOptions && GV.config.application.mapOptions.click) {
      infoWmsManager.activate()
    }

    GV.eventBus.$emit('gv-app-mounted', this)
  },
  methods: {
    getTitle() {
      return GV.config.title
    },
    getMaps() {
      return GV.config.maps
    },
    addToolbars() {
      if (GV.config.application.layout.toolbar) {
        var toolbar = GV.config.application.layout.toolbar
        toolbar.forEach(tb => {
          const position = tb.position || 'topleft'
          tb.items.forEach(item => {
            item.options = item.options || {}
            item.options.position = item.options.position || position
            this.addButton(item)
          })
        })
      }
    },
    addButton(item) {
      if (GV.Buttons[item.name]) {
        var button = GV.Buttons[item.name](item.options, GV.app.map)
        if (button) {
          button.name = item.name
          button.addTo(GV.app.map)
          GV.app.map.buttons.push(button)
          if (button.options.vueComponent) {
            this.mountBtnComponent(button.options.vueComponent)
          }
          if (button.options.callBack) {
            button.options.callBack(button)
          }
          if (button.options.autoClick) {
            setTimeout(function() {
              button.button.click()
            }, 1)
          }
        }
      } else {
        throw new Error('Bottone ' + item.name + ' non esistente')
      }
    },
    setTitle(mapConfig) {
      // Imposto titolo
      if (GV.config.application.layout.title === '{map.title}') {
        GV.config.title = mapConfig.name
      }
    },
    mountBtnComponent(options) {
      mountComponent({
        containerId: options.containerId,
        elId: options.id,
        vm: new Vue({
          template: `<${options.id}></${options.id}>`,
        }),
        toggleEl: false,
      })
    },
  },
}
</script>


<style>

</style>