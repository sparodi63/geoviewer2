
GV.App = Vue.extend({
    template:
    '<div :id="this.$options.el">' +
    '<div id="gv-container">' +
    '<gv-map ref="gv-map"></gv-map>' +
    '<div v-show="showTitle" id="gv-title">{{this.getTitle()}}</div>' +
    '<gv-legend ref="gv-legend" v-if="showLegend" :showAddMap="showAddMap" :showInfoMap="showInfoMap"></gv-legend>' +
    '</div>' +
    '</div>',
    data: function () {
        return GV.config;
    },
    computed: {
        showTitle: function () {
            return (GV.config.application.layout.title && !GV.globals.SMALL_SCREEN);
        },
        showLegend: function() {
            return this.getButton("legend") ? true : false;
        },
        showAddMap: function() {
            return this.getButtonOption("legend", "showAddMap");
        },
        showInfoMap: function() {
            return this.getButtonOption("legend", "showInfoMap");
        }
    },
    created: function () {
        GV.Util.log('GV.App created ');

        GV.app = this;

        this.checkOptions();

        this.setGVConfig();

        // imposto metodo per drag panelli
        GV.Util.setDrag();
    },
    mounted: function() {
        GV.Util.log('GV.App mounted');

        var self = this;

        // gestione toolbar
        this.addToolbars(GV.config.application.layout.toolbar);

        // gestione click
        if (GV.config.application.mapOptions && GV.config.application.mapOptions.click) {
            if (GV.config.application.mapOptions.click === 'info' && !GV.Util.isTouch()) {
                GV.infoWmsManager.activate();
            }
        }

        // Gestione caricamento mappe/livelli da configurazione (options.config.maps)
        if (this.$options.maps && this.$options.maps.length > 0) {
            _.each(this.$options.maps, function (mapConfig) {
                self.addMap(mapConfig);
            });
        }

        // Gestione caricamento mappe RL da servizio
        if (GV.config.idMap) {
            this.addRlMap(GV.config.idMap, GV.config.application.callback);

        } else {
            if (GV.config.application.callback) {
                GV.config.application.callback(this);
            }
        }
    },
    methods: {
        getTitle: function () {
            if (GV.config.application.layout.title === '{map.title}') {
                return this.mapTitle;
            } else {
                return GV.config.application.layout.title;
            }
        },
        checkOptions: function () {
            "use strict";

            if (!this.$options.el) {
                GV.config.debug = true;
                GV.Util.log('Parametro "el" non definito', 2);
                return false;
            }
            if (!document.getElementById(this.$options.el.replace('#',''))) {
                GV.config.debug = true;
                GV.Util.log('Elemento ' + this.$options.el.replace('#','') + ' non presente', 2);
                return false;
            }
            return true;
        },
        setGVConfig: function () {
            "use strict";

            GV.config.el = this.$options.el;

            GV.config.debug = this.$options.debug;

            GV.config.idMap = this.$options.idMap;

            if (this.$options.baseLayers) {
                GV.config.baseLayers = this.$options.baseLayers;
            }

            if (this.$options.application) {
                GV.config.application = this.$options.application;
            }
            GV.config.application.layout = this.$options.application.layout || {};

            GV.config.application.proxy = this.$options.application.proxy || GV.globals.DEFAULT_PROXY;

        },
        getMaps: function () {
            return this.maps;
        },
        addToolbars: function () {
            if (GV.config.application.layout.toolbar) {
                var toolbar = GV.config.application.layout.toolbar;
                _.each(toolbar, function (tb) {
                    var position = tb.position || "topleft";
                    _.each(tb.items, function (item) {
                        item.options = item.options || {};
                        item.options.position = item.options.position || position;
                        this.addButton(item);
                    }, this);
                }, this);
            }
        },
        addButton: function (item) {
            if (GV.Buttons[item.name]) {
                var button = GV.Buttons[item.name](item.options, GV.map);
                if (button) {
                    button.name = item.name;
                    button.addTo(GV.map);
                }
            } else {
                GV.Util.log("Bottone " + item.name + " non esistente");
            }
        },
        getButton: function(buttonName) {
            "use strict";
            var button = null;
            _.each(GV.config.application.layout.toolbar, function (tb) {
                _.each(tb.items, function (item) {
                    if(item.name === buttonName) {
                        button = item
                    }
                }, this);
            }, this);
            return button;
        },
        getButtonOption: function(buttonName, optionName) {
            "use strict";
            var option = null;
            _.each(GV.config.application.layout.toolbar, function (tb) {
                _.each(tb.items, function (item) {
                    if(item.name === buttonName) {
                        option = item.options[optionName]
                    }
                }, this);
            }, this);
            return option;
        },
        addRlMap: function (idMap, callback) {
            var self = this;
            if (!idMap || idMap === 'null') {
                GV.Util.log('addRlMap: prametro idMap mancante', 2);
                return;
            }
            $.ajax({
                url: GV.globals.RL_MAP_CONFIG_SERVICE + idMap,
                //url: '/geoservices/REST/config/map/' + idMap,
                dataType: 'jsonp'
            }).done(function (response) {
                if (!response.success) {
                    GV.Util.log('Errore Caricamento Configurazione Mappa: ' + response.message, 2);
                    return;
                }
                self.addMap(response.data);
                // Gestione callback
                if (callback) {
                    callback(self);
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                GV.Util.log(errorThrown,2);
            });
        },
        addMap: function (mapConfig) {
            // Imposto titolo
            this.mapTitle = mapConfig.name;
            // Aggiorno array delle mappe
            GV.config.addMapConfig(mapConfig);
            // Aggiungo livelli alla mappa
            GV.map.loadLayers(mapConfig.layers);
            //gestione extent
            if (mapConfig.extent_3857) {
                GV.map.setInitialExtent(mapConfig.extent_3857);
            }
            //TODO: gestione find

        }

    }
});
