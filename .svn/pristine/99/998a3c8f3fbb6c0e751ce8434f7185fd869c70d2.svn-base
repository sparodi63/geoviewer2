/**
 * Created by parodi on 02/08/2016.
 */

GV.Util = function () {
    "use strict";

    // Public API
    return {

        /**
         *  Function: getUrlParam
         *
         *  Ritorna il valore di un parametro nella queryString
         *
         *  Parameters:
         *  paramName - {String} Nome del parametro
         *
         *  Returns:
         *  {String} Valore del parametro (se non trovato ritorna 0)
         *
         */

        getUrlParam: function (paramName) {
            var results = new RegExp("[\\?&]" + paramName + "=([^&#]*)").exec(window.location.href);
            GV.Util.log("GV.Util.getUrlParam");

            return results ? decodeURIComponent(results[1]) : null;
        },

        /**
         *  Function: getUrlParam
         *
         *  Ritorna il valore di un parametro nella queryString
         *
         *  Parameters:
         *  url - {String} Stringa contenente la URL
         *  paramName - {String} Nome del parametro
         *
         *  Returns:
         *  {String} Valore del parametro (se non trovato ritorna 0)
         *
         */

        getUrlParamFromString: function (url, paramName) {
            var results = new RegExp("[\\?&]" + paramName + "=([^&#]*)").exec(url);
            if (!results) {
                return 0;
            }
            return results[1] || 0;
        },

        /**
         *  Function: log
         *
         *  Scrive un messaggio sulla console
         *
         *  Parameters:
         *  msg - {String} Messaggio da scrivere
         *
         */

        log: function (message, level) {
            var action = "log";

            if (!GV.debug) {
                return;
            }

            switch (level) {
            case 0:
                action = "warn";
                break;
            case 1:
            case 2:
                action = "error";
                break;
            default:
                action = "info";
                break;
            }

            try {
                console[action](message);
            } catch (e) {
            }
        },

        /**
         *  Function: msgBox
         *
         *  Manda un alert di avviso all'utente
         *
         *  Parameters:
         *  msg - {string} Messaggio da scrivere sull'alert
         *
         */
        msgBox: function (msg) {
            window.alert(msg);
        },


        setUnderscoreTemplate: function () {
            if (_) {
                _.templateSettings = {
                    interpolate: /\{\{(.+?)\}\}/g
                };
            }
        },

        /**
         * Function: getXML
         *
         * Funzione per caricare un oggetto xml remoto
         *
         * Ritorna un oggetto xml
         *
         */
        getXML: function (options, callback) {
            var url = options.url,
                data = options.data,
                method = options.method;

            $.ajax({
                url: url,
                dataType: (GV.Util.isBrowserIE()) ? "text" : "xml",
                data: data,
                method: method || 'GET'
            }).done(function (response) {
                try {
                    var xml = response;
                    if (GV.Util.isBrowserIE()) {    // Only for IE
                        var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                        xmlDoc.async = "false";
                        xmlDoc.loadXML(response);
                        xml = xmlDoc;
                    }
                    callback(xml);
                } catch (exception) {
                    GV.Util.log(exception,2);
                }
            });

        },

        /**
         * Function: parseXML
         *
         * Funzione per fare il parsing di una stringa xml
         *
         * Ritorna un oggetto doc xml
         *
         * Parameters:
         * xmlString - {String} Stringa xml
         *
         * Returns:
         * {object} Oggetto xmlDoc
         *
         */
        parseXML: function (xmlString) {
            GV.Util.log("GV.Util.parseXML");
            try {
                var xmlDoc = null;
                if (window.DOMParser && window.XSLTProcessor) {
                    var parser = new DOMParser();
                    xmlDoc = parser.parseFromString(xmlString, "text/xml");
                } else {
                    xmlDoc = new ActiveXObject("Msxml2.DOMDocument.3.0");
                    xmlDoc.async = false;
                    xmlDoc.loadXML(xmlString);
                }
                return xmlDoc;
            } catch (exception) {
                GV.Util.log("GV.Util.parseXml: errore parsing xml - " + exception.message,1);
            }
        },


        /**
         *
         * Function: isPointInLig
         *
         * Controlla se un punto appartenga al BBOX del territorio ligure
         *
         * Parameters:
         * x - {number} Coordinata X
         * y - {number} Coordinata Y
         *
         * Returns:
         * {boolean} true/false
         *
         */
        isPointInLig: function (x, y) {
            GV.Util.log("GV.Util.isPointInLig");

            if (!x || !y) {
                return false;
            }

            var minX = 7.4, minY = 43.7, maxX = 10.1, maxY = 44.8;

            return (x > minX) && (x < maxX) && (y > minY) && (y < maxY);
        },

        getParamString: function (obj, existingUrl, uppercase) {
            var params = [];
            for (var i in obj) {
                params.push(encodeURIComponent(uppercase ? i.toUpperCase() : i) + '=' + encodeURIComponent(obj[i]));
            }
            return ((!existingUrl || existingUrl.indexOf('?') === -1) ? '?' : '&') + params.join('&');
        },

        template: function (str, data) {
            var templateRe = /\{ *([\w_\-]+) *\}/g;
            return str.replace(templateRe, function (str, key) {
                var value = data[key];

                if (value === undefined) {
                    throw new Error('No value provided for variable ' + str);

                } else if (typeof value === 'function') {
                    value = value(data);
                }
                return value;
            });
        },

        getZoomFromScaleDenom: function (scaleDenom) {
            return _.findIndex(GV.Globals.BASE_SCALES, function (scale) {
                return scaleDenom > scale;
            });
        },

        getScaleLabelsFromZoom: function (zoom) {
            return GV.Globals.BASE_SCALE_LABELS[zoom]
        },

        getScaleFromZoom: function (zoom) {
            return GV.Globals.BASE_SCALES[zoom]
        },

        endsWith: function (str, suffix) {
            return str.indexOf(suffix, str.length - suffix.length) !== -1;
        },

        isTouch: function () {
            return window.matchMedia('(pointer: coarse)').matches;
        },

        isBrowserIE: function () {
            return navigator.userAgent.indexOf("MSIE ") > 0 || navigator.userAgent.indexOf("Trident") > 0 || navigator.userAgent.indexOf("Edge") > 0;
        }
    };
}();

