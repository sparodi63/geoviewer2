webpackJsonp([34,32],[
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
	 * Vue.js v2.5.2
	 * (c) 2014-2017 Evan You
	 * Released under the MIT License.
	 */
	'use strict';
	
	/*  */
	
	// these helpers produces better vm code in JS engines due to their
	// explicitness and function inlining
	function isUndef (v) {
	  return v === undefined || v === null
	}
	
	function isDef (v) {
	  return v !== undefined && v !== null
	}
	
	function isTrue (v) {
	  return v === true
	}
	
	function isFalse (v) {
	  return v === false
	}
	
	/**
	 * Check if value is primitive
	 */
	function isPrimitive (value) {
	  return (
	    typeof value === 'string' ||
	    typeof value === 'number' ||
	    typeof value === 'boolean'
	  )
	}
	
	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 */
	function isObject (obj) {
	  return obj !== null && typeof obj === 'object'
	}
	
	/**
	 * Get the raw type string of a value e.g. [object Object]
	 */
	var _toString = Object.prototype.toString;
	
	function toRawType (value) {
	  return _toString.call(value).slice(8, -1)
	}
	
	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 */
	function isPlainObject (obj) {
	  return _toString.call(obj) === '[object Object]'
	}
	
	function isRegExp (v) {
	  return _toString.call(v) === '[object RegExp]'
	}
	
	/**
	 * Check if val is a valid array index.
	 */
	function isValidArrayIndex (val) {
	  var n = parseFloat(String(val));
	  return n >= 0 && Math.floor(n) === n && isFinite(val)
	}
	
	/**
	 * Convert a value to a string that is actually rendered.
	 */
	function toString (val) {
	  return val == null
	    ? ''
	    : typeof val === 'object'
	      ? JSON.stringify(val, null, 2)
	      : String(val)
	}
	
	/**
	 * Convert a input value to a number for persistence.
	 * If the conversion fails, return original string.
	 */
	function toNumber (val) {
	  var n = parseFloat(val);
	  return isNaN(n) ? val : n
	}
	
	/**
	 * Make a map and return a function for checking if a key
	 * is in that map.
	 */
	function makeMap (
	  str,
	  expectsLowerCase
	) {
	  var map = Object.create(null);
	  var list = str.split(',');
	  for (var i = 0; i < list.length; i++) {
	    map[list[i]] = true;
	  }
	  return expectsLowerCase
	    ? function (val) { return map[val.toLowerCase()]; }
	    : function (val) { return map[val]; }
	}
	
	/**
	 * Check if a tag is a built-in tag.
	 */
	var isBuiltInTag = makeMap('slot,component', true);
	
	/**
	 * Check if a attribute is a reserved attribute.
	 */
	var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
	
	/**
	 * Remove an item from an array
	 */
	function remove (arr, item) {
	  if (arr.length) {
	    var index = arr.indexOf(item);
	    if (index > -1) {
	      return arr.splice(index, 1)
	    }
	  }
	}
	
	/**
	 * Check whether the object has the property.
	 */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	function hasOwn (obj, key) {
	  return hasOwnProperty.call(obj, key)
	}
	
	/**
	 * Create a cached version of a pure function.
	 */
	function cached (fn) {
	  var cache = Object.create(null);
	  return (function cachedFn (str) {
	    var hit = cache[str];
	    return hit || (cache[str] = fn(str))
	  })
	}
	
	/**
	 * Camelize a hyphen-delimited string.
	 */
	var camelizeRE = /-(\w)/g;
	var camelize = cached(function (str) {
	  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
	});
	
	/**
	 * Capitalize a string.
	 */
	var capitalize = cached(function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1)
	});
	
	/**
	 * Hyphenate a camelCase string.
	 */
	var hyphenateRE = /\B([A-Z])/g;
	var hyphenate = cached(function (str) {
	  return str.replace(hyphenateRE, '-$1').toLowerCase()
	});
	
	/**
	 * Simple bind, faster than native
	 */
	function bind (fn, ctx) {
	  function boundFn (a) {
	    var l = arguments.length;
	    return l
	      ? l > 1
	        ? fn.apply(ctx, arguments)
	        : fn.call(ctx, a)
	      : fn.call(ctx)
	  }
	  // record original fn length
	  boundFn._length = fn.length;
	  return boundFn
	}
	
	/**
	 * Convert an Array-like object to a real Array.
	 */
	function toArray (list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret
	}
	
	/**
	 * Mix properties into target object.
	 */
	function extend (to, _from) {
	  for (var key in _from) {
	    to[key] = _from[key];
	  }
	  return to
	}
	
	/**
	 * Merge an Array of Objects into a single Object.
	 */
	function toObject (arr) {
	  var res = {};
	  for (var i = 0; i < arr.length; i++) {
	    if (arr[i]) {
	      extend(res, arr[i]);
	    }
	  }
	  return res
	}
	
	/**
	 * Perform no operation.
	 * Stubbing args to make Flow happy without leaving useless transpiled code
	 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
	 */
	function noop (a, b, c) {}
	
	/**
	 * Always return false.
	 */
	var no = function (a, b, c) { return false; };
	
	/**
	 * Return same value
	 */
	var identity = function (_) { return _; };
	
	/**
	 * Generate a static keys string from compiler modules.
	 */
	function genStaticKeys (modules) {
	  return modules.reduce(function (keys, m) {
	    return keys.concat(m.staticKeys || [])
	  }, []).join(',')
	}
	
	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 */
	function looseEqual (a, b) {
	  if (a === b) { return true }
	  var isObjectA = isObject(a);
	  var isObjectB = isObject(b);
	  if (isObjectA && isObjectB) {
	    try {
	      var isArrayA = Array.isArray(a);
	      var isArrayB = Array.isArray(b);
	      if (isArrayA && isArrayB) {
	        return a.length === b.length && a.every(function (e, i) {
	          return looseEqual(e, b[i])
	        })
	      } else if (!isArrayA && !isArrayB) {
	        var keysA = Object.keys(a);
	        var keysB = Object.keys(b);
	        return keysA.length === keysB.length && keysA.every(function (key) {
	          return looseEqual(a[key], b[key])
	        })
	      } else {
	        /* istanbul ignore next */
	        return false
	      }
	    } catch (e) {
	      /* istanbul ignore next */
	      return false
	    }
	  } else if (!isObjectA && !isObjectB) {
	    return String(a) === String(b)
	  } else {
	    return false
	  }
	}
	
	function looseIndexOf (arr, val) {
	  for (var i = 0; i < arr.length; i++) {
	    if (looseEqual(arr[i], val)) { return i }
	  }
	  return -1
	}
	
	/**
	 * Ensure a function is called only once.
	 */
	function once (fn) {
	  var called = false;
	  return function () {
	    if (!called) {
	      called = true;
	      fn.apply(this, arguments);
	    }
	  }
	}
	
	var SSR_ATTR = 'data-server-rendered';
	
	var ASSET_TYPES = [
	  'component',
	  'directive',
	  'filter'
	];
	
	var LIFECYCLE_HOOKS = [
	  'beforeCreate',
	  'created',
	  'beforeMount',
	  'mounted',
	  'beforeUpdate',
	  'updated',
	  'beforeDestroy',
	  'destroyed',
	  'activated',
	  'deactivated',
	  'errorCaptured'
	];
	
	/*  */
	
	var config = ({
	  /**
	   * Option merge strategies (used in core/util/options)
	   */
	  optionMergeStrategies: Object.create(null),
	
	  /**
	   * Whether to suppress warnings.
	   */
	  silent: false,
	
	  /**
	   * Show production mode tip message on boot?
	   */
	  productionTip: ("production") !== 'production',
	
	  /**
	   * Whether to enable devtools
	   */
	  devtools: ("production") !== 'production',
	
	  /**
	   * Whether to record perf
	   */
	  performance: false,
	
	  /**
	   * Error handler for watcher errors
	   */
	  errorHandler: null,
	
	  /**
	   * Warn handler for watcher warns
	   */
	  warnHandler: null,
	
	  /**
	   * Ignore certain custom elements
	   */
	  ignoredElements: [],
	
	  /**
	   * Custom user key aliases for v-on
	   */
	  keyCodes: Object.create(null),
	
	  /**
	   * Check if a tag is reserved so that it cannot be registered as a
	   * component. This is platform-dependent and may be overwritten.
	   */
	  isReservedTag: no,
	
	  /**
	   * Check if an attribute is reserved so that it cannot be used as a component
	   * prop. This is platform-dependent and may be overwritten.
	   */
	  isReservedAttr: no,
	
	  /**
	   * Check if a tag is an unknown element.
	   * Platform-dependent.
	   */
	  isUnknownElement: no,
	
	  /**
	   * Get the namespace of an element
	   */
	  getTagNamespace: noop,
	
	  /**
	   * Parse the real tag name for the specific platform.
	   */
	  parsePlatformTagName: identity,
	
	  /**
	   * Check if an attribute must be bound using property, e.g. value
	   * Platform-dependent.
	   */
	  mustUseProp: no,
	
	  /**
	   * Exposed for legacy reasons
	   */
	  _lifecycleHooks: LIFECYCLE_HOOKS
	});
	
	/*  */
	
	var emptyObject = Object.freeze({});
	
	/**
	 * Check if a string starts with $ or _
	 */
	function isReserved (str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F
	}
	
	/**
	 * Define a property.
	 */
	function def (obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}
	
	/**
	 * Parse simple path.
	 */
	var bailRE = /[^\w.$]/;
	function parsePath (path) {
	  if (bailRE.test(path)) {
	    return
	  }
	  var segments = path.split('.');
	  return function (obj) {
	    for (var i = 0; i < segments.length; i++) {
	      if (!obj) { return }
	      obj = obj[segments[i]];
	    }
	    return obj
	  }
	}
	
	/*  */
	
	// can we use __proto__?
	var hasProto = '__proto__' in {};
	
	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined';
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && /msie|trident/.test(UA);
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isEdge = UA && UA.indexOf('edge/') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
	var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
	
	// Firefox has a "watch" function on Object.prototype...
	var nativeWatch = ({}).watch;
	
	var supportsPassive = false;
	if (inBrowser) {
	  try {
	    var opts = {};
	    Object.defineProperty(opts, 'passive', ({
	      get: function get () {
	        /* istanbul ignore next */
	        supportsPassive = true;
	      }
	    })); // https://github.com/facebook/flow/issues/285
	    window.addEventListener('test-passive', null, opts);
	  } catch (e) {}
	}
	
	// this needs to be lazy-evaled because vue may be required before
	// vue-server-renderer can set VUE_ENV
	var _isServer;
	var isServerRendering = function () {
	  if (_isServer === undefined) {
	    /* istanbul ignore if */
	    if (!inBrowser && typeof global !== 'undefined') {
	      // detect presence of vue-server-renderer and avoid
	      // Webpack shimming the process
	      _isServer = global['process'].env.VUE_ENV === 'server';
	    } else {
	      _isServer = false;
	    }
	  }
	  return _isServer
	};
	
	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
	
	/* istanbul ignore next */
	function isNative (Ctor) {
	  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
	}
	
	var hasSymbol =
	  typeof Symbol !== 'undefined' && isNative(Symbol) &&
	  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);
	
	var _Set;
	/* istanbul ignore if */ // $flow-disable-line
	if (typeof Set !== 'undefined' && isNative(Set)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = (function () {
	    function Set () {
	      this.set = Object.create(null);
	    }
	    Set.prototype.has = function has (key) {
	      return this.set[key] === true
	    };
	    Set.prototype.add = function add (key) {
	      this.set[key] = true;
	    };
	    Set.prototype.clear = function clear () {
	      this.set = Object.create(null);
	    };
	
	    return Set;
	  }());
	}
	
	/*  */
	
	var warn = noop;
	var tip = noop;
	var generateComponentTrace = (noop); // work around flow check
	var formatComponentName = (noop);
	
	if (false) {
	  var hasConsole = typeof console !== 'undefined';
	  var classifyRE = /(?:^|[-_])(\w)/g;
	  var classify = function (str) { return str
	    .replace(classifyRE, function (c) { return c.toUpperCase(); })
	    .replace(/[-_]/g, ''); };
	
	  warn = function (msg, vm) {
	    var trace = vm ? generateComponentTrace(vm) : '';
	
	    if (config.warnHandler) {
	      config.warnHandler.call(null, msg, vm, trace);
	    } else if (hasConsole && (!config.silent)) {
	      console.error(("[Vue warn]: " + msg + trace));
	    }
	  };
	
	  tip = function (msg, vm) {
	    if (hasConsole && (!config.silent)) {
	      console.warn("[Vue tip]: " + msg + (
	        vm ? generateComponentTrace(vm) : ''
	      ));
	    }
	  };
	
	  formatComponentName = function (vm, includeFile) {
	    if (vm.$root === vm) {
	      return '<Root>'
	    }
	    var options = typeof vm === 'function' && vm.cid != null
	      ? vm.options
	      : vm._isVue
	        ? vm.$options || vm.constructor.options
	        : vm || {};
	    var name = options.name || options._componentTag;
	    var file = options.__file;
	    if (!name && file) {
	      var match = file.match(/([^/\\]+)\.vue$/);
	      name = match && match[1];
	    }
	
	    return (
	      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
	      (file && includeFile !== false ? (" at " + file) : '')
	    )
	  };
	
	  var repeat = function (str, n) {
	    var res = '';
	    while (n) {
	      if (n % 2 === 1) { res += str; }
	      if (n > 1) { str += str; }
	      n >>= 1;
	    }
	    return res
	  };
	
	  generateComponentTrace = function (vm) {
	    if (vm._isVue && vm.$parent) {
	      var tree = [];
	      var currentRecursiveSequence = 0;
	      while (vm) {
	        if (tree.length > 0) {
	          var last = tree[tree.length - 1];
	          if (last.constructor === vm.constructor) {
	            currentRecursiveSequence++;
	            vm = vm.$parent;
	            continue
	          } else if (currentRecursiveSequence > 0) {
	            tree[tree.length - 1] = [last, currentRecursiveSequence];
	            currentRecursiveSequence = 0;
	          }
	        }
	        tree.push(vm);
	        vm = vm.$parent;
	      }
	      return '\n\nfound in\n\n' + tree
	        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
	            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
	            : formatComponentName(vm))); })
	        .join('\n')
	    } else {
	      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
	    }
	  };
	}
	
	/*  */
	
	
	var uid = 0;
	
	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 */
	var Dep = function Dep () {
	  this.id = uid++;
	  this.subs = [];
	};
	
	Dep.prototype.addSub = function addSub (sub) {
	  this.subs.push(sub);
	};
	
	Dep.prototype.removeSub = function removeSub (sub) {
	  remove(this.subs, sub);
	};
	
	Dep.prototype.depend = function depend () {
	  if (Dep.target) {
	    Dep.target.addDep(this);
	  }
	};
	
	Dep.prototype.notify = function notify () {
	  // stabilize the subscriber list first
	  var subs = this.subs.slice();
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};
	
	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;
	var targetStack = [];
	
	function pushTarget (_target) {
	  if (Dep.target) { targetStack.push(Dep.target); }
	  Dep.target = _target;
	}
	
	function popTarget () {
	  Dep.target = targetStack.pop();
	}
	
	/*  */
	
	var VNode = function VNode (
	  tag,
	  data,
	  children,
	  text,
	  elm,
	  context,
	  componentOptions,
	  asyncFactory
	) {
	  this.tag = tag;
	  this.data = data;
	  this.children = children;
	  this.text = text;
	  this.elm = elm;
	  this.ns = undefined;
	  this.context = context;
	  this.functionalContext = undefined;
	  this.functionalOptions = undefined;
	  this.functionalScopeId = undefined;
	  this.key = data && data.key;
	  this.componentOptions = componentOptions;
	  this.componentInstance = undefined;
	  this.parent = undefined;
	  this.raw = false;
	  this.isStatic = false;
	  this.isRootInsert = true;
	  this.isComment = false;
	  this.isCloned = false;
	  this.isOnce = false;
	  this.asyncFactory = asyncFactory;
	  this.asyncMeta = undefined;
	  this.isAsyncPlaceholder = false;
	};
	
	var prototypeAccessors = { child: { configurable: true } };
	
	// DEPRECATED: alias for componentInstance for backwards compat.
	/* istanbul ignore next */
	prototypeAccessors.child.get = function () {
	  return this.componentInstance
	};
	
	Object.defineProperties( VNode.prototype, prototypeAccessors );
	
	var createEmptyVNode = function (text) {
	  if ( text === void 0 ) text = '';
	
	  var node = new VNode();
	  node.text = text;
	  node.isComment = true;
	  return node
	};
	
	function createTextVNode (val) {
	  return new VNode(undefined, undefined, undefined, String(val))
	}
	
	// optimized shallow clone
	// used for static nodes and slot nodes because they may be reused across
	// multiple renders, cloning them avoids errors when DOM manipulations rely
	// on their elm reference.
	function cloneVNode (vnode, deep) {
	  var cloned = new VNode(
	    vnode.tag,
	    vnode.data,
	    vnode.children,
	    vnode.text,
	    vnode.elm,
	    vnode.context,
	    vnode.componentOptions,
	    vnode.asyncFactory
	  );
	  cloned.ns = vnode.ns;
	  cloned.isStatic = vnode.isStatic;
	  cloned.key = vnode.key;
	  cloned.isComment = vnode.isComment;
	  cloned.isCloned = true;
	  if (deep && vnode.children) {
	    cloned.children = cloneVNodes(vnode.children);
	  }
	  return cloned
	}
	
	function cloneVNodes (vnodes, deep) {
	  var len = vnodes.length;
	  var res = new Array(len);
	  for (var i = 0; i < len; i++) {
	    res[i] = cloneVNode(vnodes[i], deep);
	  }
	  return res
	}
	
	/*
	 * not type checking this file because flow doesn't play well with
	 * dynamically accessing methods on Array prototype
	 */
	
	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto);[
	  'push',
	  'pop',
	  'shift',
	  'unshift',
	  'splice',
	  'sort',
	  'reverse'
	]
	.forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator () {
	    var args = [], len = arguments.length;
	    while ( len-- ) args[ len ] = arguments[ len ];
	
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	      case 'unshift':
	        inserted = args;
	        break
	      case 'splice':
	        inserted = args.slice(2);
	        break
	    }
	    if (inserted) { ob.observeArray(inserted); }
	    // notify change
	    ob.dep.notify();
	    return result
	  });
	});
	
	/*  */
	
	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
	
	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However when passing down props,
	 * we don't want to force conversion because the value may be a nested value
	 * under a frozen data structure. Converting it would defeat the optimization.
	 */
	var observerState = {
	  shouldConvert: true
	};
	
	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 */
	var Observer = function Observer (value) {
	  this.value = value;
	  this.dep = new Dep();
	  this.vmCount = 0;
	  def(value, '__ob__', this);
	  if (Array.isArray(value)) {
	    var augment = hasProto
	      ? protoAugment
	      : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	};
	
	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 */
	Observer.prototype.walk = function walk (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0; i < keys.length; i++) {
	    defineReactive(obj, keys[i], obj[keys[i]]);
	  }
	};
	
	/**
	 * Observe a list of Array items.
	 */
	Observer.prototype.observeArray = function observeArray (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};
	
	// helpers
	
	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 */
	function protoAugment (target, src, keys) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}
	
	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 */
	/* istanbul ignore next */
	function copyAugment (target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}
	
	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 */
	function observe (value, asRootData) {
	  if (!isObject(value) || value instanceof VNode) {
	    return
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (
	    observerState.shouldConvert &&
	    !isServerRendering() &&
	    (Array.isArray(value) || isPlainObject(value)) &&
	    Object.isExtensible(value) &&
	    !value._isVue
	  ) {
	    ob = new Observer(value);
	  }
	  if (asRootData && ob) {
	    ob.vmCount++;
	  }
	  return ob
	}
	
	/**
	 * Define a reactive property on an Object.
	 */
	function defineReactive (
	  obj,
	  key,
	  val,
	  customSetter,
	  shallow
	) {
	  var dep = new Dep();
	
	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return
	  }
	
	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;
	
	  var childOb = !shallow && observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter () {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	          if (Array.isArray(value)) {
	            dependArray(value);
	          }
	        }
	      }
	      return value
	    },
	    set: function reactiveSetter (newVal) {
	      var value = getter ? getter.call(obj) : val;
	      /* eslint-disable no-self-compare */
	      if (newVal === value || (newVal !== newVal && value !== value)) {
	        return
	      }
	      /* eslint-enable no-self-compare */
	      if (false) {
	        customSetter();
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = !shallow && observe(newVal);
	      dep.notify();
	    }
	  });
	}
	
	/**
	 * Set a property on an object. Adds the new property and
	 * triggers change notification if the property doesn't
	 * already exist.
	 */
	function set (target, key, val) {
	  if (Array.isArray(target) && isValidArrayIndex(key)) {
	    target.length = Math.max(target.length, key);
	    target.splice(key, 1, val);
	    return val
	  }
	  if (hasOwn(target, key)) {
	    target[key] = val;
	    return val
	  }
	  var ob = (target).__ob__;
	  if (target._isVue || (ob && ob.vmCount)) {
	    ("production") !== 'production' && warn(
	      'Avoid adding reactive properties to a Vue instance or its root $data ' +
	      'at runtime - declare it upfront in the data option.'
	    );
	    return val
	  }
	  if (!ob) {
	    target[key] = val;
	    return val
	  }
	  defineReactive(ob.value, key, val);
	  ob.dep.notify();
	  return val
	}
	
	/**
	 * Delete a property and trigger change if necessary.
	 */
	function del (target, key) {
	  if (Array.isArray(target) && isValidArrayIndex(key)) {
	    target.splice(key, 1);
	    return
	  }
	  var ob = (target).__ob__;
	  if (target._isVue || (ob && ob.vmCount)) {
	    ("production") !== 'production' && warn(
	      'Avoid deleting properties on a Vue instance or its root $data ' +
	      '- just set it to null.'
	    );
	    return
	  }
	  if (!hasOwn(target, key)) {
	    return
	  }
	  delete target[key];
	  if (!ob) {
	    return
	  }
	  ob.dep.notify();
	}
	
	/**
	 * Collect dependencies on array elements when the array is touched, since
	 * we cannot intercept array element access like property getters.
	 */
	function dependArray (value) {
	  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
	    e = value[i];
	    e && e.__ob__ && e.__ob__.dep.depend();
	    if (Array.isArray(e)) {
	      dependArray(e);
	    }
	  }
	}
	
	/*  */
	
	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 */
	var strats = config.optionMergeStrategies;
	
	/**
	 * Options with restrictions
	 */
	if (false) {
	  strats.el = strats.propsData = function (parent, child, vm, key) {
	    if (!vm) {
	      warn(
	        "option \"" + key + "\" can only be used during instance " +
	        'creation with the `new` keyword.'
	      );
	    }
	    return defaultStrat(parent, child)
	  };
	}
	
	/**
	 * Helper that recursively merges two data objects together.
	 */
	function mergeData (to, from) {
	  if (!from) { return to }
	  var key, toVal, fromVal;
	  var keys = Object.keys(from);
	  for (var i = 0; i < keys.length; i++) {
	    key = keys[i];
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set(to, key, fromVal);
	    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to
	}
	
	/**
	 * Data
	 */
	function mergeDataOrFn (
	  parentVal,
	  childVal,
	  vm
	) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal
	    }
	    if (!parentVal) {
	      return childVal
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn () {
	      return mergeData(
	        typeof childVal === 'function' ? childVal.call(this) : childVal,
	        typeof parentVal === 'function' ? parentVal.call(this) : parentVal
	      )
	    }
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn () {
	      // instance merge
	      var instanceData = typeof childVal === 'function'
	        ? childVal.call(vm)
	        : childVal;
	      var defaultData = typeof parentVal === 'function'
	        ? parentVal.call(vm)
	        : parentVal;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData)
	      } else {
	        return defaultData
	      }
	    }
	  }
	}
	
	strats.data = function (
	  parentVal,
	  childVal,
	  vm
	) {
	  if (!vm) {
	    if (childVal && typeof childVal !== 'function') {
	      ("production") !== 'production' && warn(
	        'The "data" option should be a function ' +
	        'that returns a per-instance value in component ' +
	        'definitions.',
	        vm
	      );
	
	      return parentVal
	    }
	    return mergeDataOrFn.call(this, parentVal, childVal)
	  }
	
	  return mergeDataOrFn(parentVal, childVal, vm)
	};
	
	/**
	 * Hooks and props are merged as arrays.
	 */
	function mergeHook (
	  parentVal,
	  childVal
	) {
	  return childVal
	    ? parentVal
	      ? parentVal.concat(childVal)
	      : Array.isArray(childVal)
	        ? childVal
	        : [childVal]
	    : parentVal
	}
	
	LIFECYCLE_HOOKS.forEach(function (hook) {
	  strats[hook] = mergeHook;
	});
	
	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */
	function mergeAssets (
	  parentVal,
	  childVal,
	  vm,
	  key
	) {
	  var res = Object.create(parentVal || null);
	  if (childVal) {
	    ("production") !== 'production' && assertObjectType(key, childVal, vm);
	    return extend(res, childVal)
	  } else {
	    return res
	  }
	}
	
	ASSET_TYPES.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});
	
	/**
	 * Watchers.
	 *
	 * Watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */
	strats.watch = function (
	  parentVal,
	  childVal,
	  vm,
	  key
	) {
	  // work around Firefox's Object.prototype.watch...
	  if (parentVal === nativeWatch) { parentVal = undefined; }
	  if (childVal === nativeWatch) { childVal = undefined; }
	  /* istanbul ignore if */
	  if (!childVal) { return Object.create(parentVal || null) }
	  if (false) {
	    assertObjectType(key, childVal, vm);
	  }
	  if (!parentVal) { return childVal }
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key$1 in childVal) {
	    var parent = ret[key$1];
	    var child = childVal[key$1];
	    if (parent && !Array.isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key$1] = parent
	      ? parent.concat(child)
	      : Array.isArray(child) ? child : [child];
	  }
	  return ret
	};
	
	/**
	 * Other object hashes.
	 */
	strats.props =
	strats.methods =
	strats.inject =
	strats.computed = function (
	  parentVal,
	  childVal,
	  vm,
	  key
	) {
	  if (childVal && ("production") !== 'production') {
	    assertObjectType(key, childVal, vm);
	  }
	  if (!parentVal) { return childVal }
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  if (childVal) { extend(ret, childVal); }
	  return ret
	};
	strats.provide = mergeDataOrFn;
	
	/**
	 * Default strategy.
	 */
	var defaultStrat = function (parentVal, childVal) {
	  return childVal === undefined
	    ? parentVal
	    : childVal
	};
	
	/**
	 * Validate component names
	 */
	function checkComponents (options) {
	  for (var key in options.components) {
	    var lower = key.toLowerCase();
	    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
	      warn(
	        'Do not use built-in or reserved HTML elements as component ' +
	        'id: ' + key
	      );
	    }
	  }
	}
	
	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 */
	function normalizeProps (options, vm) {
	  var props = options.props;
	  if (!props) { return }
	  var res = {};
	  var i, val, name;
	  if (Array.isArray(props)) {
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        name = camelize(val);
	        res[name] = { type: null };
	      } else if (false) {
	        warn('props must be strings when using array syntax.');
	      }
	    }
	  } else if (isPlainObject(props)) {
	    for (var key in props) {
	      val = props[key];
	      name = camelize(key);
	      res[name] = isPlainObject(val)
	        ? val
	        : { type: val };
	    }
	  } else if (false) {
	    warn(
	      "Invalid value for option \"props\": expected an Array or an Object, " +
	      "but got " + (toRawType(props)) + ".",
	      vm
	    );
	  }
	  options.props = res;
	}
	
	/**
	 * Normalize all injections into Object-based format
	 */
	function normalizeInject (options, vm) {
	  var inject = options.inject;
	  var normalized = options.inject = {};
	  if (Array.isArray(inject)) {
	    for (var i = 0; i < inject.length; i++) {
	      normalized[inject[i]] = { from: inject[i] };
	    }
	  } else if (isPlainObject(inject)) {
	    for (var key in inject) {
	      var val = inject[key];
	      normalized[key] = isPlainObject(val)
	        ? extend({ from: key }, val)
	        : { from: val };
	    }
	  } else if (false) {
	    warn(
	      "Invalid value for option \"inject\": expected an Array or an Object, " +
	      "but got " + (toRawType(inject)) + ".",
	      vm
	    );
	  }
	}
	
	/**
	 * Normalize raw function directives into object format.
	 */
	function normalizeDirectives (options) {
	  var dirs = options.directives;
	  if (dirs) {
	    for (var key in dirs) {
	      var def = dirs[key];
	      if (typeof def === 'function') {
	        dirs[key] = { bind: def, update: def };
	      }
	    }
	  }
	}
	
	function assertObjectType (name, value, vm) {
	  if (!isPlainObject(value)) {
	    warn(
	      "Invalid value for option \"" + name + "\": expected an Object, " +
	      "but got " + (toRawType(value)) + ".",
	      vm
	    );
	  }
	}
	
	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 */
	function mergeOptions (
	  parent,
	  child,
	  vm
	) {
	  if (false) {
	    checkComponents(child);
	  }
	
	  if (typeof child === 'function') {
	    child = child.options;
	  }
	
	  normalizeProps(child, vm);
	  normalizeInject(child, vm);
	  normalizeDirectives(child);
	  var extendsFrom = child.extends;
	  if (extendsFrom) {
	    parent = mergeOptions(parent, extendsFrom, vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      parent = mergeOptions(parent, child.mixins[i], vm);
	    }
	  }
	  var options = {};
	  var key;
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField (key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options
	}
	
	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 */
	function resolveAsset (
	  options,
	  type,
	  id,
	  warnMissing
	) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return
	  }
	  var assets = options[type];
	  // check local registration variations first
	  if (hasOwn(assets, id)) { return assets[id] }
	  var camelizedId = camelize(id);
	  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
	  var PascalCaseId = capitalize(camelizedId);
	  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
	  // fallback to prototype chain
	  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
	  if (false) {
	    warn(
	      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
	      options
	    );
	  }
	  return res
	}
	
	/*  */
	
	function validateProp (
	  key,
	  propOptions,
	  propsData,
	  vm
	) {
	  var prop = propOptions[key];
	  var absent = !hasOwn(propsData, key);
	  var value = propsData[key];
	  // handle boolean props
	  if (isType(Boolean, prop.type)) {
	    if (absent && !hasOwn(prop, 'default')) {
	      value = false;
	    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
	      value = true;
	    }
	  }
	  // check default value
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop, key);
	    // since the default value is a fresh copy,
	    // make sure to observe it.
	    var prevShouldConvert = observerState.shouldConvert;
	    observerState.shouldConvert = true;
	    observe(value);
	    observerState.shouldConvert = prevShouldConvert;
	  }
	  if (false) {
	    assertProp(prop, key, value, vm, absent);
	  }
	  return value
	}
	
	/**
	 * Get the default value of a prop.
	 */
	function getPropDefaultValue (vm, prop, key) {
	  // no default, return undefined
	  if (!hasOwn(prop, 'default')) {
	    return undefined
	  }
	  var def = prop.default;
	  // warn against non-factory defaults for Object & Array
	  if (false) {
	    warn(
	      'Invalid default value for prop "' + key + '": ' +
	      'Props with type Object/Array must use a factory function ' +
	      'to return the default value.',
	      vm
	    );
	  }
	  // the raw prop value was also undefined from previous render,
	  // return previous default value to avoid unnecessary watcher trigger
	  if (vm && vm.$options.propsData &&
	    vm.$options.propsData[key] === undefined &&
	    vm._props[key] !== undefined
	  ) {
	    return vm._props[key]
	  }
	  // call factory function for non-Function types
	  // a value is Function if its prototype is function even across different execution context
	  return typeof def === 'function' && getType(prop.type) !== 'Function'
	    ? def.call(vm)
	    : def
	}
	
	/**
	 * Assert whether a prop is valid.
	 */
	function assertProp (
	  prop,
	  name,
	  value,
	  vm,
	  absent
	) {
	  if (prop.required && absent) {
	    warn(
	      'Missing required prop: "' + name + '"',
	      vm
	    );
	    return
	  }
	  if (value == null && !prop.required) {
	    return
	  }
	  var type = prop.type;
	  var valid = !type || type === true;
	  var expectedTypes = [];
	  if (type) {
	    if (!Array.isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType || '');
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    warn(
	      "Invalid prop: type check failed for prop \"" + name + "\"." +
	      " Expected " + (expectedTypes.map(capitalize).join(', ')) +
	      ", got " + (toRawType(value)) + ".",
	      vm
	    );
	    return
	  }
	  var validator = prop.validator;
	  if (validator) {
	    if (!validator(value)) {
	      warn(
	        'Invalid prop: custom validator check failed for prop "' + name + '".',
	        vm
	      );
	    }
	  }
	}
	
	var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;
	
	function assertType (value, type) {
	  var valid;
	  var expectedType = getType(type);
	  if (simpleCheckRE.test(expectedType)) {
	    var t = typeof value;
	    valid = t === expectedType.toLowerCase();
	    // for primitive wrapper objects
	    if (!valid && t === 'object') {
	      valid = value instanceof type;
	    }
	  } else if (expectedType === 'Object') {
	    valid = isPlainObject(value);
	  } else if (expectedType === 'Array') {
	    valid = Array.isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  }
	}
	
	/**
	 * Use function string name to check built-in types,
	 * because a simple equality check will fail when running
	 * across different vms / iframes.
	 */
	function getType (fn) {
	  var match = fn && fn.toString().match(/^\s*function (\w+)/);
	  return match ? match[1] : ''
	}
	
	function isType (type, fn) {
	  if (!Array.isArray(fn)) {
	    return getType(fn) === getType(type)
	  }
	  for (var i = 0, len = fn.length; i < len; i++) {
	    if (getType(fn[i]) === getType(type)) {
	      return true
	    }
	  }
	  /* istanbul ignore next */
	  return false
	}
	
	/*  */
	
	function handleError (err, vm, info) {
	  if (vm) {
	    var cur = vm;
	    while ((cur = cur.$parent)) {
	      var hooks = cur.$options.errorCaptured;
	      if (hooks) {
	        for (var i = 0; i < hooks.length; i++) {
	          try {
	            var capture = hooks[i].call(cur, err, vm, info) === false;
	            if (capture) { return }
	          } catch (e) {
	            globalHandleError(e, cur, 'errorCaptured hook');
	          }
	        }
	      }
	    }
	  }
	  globalHandleError(err, vm, info);
	}
	
	function globalHandleError (err, vm, info) {
	  if (config.errorHandler) {
	    try {
	      return config.errorHandler.call(null, err, vm, info)
	    } catch (e) {
	      logError(e, null, 'config.errorHandler');
	    }
	  }
	  logError(err, vm, info);
	}
	
	function logError (err, vm, info) {
	  if (false) {
	    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
	  }
	  /* istanbul ignore else */
	  if (inBrowser && typeof console !== 'undefined') {
	    console.error(err);
	  } else {
	    throw err
	  }
	}
	
	/*  */
	/* globals MessageChannel */
	
	var callbacks = [];
	var pending = false;
	
	function flushCallbacks () {
	  pending = false;
	  var copies = callbacks.slice(0);
	  callbacks.length = 0;
	  for (var i = 0; i < copies.length; i++) {
	    copies[i]();
	  }
	}
	
	// Here we have async deferring wrappers using both micro and macro tasks.
	// In < 2.4 we used micro tasks everywhere, but there are some scenarios where
	// micro tasks have too high a priority and fires in between supposedly
	// sequential events (e.g. #4521, #6690) or even between bubbling of the same
	// event (#6566). However, using macro tasks everywhere also has subtle problems
	// when state is changed right before repaint (e.g. #6813, out-in transitions).
	// Here we use micro task by default, but expose a way to force macro task when
	// needed (e.g. in event handlers attached by v-on).
	var microTimerFunc;
	var macroTimerFunc;
	var useMacroTask = false;
	
	// Determine (macro) Task defer implementation.
	// Technically setImmediate should be the ideal choice, but it's only available
	// in IE. The only polyfill that consistently queues the callback after all DOM
	// events triggered in the same loop is by using MessageChannel.
	/* istanbul ignore if */
	if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
	  macroTimerFunc = function () {
	    setImmediate(flushCallbacks);
	  };
	} else if (typeof MessageChannel !== 'undefined' && (
	  isNative(MessageChannel) ||
	  // PhantomJS
	  MessageChannel.toString() === '[object MessageChannelConstructor]'
	)) {
	  var channel = new MessageChannel();
	  var port = channel.port2;
	  channel.port1.onmessage = flushCallbacks;
	  macroTimerFunc = function () {
	    port.postMessage(1);
	  };
	} else {
	  /* istanbul ignore next */
	  macroTimerFunc = function () {
	    setTimeout(flushCallbacks, 0);
	  };
	}
	
	// Determine MicroTask defer implementation.
	/* istanbul ignore next, $flow-disable-line */
	if (typeof Promise !== 'undefined' && isNative(Promise)) {
	  var p = Promise.resolve();
	  microTimerFunc = function () {
	    p.then(flushCallbacks);
	    // in problematic UIWebViews, Promise.then doesn't completely break, but
	    // it can get stuck in a weird state where callbacks are pushed into the
	    // microtask queue but the queue isn't being flushed, until the browser
	    // needs to do some other work, e.g. handle a timer. Therefore we can
	    // "force" the microtask queue to be flushed by adding an empty timer.
	    if (isIOS) { setTimeout(noop); }
	  };
	} else {
	  // fallback to macro
	  microTimerFunc = macroTimerFunc;
	}
	
	/**
	 * Wrap a function so that if any code inside triggers state change,
	 * the changes are queued using a Task instead of a MicroTask.
	 */
	function withMacroTask (fn) {
	  return fn._withTask || (fn._withTask = function () {
	    useMacroTask = true;
	    var res = fn.apply(null, arguments);
	    useMacroTask = false;
	    return res
	  })
	}
	
	function nextTick (cb, ctx) {
	  var _resolve;
	  callbacks.push(function () {
	    if (cb) {
	      try {
	        cb.call(ctx);
	      } catch (e) {
	        handleError(e, ctx, 'nextTick');
	      }
	    } else if (_resolve) {
	      _resolve(ctx);
	    }
	  });
	  if (!pending) {
	    pending = true;
	    if (useMacroTask) {
	      macroTimerFunc();
	    } else {
	      microTimerFunc();
	    }
	  }
	  // $flow-disable-line
	  if (!cb && typeof Promise !== 'undefined') {
	    return new Promise(function (resolve) {
	      _resolve = resolve;
	    })
	  }
	}
	
	/*  */
	
	var mark;
	var measure;
	
	if (false) {
	  var perf = inBrowser && window.performance;
	  /* istanbul ignore if */
	  if (
	    perf &&
	    perf.mark &&
	    perf.measure &&
	    perf.clearMarks &&
	    perf.clearMeasures
	  ) {
	    mark = function (tag) { return perf.mark(tag); };
	    measure = function (name, startTag, endTag) {
	      perf.measure(name, startTag, endTag);
	      perf.clearMarks(startTag);
	      perf.clearMarks(endTag);
	      perf.clearMeasures(name);
	    };
	  }
	}
	
	/* not type checking this file because flow doesn't play well with Proxy */
	
	var initProxy;
	
	if (false) {
	  var allowedGlobals = makeMap(
	    'Infinity,undefined,NaN,isFinite,isNaN,' +
	    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
	    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
	    'require' // for Webpack/Browserify
	  );
	
	  var warnNonPresent = function (target, key) {
	    warn(
	      "Property or method \"" + key + "\" is not defined on the instance but " +
	      'referenced during render. Make sure that this property is reactive, ' +
	      'either in the data option, or for class-based components, by ' +
	      'initializing the property. ' +
	      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
	      target
	    );
	  };
	
	  var hasProxy =
	    typeof Proxy !== 'undefined' &&
	    Proxy.toString().match(/native code/);
	
	  if (hasProxy) {
	    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
	    config.keyCodes = new Proxy(config.keyCodes, {
	      set: function set (target, key, value) {
	        if (isBuiltInModifier(key)) {
	          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
	          return false
	        } else {
	          target[key] = value;
	          return true
	        }
	      }
	    });
	  }
	
	  var hasHandler = {
	    has: function has (target, key) {
	      var has = key in target;
	      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
	      if (!has && !isAllowed) {
	        warnNonPresent(target, key);
	      }
	      return has || !isAllowed
	    }
	  };
	
	  var getHandler = {
	    get: function get (target, key) {
	      if (typeof key === 'string' && !(key in target)) {
	        warnNonPresent(target, key);
	      }
	      return target[key]
	    }
	  };
	
	  initProxy = function initProxy (vm) {
	    if (hasProxy) {
	      // determine which proxy handler to use
	      var options = vm.$options;
	      var handlers = options.render && options.render._withStripped
	        ? getHandler
	        : hasHandler;
	      vm._renderProxy = new Proxy(vm, handlers);
	    } else {
	      vm._renderProxy = vm;
	    }
	  };
	}
	
	/*  */
	
	var normalizeEvent = cached(function (name) {
	  var passive = name.charAt(0) === '&';
	  name = passive ? name.slice(1) : name;
	  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
	  name = once$$1 ? name.slice(1) : name;
	  var capture = name.charAt(0) === '!';
	  name = capture ? name.slice(1) : name;
	  return {
	    name: name,
	    once: once$$1,
	    capture: capture,
	    passive: passive
	  }
	});
	
	function createFnInvoker (fns) {
	  function invoker () {
	    var arguments$1 = arguments;
	
	    var fns = invoker.fns;
	    if (Array.isArray(fns)) {
	      var cloned = fns.slice();
	      for (var i = 0; i < cloned.length; i++) {
	        cloned[i].apply(null, arguments$1);
	      }
	    } else {
	      // return handler return value for single handlers
	      return fns.apply(null, arguments)
	    }
	  }
	  invoker.fns = fns;
	  return invoker
	}
	
	function updateListeners (
	  on,
	  oldOn,
	  add,
	  remove$$1,
	  vm
	) {
	  var name, cur, old, event;
	  for (name in on) {
	    cur = on[name];
	    old = oldOn[name];
	    event = normalizeEvent(name);
	    if (isUndef(cur)) {
	      ("production") !== 'production' && warn(
	        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
	        vm
	      );
	    } else if (isUndef(old)) {
	      if (isUndef(cur.fns)) {
	        cur = on[name] = createFnInvoker(cur);
	      }
	      add(event.name, cur, event.once, event.capture, event.passive);
	    } else if (cur !== old) {
	      old.fns = cur;
	      on[name] = old;
	    }
	  }
	  for (name in oldOn) {
	    if (isUndef(on[name])) {
	      event = normalizeEvent(name);
	      remove$$1(event.name, oldOn[name], event.capture);
	    }
	  }
	}
	
	/*  */
	
	function mergeVNodeHook (def, hookKey, hook) {
	  var invoker;
	  var oldHook = def[hookKey];
	
	  function wrappedHook () {
	    hook.apply(this, arguments);
	    // important: remove merged hook to ensure it's called only once
	    // and prevent memory leak
	    remove(invoker.fns, wrappedHook);
	  }
	
	  if (isUndef(oldHook)) {
	    // no existing hook
	    invoker = createFnInvoker([wrappedHook]);
	  } else {
	    /* istanbul ignore if */
	    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
	      // already a merged invoker
	      invoker = oldHook;
	      invoker.fns.push(wrappedHook);
	    } else {
	      // existing plain hook
	      invoker = createFnInvoker([oldHook, wrappedHook]);
	    }
	  }
	
	  invoker.merged = true;
	  def[hookKey] = invoker;
	}
	
	/*  */
	
	function extractPropsFromVNodeData (
	  data,
	  Ctor,
	  tag
	) {
	  // we are only extracting raw values here.
	  // validation and default values are handled in the child
	  // component itself.
	  var propOptions = Ctor.options.props;
	  if (isUndef(propOptions)) {
	    return
	  }
	  var res = {};
	  var attrs = data.attrs;
	  var props = data.props;
	  if (isDef(attrs) || isDef(props)) {
	    for (var key in propOptions) {
	      var altKey = hyphenate(key);
	      if (false) {
	        var keyInLowerCase = key.toLowerCase();
	        if (
	          key !== keyInLowerCase &&
	          attrs && hasOwn(attrs, keyInLowerCase)
	        ) {
	          tip(
	            "Prop \"" + keyInLowerCase + "\" is passed to component " +
	            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
	            " \"" + key + "\". " +
	            "Note that HTML attributes are case-insensitive and camelCased " +
	            "props need to use their kebab-case equivalents when using in-DOM " +
	            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
	          );
	        }
	      }
	      checkProp(res, props, key, altKey, true) ||
	      checkProp(res, attrs, key, altKey, false);
	    }
	  }
	  return res
	}
	
	function checkProp (
	  res,
	  hash,
	  key,
	  altKey,
	  preserve
	) {
	  if (isDef(hash)) {
	    if (hasOwn(hash, key)) {
	      res[key] = hash[key];
	      if (!preserve) {
	        delete hash[key];
	      }
	      return true
	    } else if (hasOwn(hash, altKey)) {
	      res[key] = hash[altKey];
	      if (!preserve) {
	        delete hash[altKey];
	      }
	      return true
	    }
	  }
	  return false
	}
	
	/*  */
	
	// The template compiler attempts to minimize the need for normalization by
	// statically analyzing the template at compile time.
	//
	// For plain HTML markup, normalization can be completely skipped because the
	// generated render function is guaranteed to return Array<VNode>. There are
	// two cases where extra normalization is needed:
	
	// 1. When the children contains components - because a functional component
	// may return an Array instead of a single root. In this case, just a simple
	// normalization is needed - if any child is an Array, we flatten the whole
	// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
	// because functional components already normalize their own children.
	function simpleNormalizeChildren (children) {
	  for (var i = 0; i < children.length; i++) {
	    if (Array.isArray(children[i])) {
	      return Array.prototype.concat.apply([], children)
	    }
	  }
	  return children
	}
	
	// 2. When the children contains constructs that always generated nested Arrays,
	// e.g. <template>, <slot>, v-for, or when the children is provided by user
	// with hand-written render functions / JSX. In such cases a full normalization
	// is needed to cater to all possible types of children values.
	function normalizeChildren (children) {
	  return isPrimitive(children)
	    ? [createTextVNode(children)]
	    : Array.isArray(children)
	      ? normalizeArrayChildren(children)
	      : undefined
	}
	
	function isTextNode (node) {
	  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
	}
	
	function normalizeArrayChildren (children, nestedIndex) {
	  var res = [];
	  var i, c, lastIndex, last;
	  for (i = 0; i < children.length; i++) {
	    c = children[i];
	    if (isUndef(c) || typeof c === 'boolean') { continue }
	    lastIndex = res.length - 1;
	    last = res[lastIndex];
	    //  nested
	    if (Array.isArray(c)) {
	      if (c.length > 0) {
	        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
	        // merge adjacent text nodes
	        if (isTextNode(c[0]) && isTextNode(last)) {
	          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
	          c.shift();
	        }
	        res.push.apply(res, c);
	      }
	    } else if (isPrimitive(c)) {
	      if (isTextNode(last)) {
	        // merge adjacent text nodes
	        // this is necessary for SSR hydration because text nodes are
	        // essentially merged when rendered to HTML strings
	        res[lastIndex] = createTextVNode(last.text + c);
	      } else if (c !== '') {
	        // convert primitive to vnode
	        res.push(createTextVNode(c));
	      }
	    } else {
	      if (isTextNode(c) && isTextNode(last)) {
	        // merge adjacent text nodes
	        res[lastIndex] = createTextVNode(last.text + c.text);
	      } else {
	        // default key for nested array children (likely generated by v-for)
	        if (isTrue(children._isVList) &&
	          isDef(c.tag) &&
	          isUndef(c.key) &&
	          isDef(nestedIndex)) {
	          c.key = "__vlist" + nestedIndex + "_" + i + "__";
	        }
	        res.push(c);
	      }
	    }
	  }
	  return res
	}
	
	/*  */
	
	function ensureCtor (comp, base) {
	  if (
	    comp.__esModule ||
	    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
	  ) {
	    comp = comp.default;
	  }
	  return isObject(comp)
	    ? base.extend(comp)
	    : comp
	}
	
	function createAsyncPlaceholder (
	  factory,
	  data,
	  context,
	  children,
	  tag
	) {
	  var node = createEmptyVNode();
	  node.asyncFactory = factory;
	  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
	  return node
	}
	
	function resolveAsyncComponent (
	  factory,
	  baseCtor,
	  context
	) {
	  if (isTrue(factory.error) && isDef(factory.errorComp)) {
	    return factory.errorComp
	  }
	
	  if (isDef(factory.resolved)) {
	    return factory.resolved
	  }
	
	  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
	    return factory.loadingComp
	  }
	
	  if (isDef(factory.contexts)) {
	    // already pending
	    factory.contexts.push(context);
	  } else {
	    var contexts = factory.contexts = [context];
	    var sync = true;
	
	    var forceRender = function () {
	      for (var i = 0, l = contexts.length; i < l; i++) {
	        contexts[i].$forceUpdate();
	      }
	    };
	
	    var resolve = once(function (res) {
	      // cache resolved
	      factory.resolved = ensureCtor(res, baseCtor);
	      // invoke callbacks only if this is not a synchronous resolve
	      // (async resolves are shimmed as synchronous during SSR)
	      if (!sync) {
	        forceRender();
	      }
	    });
	
	    var reject = once(function (reason) {
	      ("production") !== 'production' && warn(
	        "Failed to resolve async component: " + (String(factory)) +
	        (reason ? ("\nReason: " + reason) : '')
	      );
	      if (isDef(factory.errorComp)) {
	        factory.error = true;
	        forceRender();
	      }
	    });
	
	    var res = factory(resolve, reject);
	
	    if (isObject(res)) {
	      if (typeof res.then === 'function') {
	        // () => Promise
	        if (isUndef(factory.resolved)) {
	          res.then(resolve, reject);
	        }
	      } else if (isDef(res.component) && typeof res.component.then === 'function') {
	        res.component.then(resolve, reject);
	
	        if (isDef(res.error)) {
	          factory.errorComp = ensureCtor(res.error, baseCtor);
	        }
	
	        if (isDef(res.loading)) {
	          factory.loadingComp = ensureCtor(res.loading, baseCtor);
	          if (res.delay === 0) {
	            factory.loading = true;
	          } else {
	            setTimeout(function () {
	              if (isUndef(factory.resolved) && isUndef(factory.error)) {
	                factory.loading = true;
	                forceRender();
	              }
	            }, res.delay || 200);
	          }
	        }
	
	        if (isDef(res.timeout)) {
	          setTimeout(function () {
	            if (isUndef(factory.resolved)) {
	              reject(
	                 false
	                  ? ("timeout (" + (res.timeout) + "ms)")
	                  : null
	              );
	            }
	          }, res.timeout);
	        }
	      }
	    }
	
	    sync = false;
	    // return in case resolved synchronously
	    return factory.loading
	      ? factory.loadingComp
	      : factory.resolved
	  }
	}
	
	/*  */
	
	function isAsyncPlaceholder (node) {
	  return node.isComment && node.asyncFactory
	}
	
	/*  */
	
	function getFirstComponentChild (children) {
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      var c = children[i];
	      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
	        return c
	      }
	    }
	  }
	}
	
	/*  */
	
	/*  */
	
	function initEvents (vm) {
	  vm._events = Object.create(null);
	  vm._hasHookEvent = false;
	  // init parent attached events
	  var listeners = vm.$options._parentListeners;
	  if (listeners) {
	    updateComponentListeners(vm, listeners);
	  }
	}
	
	var target;
	
	function add (event, fn, once) {
	  if (once) {
	    target.$once(event, fn);
	  } else {
	    target.$on(event, fn);
	  }
	}
	
	function remove$1 (event, fn) {
	  target.$off(event, fn);
	}
	
	function updateComponentListeners (
	  vm,
	  listeners,
	  oldListeners
	) {
	  target = vm;
	  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
	}
	
	function eventsMixin (Vue) {
	  var hookRE = /^hook:/;
	  Vue.prototype.$on = function (event, fn) {
	    var this$1 = this;
	
	    var vm = this;
	    if (Array.isArray(event)) {
	      for (var i = 0, l = event.length; i < l; i++) {
	        this$1.$on(event[i], fn);
	      }
	    } else {
	      (vm._events[event] || (vm._events[event] = [])).push(fn);
	      // optimize hook:event cost by using a boolean flag marked at registration
	      // instead of a hash lookup
	      if (hookRE.test(event)) {
	        vm._hasHookEvent = true;
	      }
	    }
	    return vm
	  };
	
	  Vue.prototype.$once = function (event, fn) {
	    var vm = this;
	    function on () {
	      vm.$off(event, on);
	      fn.apply(vm, arguments);
	    }
	    on.fn = fn;
	    vm.$on(event, on);
	    return vm
	  };
	
	  Vue.prototype.$off = function (event, fn) {
	    var this$1 = this;
	
	    var vm = this;
	    // all
	    if (!arguments.length) {
	      vm._events = Object.create(null);
	      return vm
	    }
	    // array of events
	    if (Array.isArray(event)) {
	      for (var i = 0, l = event.length; i < l; i++) {
	        this$1.$off(event[i], fn);
	      }
	      return vm
	    }
	    // specific event
	    var cbs = vm._events[event];
	    if (!cbs) {
	      return vm
	    }
	    if (arguments.length === 1) {
	      vm._events[event] = null;
	      return vm
	    }
	    if (fn) {
	      // specific handler
	      var cb;
	      var i$1 = cbs.length;
	      while (i$1--) {
	        cb = cbs[i$1];
	        if (cb === fn || cb.fn === fn) {
	          cbs.splice(i$1, 1);
	          break
	        }
	      }
	    }
	    return vm
	  };
	
	  Vue.prototype.$emit = function (event) {
	    var vm = this;
	    if (false) {
	      var lowerCaseEvent = event.toLowerCase();
	      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
	        tip(
	          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
	          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
	          "Note that HTML attributes are case-insensitive and you cannot use " +
	          "v-on to listen to camelCase events when using in-DOM templates. " +
	          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
	        );
	      }
	    }
	    var cbs = vm._events[event];
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        try {
	          cbs[i].apply(vm, args);
	        } catch (e) {
	          handleError(e, vm, ("event handler for \"" + event + "\""));
	        }
	      }
	    }
	    return vm
	  };
	}
	
	/*  */
	
	/**
	 * Runtime helper for resolving raw children VNodes into a slot object.
	 */
	function resolveSlots (
	  children,
	  context
	) {
	  var slots = {};
	  if (!children) {
	    return slots
	  }
	  var defaultSlot = [];
	  for (var i = 0, l = children.length; i < l; i++) {
	    var child = children[i];
	    var data = child.data;
	    // remove slot attribute if the node is resolved as a Vue slot node
	    if (data && data.attrs && data.attrs.slot) {
	      delete data.attrs.slot;
	    }
	    // named slots should only be respected if the vnode was rendered in the
	    // same context.
	    if ((child.context === context || child.functionalContext === context) &&
	      data && data.slot != null
	    ) {
	      var name = child.data.slot;
	      var slot = (slots[name] || (slots[name] = []));
	      if (child.tag === 'template') {
	        slot.push.apply(slot, child.children);
	      } else {
	        slot.push(child);
	      }
	    } else {
	      defaultSlot.push(child);
	    }
	  }
	  // ignore whitespace
	  if (!defaultSlot.every(isWhitespace)) {
	    slots.default = defaultSlot;
	  }
	  return slots
	}
	
	function isWhitespace (node) {
	  return node.isComment || node.text === ' '
	}
	
	function resolveScopedSlots (
	  fns, // see flow/vnode
	  res
	) {
	  res = res || {};
	  for (var i = 0; i < fns.length; i++) {
	    if (Array.isArray(fns[i])) {
	      resolveScopedSlots(fns[i], res);
	    } else {
	      res[fns[i].key] = fns[i].fn;
	    }
	  }
	  return res
	}
	
	/*  */
	
	var activeInstance = null;
	var isUpdatingChildComponent = false;
	
	function initLifecycle (vm) {
	  var options = vm.$options;
	
	  // locate first non-abstract parent
	  var parent = options.parent;
	  if (parent && !options.abstract) {
	    while (parent.$options.abstract && parent.$parent) {
	      parent = parent.$parent;
	    }
	    parent.$children.push(vm);
	  }
	
	  vm.$parent = parent;
	  vm.$root = parent ? parent.$root : vm;
	
	  vm.$children = [];
	  vm.$refs = {};
	
	  vm._watcher = null;
	  vm._inactive = null;
	  vm._directInactive = false;
	  vm._isMounted = false;
	  vm._isDestroyed = false;
	  vm._isBeingDestroyed = false;
	}
	
	function lifecycleMixin (Vue) {
	  Vue.prototype._update = function (vnode, hydrating) {
	    var vm = this;
	    if (vm._isMounted) {
	      callHook(vm, 'beforeUpdate');
	    }
	    var prevEl = vm.$el;
	    var prevVnode = vm._vnode;
	    var prevActiveInstance = activeInstance;
	    activeInstance = vm;
	    vm._vnode = vnode;
	    // Vue.prototype.__patch__ is injected in entry points
	    // based on the rendering backend used.
	    if (!prevVnode) {
	      // initial render
	      vm.$el = vm.__patch__(
	        vm.$el, vnode, hydrating, false /* removeOnly */,
	        vm.$options._parentElm,
	        vm.$options._refElm
	      );
	      // no need for the ref nodes after initial patch
	      // this prevents keeping a detached DOM tree in memory (#5851)
	      vm.$options._parentElm = vm.$options._refElm = null;
	    } else {
	      // updates
	      vm.$el = vm.__patch__(prevVnode, vnode);
	    }
	    activeInstance = prevActiveInstance;
	    // update __vue__ reference
	    if (prevEl) {
	      prevEl.__vue__ = null;
	    }
	    if (vm.$el) {
	      vm.$el.__vue__ = vm;
	    }
	    // if parent is an HOC, update its $el as well
	    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
	      vm.$parent.$el = vm.$el;
	    }
	    // updated hook is called by the scheduler to ensure that children are
	    // updated in a parent's updated hook.
	  };
	
	  Vue.prototype.$forceUpdate = function () {
	    var vm = this;
	    if (vm._watcher) {
	      vm._watcher.update();
	    }
	  };
	
	  Vue.prototype.$destroy = function () {
	    var vm = this;
	    if (vm._isBeingDestroyed) {
	      return
	    }
	    callHook(vm, 'beforeDestroy');
	    vm._isBeingDestroyed = true;
	    // remove self from parent
	    var parent = vm.$parent;
	    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
	      remove(parent.$children, vm);
	    }
	    // teardown watchers
	    if (vm._watcher) {
	      vm._watcher.teardown();
	    }
	    var i = vm._watchers.length;
	    while (i--) {
	      vm._watchers[i].teardown();
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (vm._data.__ob__) {
	      vm._data.__ob__.vmCount--;
	    }
	    // call the last hook...
	    vm._isDestroyed = true;
	    // invoke destroy hooks on current rendered tree
	    vm.__patch__(vm._vnode, null);
	    // fire destroyed hook
	    callHook(vm, 'destroyed');
	    // turn off all instance listeners.
	    vm.$off();
	    // remove __vue__ reference
	    if (vm.$el) {
	      vm.$el.__vue__ = null;
	    }
	    // release circular reference (#6759)
	    if (vm.$vnode) {
	      vm.$vnode.parent = null;
	    }
	  };
	}
	
	function mountComponent (
	  vm,
	  el,
	  hydrating
	) {
	  vm.$el = el;
	  if (!vm.$options.render) {
	    vm.$options.render = createEmptyVNode;
	    if (false) {
	      /* istanbul ignore if */
	      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
	        vm.$options.el || el) {
	        warn(
	          'You are using the runtime-only build of Vue where the template ' +
	          'compiler is not available. Either pre-compile the templates into ' +
	          'render functions, or use the compiler-included build.',
	          vm
	        );
	      } else {
	        warn(
	          'Failed to mount component: template or render function not defined.',
	          vm
	        );
	      }
	    }
	  }
	  callHook(vm, 'beforeMount');
	
	  var updateComponent;
	  /* istanbul ignore if */
	  if (false) {
	    updateComponent = function () {
	      var name = vm._name;
	      var id = vm._uid;
	      var startTag = "vue-perf-start:" + id;
	      var endTag = "vue-perf-end:" + id;
	
	      mark(startTag);
	      var vnode = vm._render();
	      mark(endTag);
	      measure(("vue " + name + " render"), startTag, endTag);
	
	      mark(startTag);
	      vm._update(vnode, hydrating);
	      mark(endTag);
	      measure(("vue " + name + " patch"), startTag, endTag);
	    };
	  } else {
	    updateComponent = function () {
	      vm._update(vm._render(), hydrating);
	    };
	  }
	
	  vm._watcher = new Watcher(vm, updateComponent, noop);
	  hydrating = false;
	
	  // manually mounted instance, call mounted on self
	  // mounted is called for render-created child components in its inserted hook
	  if (vm.$vnode == null) {
	    vm._isMounted = true;
	    callHook(vm, 'mounted');
	  }
	  return vm
	}
	
	function updateChildComponent (
	  vm,
	  propsData,
	  listeners,
	  parentVnode,
	  renderChildren
	) {
	  if (false) {
	    isUpdatingChildComponent = true;
	  }
	
	  // determine whether component has slot children
	  // we need to do this before overwriting $options._renderChildren
	  var hasChildren = !!(
	    renderChildren ||               // has new static slots
	    vm.$options._renderChildren ||  // has old static slots
	    parentVnode.data.scopedSlots || // has new scoped slots
	    vm.$scopedSlots !== emptyObject // has old scoped slots
	  );
	
	  vm.$options._parentVnode = parentVnode;
	  vm.$vnode = parentVnode; // update vm's placeholder node without re-render
	
	  if (vm._vnode) { // update child tree's parent
	    vm._vnode.parent = parentVnode;
	  }
	  vm.$options._renderChildren = renderChildren;
	
	  // update $attrs and $listeners hash
	  // these are also reactive so they may trigger child update if the child
	  // used them during render
	  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;
	  vm.$listeners = listeners || emptyObject;
	
	  // update props
	  if (propsData && vm.$options.props) {
	    observerState.shouldConvert = false;
	    var props = vm._props;
	    var propKeys = vm.$options._propKeys || [];
	    for (var i = 0; i < propKeys.length; i++) {
	      var key = propKeys[i];
	      props[key] = validateProp(key, vm.$options.props, propsData, vm);
	    }
	    observerState.shouldConvert = true;
	    // keep a copy of raw propsData
	    vm.$options.propsData = propsData;
	  }
	
	  // update listeners
	  if (listeners) {
	    var oldListeners = vm.$options._parentListeners;
	    vm.$options._parentListeners = listeners;
	    updateComponentListeners(vm, listeners, oldListeners);
	  }
	  // resolve slots + force update if has children
	  if (hasChildren) {
	    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
	    vm.$forceUpdate();
	  }
	
	  if (false) {
	    isUpdatingChildComponent = false;
	  }
	}
	
	function isInInactiveTree (vm) {
	  while (vm && (vm = vm.$parent)) {
	    if (vm._inactive) { return true }
	  }
	  return false
	}
	
	function activateChildComponent (vm, direct) {
	  if (direct) {
	    vm._directInactive = false;
	    if (isInInactiveTree(vm)) {
	      return
	    }
	  } else if (vm._directInactive) {
	    return
	  }
	  if (vm._inactive || vm._inactive === null) {
	    vm._inactive = false;
	    for (var i = 0; i < vm.$children.length; i++) {
	      activateChildComponent(vm.$children[i]);
	    }
	    callHook(vm, 'activated');
	  }
	}
	
	function deactivateChildComponent (vm, direct) {
	  if (direct) {
	    vm._directInactive = true;
	    if (isInInactiveTree(vm)) {
	      return
	    }
	  }
	  if (!vm._inactive) {
	    vm._inactive = true;
	    for (var i = 0; i < vm.$children.length; i++) {
	      deactivateChildComponent(vm.$children[i]);
	    }
	    callHook(vm, 'deactivated');
	  }
	}
	
	function callHook (vm, hook) {
	  var handlers = vm.$options[hook];
	  if (handlers) {
	    for (var i = 0, j = handlers.length; i < j; i++) {
	      try {
	        handlers[i].call(vm);
	      } catch (e) {
	        handleError(e, vm, (hook + " hook"));
	      }
	    }
	  }
	  if (vm._hasHookEvent) {
	    vm.$emit('hook:' + hook);
	  }
	}
	
	/*  */
	
	
	var MAX_UPDATE_COUNT = 100;
	
	var queue = [];
	var activatedChildren = [];
	var has = {};
	var circular = {};
	var waiting = false;
	var flushing = false;
	var index = 0;
	
	/**
	 * Reset the scheduler's state.
	 */
	function resetSchedulerState () {
	  index = queue.length = activatedChildren.length = 0;
	  has = {};
	  if (false) {
	    circular = {};
	  }
	  waiting = flushing = false;
	}
	
	/**
	 * Flush both queues and run the watchers.
	 */
	function flushSchedulerQueue () {
	  flushing = true;
	  var watcher, id;
	
	  // Sort queue before flush.
	  // This ensures that:
	  // 1. Components are updated from parent to child. (because parent is always
	  //    created before the child)
	  // 2. A component's user watchers are run before its render watcher (because
	  //    user watchers are created before the render watcher)
	  // 3. If a component is destroyed during a parent component's watcher run,
	  //    its watchers can be skipped.
	  queue.sort(function (a, b) { return a.id - b.id; });
	
	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (index = 0; index < queue.length; index++) {
	    watcher = queue[index];
	    id = watcher.id;
	    has[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if (false) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > MAX_UPDATE_COUNT) {
	        warn(
	          'You may have an infinite update loop ' + (
	            watcher.user
	              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
	              : "in a component render function."
	          ),
	          watcher.vm
	        );
	        break
	      }
	    }
	  }
	
	  // keep copies of post queues before resetting state
	  var activatedQueue = activatedChildren.slice();
	  var updatedQueue = queue.slice();
	
	  resetSchedulerState();
	
	  // call component updated and activated hooks
	  callActivatedHooks(activatedQueue);
	  callUpdatedHooks(updatedQueue);
	
	  // devtool hook
	  /* istanbul ignore if */
	  if (devtools && config.devtools) {
	    devtools.emit('flush');
	  }
	}
	
	function callUpdatedHooks (queue) {
	  var i = queue.length;
	  while (i--) {
	    var watcher = queue[i];
	    var vm = watcher.vm;
	    if (vm._watcher === watcher && vm._isMounted) {
	      callHook(vm, 'updated');
	    }
	  }
	}
	
	/**
	 * Queue a kept-alive component that was activated during patch.
	 * The queue will be processed after the entire tree has been patched.
	 */
	function queueActivatedComponent (vm) {
	  // setting _inactive to false here so that a render function can
	  // rely on checking whether it's in an inactive tree (e.g. router-view)
	  vm._inactive = false;
	  activatedChildren.push(vm);
	}
	
	function callActivatedHooks (queue) {
	  for (var i = 0; i < queue.length; i++) {
	    queue[i]._inactive = true;
	    activateChildComponent(queue[i], true /* true */);
	  }
	}
	
	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 */
	function queueWatcher (watcher) {
	  var id = watcher.id;
	  if (has[id] == null) {
	    has[id] = true;
	    if (!flushing) {
	      queue.push(watcher);
	    } else {
	      // if already flushing, splice the watcher based on its id
	      // if already past its id, it will be run next immediately.
	      var i = queue.length - 1;
	      while (i > index && queue[i].id > watcher.id) {
	        i--;
	      }
	      queue.splice(i + 1, 0, watcher);
	    }
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushSchedulerQueue);
	    }
	  }
	}
	
	/*  */
	
	var uid$2 = 0;
	
	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 */
	var Watcher = function Watcher (
	  vm,
	  expOrFn,
	  cb,
	  options
	) {
	  this.vm = vm;
	  vm._watchers.push(this);
	  // options
	  if (options) {
	    this.deep = !!options.deep;
	    this.user = !!options.user;
	    this.lazy = !!options.lazy;
	    this.sync = !!options.sync;
	  } else {
	    this.deep = this.user = this.lazy = this.sync = false;
	  }
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.expression =  false
	    ? expOrFn.toString()
	    : '';
	  // parse expression for getter
	  if (typeof expOrFn === 'function') {
	    this.getter = expOrFn;
	  } else {
	    this.getter = parsePath(expOrFn);
	    if (!this.getter) {
	      this.getter = function () {};
	      ("production") !== 'production' && warn(
	        "Failed watching path: \"" + expOrFn + "\" " +
	        'Watcher only accepts simple dot-delimited paths. ' +
	        'For full control, use a function instead.',
	        vm
	      );
	    }
	  }
	  this.value = this.lazy
	    ? undefined
	    : this.get();
	};
	
	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */
	Watcher.prototype.get = function get () {
	  pushTarget(this);
	  var value;
	  var vm = this.vm;
	  try {
	    value = this.getter.call(vm, vm);
	  } catch (e) {
	    if (this.user) {
	      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
	    } else {
	      throw e
	    }
	  } finally {
	    // "touch" every property so they are all tracked as
	    // dependencies for deep watching
	    if (this.deep) {
	      traverse(value);
	    }
	    popTarget();
	    this.cleanupDeps();
	  }
	  return value
	};
	
	/**
	 * Add a dependency to this directive.
	 */
	Watcher.prototype.addDep = function addDep (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};
	
	/**
	 * Clean up for dependency collection.
	 */
	Watcher.prototype.cleanupDeps = function cleanupDeps () {
	    var this$1 = this;
	
	  var i = this.deps.length;
	  while (i--) {
	    var dep = this$1.deps[i];
	    if (!this$1.newDepIds.has(dep.id)) {
	      dep.removeSub(this$1);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};
	
	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 */
	Watcher.prototype.update = function update () {
	  /* istanbul ignore else */
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync) {
	    this.run();
	  } else {
	    queueWatcher(this);
	  }
	};
	
	/**
	 * Scheduler job interface.
	 * Will be called by the scheduler.
	 */
	Watcher.prototype.run = function run () {
	  if (this.active) {
	    var value = this.get();
	    if (
	      value !== this.value ||
	      // Deep watchers and watchers on Object/Arrays should fire even
	      // when the value is the same, because the value may
	      // have mutated.
	      isObject(value) ||
	      this.deep
	    ) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      if (this.user) {
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	  }
	};
	
	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */
	Watcher.prototype.evaluate = function evaluate () {
	  this.value = this.get();
	  this.dirty = false;
	};
	
	/**
	 * Depend on all deps collected by this watcher.
	 */
	Watcher.prototype.depend = function depend () {
	    var this$1 = this;
	
	  var i = this.deps.length;
	  while (i--) {
	    this$1.deps[i].depend();
	  }
	};
	
	/**
	 * Remove self from all dependencies' subscriber list.
	 */
	Watcher.prototype.teardown = function teardown () {
	    var this$1 = this;
	
	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed.
	    if (!this.vm._isBeingDestroyed) {
	      remove(this.vm._watchers, this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this$1.deps[i].removeSub(this$1);
	    }
	    this.active = false;
	  }
	};
	
	/**
	 * Recursively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 */
	var seenObjects = new _Set();
	function traverse (val) {
	  seenObjects.clear();
	  _traverse(val, seenObjects);
	}
	
	function _traverse (val, seen) {
	  var i, keys;
	  var isA = Array.isArray(val);
	  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
	    return
	  }
	  if (val.__ob__) {
	    var depId = val.__ob__.dep.id;
	    if (seen.has(depId)) {
	      return
	    }
	    seen.add(depId);
	  }
	  if (isA) {
	    i = val.length;
	    while (i--) { _traverse(val[i], seen); }
	  } else {
	    keys = Object.keys(val);
	    i = keys.length;
	    while (i--) { _traverse(val[keys[i]], seen); }
	  }
	}
	
	/*  */
	
	var sharedPropertyDefinition = {
	  enumerable: true,
	  configurable: true,
	  get: noop,
	  set: noop
	};
	
	function proxy (target, sourceKey, key) {
	  sharedPropertyDefinition.get = function proxyGetter () {
	    return this[sourceKey][key]
	  };
	  sharedPropertyDefinition.set = function proxySetter (val) {
	    this[sourceKey][key] = val;
	  };
	  Object.defineProperty(target, key, sharedPropertyDefinition);
	}
	
	function initState (vm) {
	  vm._watchers = [];
	  var opts = vm.$options;
	  if (opts.props) { initProps(vm, opts.props); }
	  if (opts.methods) { initMethods(vm, opts.methods); }
	  if (opts.data) {
	    initData(vm);
	  } else {
	    observe(vm._data = {}, true /* asRootData */);
	  }
	  if (opts.computed) { initComputed(vm, opts.computed); }
	  if (opts.watch && opts.watch !== nativeWatch) {
	    initWatch(vm, opts.watch);
	  }
	}
	
	function initProps (vm, propsOptions) {
	  var propsData = vm.$options.propsData || {};
	  var props = vm._props = {};
	  // cache prop keys so that future props updates can iterate using Array
	  // instead of dynamic object key enumeration.
	  var keys = vm.$options._propKeys = [];
	  var isRoot = !vm.$parent;
	  // root instance props should be converted
	  observerState.shouldConvert = isRoot;
	  var loop = function ( key ) {
	    keys.push(key);
	    var value = validateProp(key, propsOptions, propsData, vm);
	    /* istanbul ignore else */
	    if (false) {
	      var hyphenatedKey = hyphenate(key);
	      if (isReservedAttribute(hyphenatedKey) ||
	          config.isReservedAttr(hyphenatedKey)) {
	        warn(
	          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
	          vm
	        );
	      }
	      defineReactive(props, key, value, function () {
	        if (vm.$parent && !isUpdatingChildComponent) {
	          warn(
	            "Avoid mutating a prop directly since the value will be " +
	            "overwritten whenever the parent component re-renders. " +
	            "Instead, use a data or computed property based on the prop's " +
	            "value. Prop being mutated: \"" + key + "\"",
	            vm
	          );
	        }
	      });
	    } else {
	      defineReactive(props, key, value);
	    }
	    // static props are already proxied on the component's prototype
	    // during Vue.extend(). We only need to proxy props defined at
	    // instantiation here.
	    if (!(key in vm)) {
	      proxy(vm, "_props", key);
	    }
	  };
	
	  for (var key in propsOptions) loop( key );
	  observerState.shouldConvert = true;
	}
	
	function initData (vm) {
	  var data = vm.$options.data;
	  data = vm._data = typeof data === 'function'
	    ? getData(data, vm)
	    : data || {};
	  if (!isPlainObject(data)) {
	    data = {};
	    ("production") !== 'production' && warn(
	      'data functions should return an object:\n' +
	      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
	      vm
	    );
	  }
	  // proxy data on instance
	  var keys = Object.keys(data);
	  var props = vm.$options.props;
	  var methods = vm.$options.methods;
	  var i = keys.length;
	  while (i--) {
	    var key = keys[i];
	    if (false) {
	      if (methods && hasOwn(methods, key)) {
	        warn(
	          ("Method \"" + key + "\" has already been defined as a data property."),
	          vm
	        );
	      }
	    }
	    if (props && hasOwn(props, key)) {
	      ("production") !== 'production' && warn(
	        "The data property \"" + key + "\" is already declared as a prop. " +
	        "Use prop default value instead.",
	        vm
	      );
	    } else if (!isReserved(key)) {
	      proxy(vm, "_data", key);
	    }
	  }
	  // observe data
	  observe(data, true /* asRootData */);
	}
	
	function getData (data, vm) {
	  try {
	    return data.call(vm, vm)
	  } catch (e) {
	    handleError(e, vm, "data()");
	    return {}
	  }
	}
	
	var computedWatcherOptions = { lazy: true };
	
	function initComputed (vm, computed) {
	  var watchers = vm._computedWatchers = Object.create(null);
	  // computed properties are just getters during SSR
	  var isSSR = isServerRendering();
	
	  for (var key in computed) {
	    var userDef = computed[key];
	    var getter = typeof userDef === 'function' ? userDef : userDef.get;
	    if (false) {
	      warn(
	        ("Getter is missing for computed property \"" + key + "\"."),
	        vm
	      );
	    }
	
	    if (!isSSR) {
	      // create internal watcher for the computed property.
	      watchers[key] = new Watcher(
	        vm,
	        getter || noop,
	        noop,
	        computedWatcherOptions
	      );
	    }
	
	    // component-defined computed properties are already defined on the
	    // component prototype. We only need to define computed properties defined
	    // at instantiation here.
	    if (!(key in vm)) {
	      defineComputed(vm, key, userDef);
	    } else if (false) {
	      if (key in vm.$data) {
	        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
	      } else if (vm.$options.props && key in vm.$options.props) {
	        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
	      }
	    }
	  }
	}
	
	function defineComputed (
	  target,
	  key,
	  userDef
	) {
	  var shouldCache = !isServerRendering();
	  if (typeof userDef === 'function') {
	    sharedPropertyDefinition.get = shouldCache
	      ? createComputedGetter(key)
	      : userDef;
	    sharedPropertyDefinition.set = noop;
	  } else {
	    sharedPropertyDefinition.get = userDef.get
	      ? shouldCache && userDef.cache !== false
	        ? createComputedGetter(key)
	        : userDef.get
	      : noop;
	    sharedPropertyDefinition.set = userDef.set
	      ? userDef.set
	      : noop;
	  }
	  if (false) {
	    sharedPropertyDefinition.set = function () {
	      warn(
	        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
	        this
	      );
	    };
	  }
	  Object.defineProperty(target, key, sharedPropertyDefinition);
	}
	
	function createComputedGetter (key) {
	  return function computedGetter () {
	    var watcher = this._computedWatchers && this._computedWatchers[key];
	    if (watcher) {
	      if (watcher.dirty) {
	        watcher.evaluate();
	      }
	      if (Dep.target) {
	        watcher.depend();
	      }
	      return watcher.value
	    }
	  }
	}
	
	function initMethods (vm, methods) {
	  var props = vm.$options.props;
	  for (var key in methods) {
	    if (false) {
	      if (methods[key] == null) {
	        warn(
	          "Method \"" + key + "\" has an undefined value in the component definition. " +
	          "Did you reference the function correctly?",
	          vm
	        );
	      }
	      if (props && hasOwn(props, key)) {
	        warn(
	          ("Method \"" + key + "\" has already been defined as a prop."),
	          vm
	        );
	      }
	      if ((key in vm) && isReserved(key)) {
	        warn(
	          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
	          "Avoid defining component methods that start with _ or $."
	        );
	      }
	    }
	    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
	  }
	}
	
	function initWatch (vm, watch) {
	  for (var key in watch) {
	    var handler = watch[key];
	    if (Array.isArray(handler)) {
	      for (var i = 0; i < handler.length; i++) {
	        createWatcher(vm, key, handler[i]);
	      }
	    } else {
	      createWatcher(vm, key, handler);
	    }
	  }
	}
	
	function createWatcher (
	  vm,
	  keyOrFn,
	  handler,
	  options
	) {
	  if (isPlainObject(handler)) {
	    options = handler;
	    handler = handler.handler;
	  }
	  if (typeof handler === 'string') {
	    handler = vm[handler];
	  }
	  return vm.$watch(keyOrFn, handler, options)
	}
	
	function stateMixin (Vue) {
	  // flow somehow has problems with directly declared definition object
	  // when using Object.defineProperty, so we have to procedurally build up
	  // the object here.
	  var dataDef = {};
	  dataDef.get = function () { return this._data };
	  var propsDef = {};
	  propsDef.get = function () { return this._props };
	  if (false) {
	    dataDef.set = function (newData) {
	      warn(
	        'Avoid replacing instance root $data. ' +
	        'Use nested data properties instead.',
	        this
	      );
	    };
	    propsDef.set = function () {
	      warn("$props is readonly.", this);
	    };
	  }
	  Object.defineProperty(Vue.prototype, '$data', dataDef);
	  Object.defineProperty(Vue.prototype, '$props', propsDef);
	
	  Vue.prototype.$set = set;
	  Vue.prototype.$delete = del;
	
	  Vue.prototype.$watch = function (
	    expOrFn,
	    cb,
	    options
	  ) {
	    var vm = this;
	    if (isPlainObject(cb)) {
	      return createWatcher(vm, expOrFn, cb, options)
	    }
	    options = options || {};
	    options.user = true;
	    var watcher = new Watcher(vm, expOrFn, cb, options);
	    if (options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn () {
	      watcher.teardown();
	    }
	  };
	}
	
	/*  */
	
	function initProvide (vm) {
	  var provide = vm.$options.provide;
	  if (provide) {
	    vm._provided = typeof provide === 'function'
	      ? provide.call(vm)
	      : provide;
	  }
	}
	
	function initInjections (vm) {
	  var result = resolveInject(vm.$options.inject, vm);
	  if (result) {
	    observerState.shouldConvert = false;
	    Object.keys(result).forEach(function (key) {
	      /* istanbul ignore else */
	      if (false) {
	        defineReactive(vm, key, result[key], function () {
	          warn(
	            "Avoid mutating an injected value directly since the changes will be " +
	            "overwritten whenever the provided component re-renders. " +
	            "injection being mutated: \"" + key + "\"",
	            vm
	          );
	        });
	      } else {
	        defineReactive(vm, key, result[key]);
	      }
	    });
	    observerState.shouldConvert = true;
	  }
	}
	
	function resolveInject (inject, vm) {
	  if (inject) {
	    // inject is :any because flow is not smart enough to figure out cached
	    var result = Object.create(null);
	    var keys = hasSymbol
	        ? Reflect.ownKeys(inject).filter(function (key) {
	          /* istanbul ignore next */
	          return Object.getOwnPropertyDescriptor(inject, key).enumerable
	        })
	        : Object.keys(inject);
	
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var provideKey = inject[key].from;
	      var source = vm;
	      while (source) {
	        if (source._provided && provideKey in source._provided) {
	          result[key] = source._provided[provideKey];
	          break
	        }
	        source = source.$parent;
	      }
	      if (!source) {
	        if ('default' in inject[key]) {
	          var provideDefault = inject[key].default;
	          result[key] = typeof provideDefault === 'function'
	            ? provideDefault.call(vm)
	            : provideDefault;
	        } else if (false) {
	          warn(("Injection \"" + key + "\" not found"), vm);
	        }
	      }
	    }
	    return result
	  }
	}
	
	/*  */
	
	/**
	 * Runtime helper for rendering v-for lists.
	 */
	function renderList (
	  val,
	  render
	) {
	  var ret, i, l, keys, key;
	  if (Array.isArray(val) || typeof val === 'string') {
	    ret = new Array(val.length);
	    for (i = 0, l = val.length; i < l; i++) {
	      ret[i] = render(val[i], i);
	    }
	  } else if (typeof val === 'number') {
	    ret = new Array(val);
	    for (i = 0; i < val; i++) {
	      ret[i] = render(i + 1, i);
	    }
	  } else if (isObject(val)) {
	    keys = Object.keys(val);
	    ret = new Array(keys.length);
	    for (i = 0, l = keys.length; i < l; i++) {
	      key = keys[i];
	      ret[i] = render(val[key], key, i);
	    }
	  }
	  if (isDef(ret)) {
	    (ret)._isVList = true;
	  }
	  return ret
	}
	
	/*  */
	
	/**
	 * Runtime helper for rendering <slot>
	 */
	function renderSlot (
	  name,
	  fallback,
	  props,
	  bindObject
	) {
	  var scopedSlotFn = this.$scopedSlots[name];
	  if (scopedSlotFn) { // scoped slot
	    props = props || {};
	    if (bindObject) {
	      if (false) {
	        warn(
	          'slot v-bind without argument expects an Object',
	          this
	        );
	      }
	      props = extend(extend({}, bindObject), props);
	    }
	    return scopedSlotFn(props) || fallback
	  } else {
	    var slotNodes = this.$slots[name];
	    // warn duplicate slot usage
	    if (slotNodes && ("production") !== 'production') {
	      slotNodes._rendered && warn(
	        "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
	        "- this will likely cause render errors.",
	        this
	      );
	      slotNodes._rendered = true;
	    }
	    return slotNodes || fallback
	  }
	}
	
	/*  */
	
	/**
	 * Runtime helper for resolving filters
	 */
	function resolveFilter (id) {
	  return resolveAsset(this.$options, 'filters', id, true) || identity
	}
	
	/*  */
	
	/**
	 * Runtime helper for checking keyCodes from config.
	 * exposed as Vue.prototype._k
	 * passing in eventKeyName as last argument separately for backwards compat
	 */
	function checkKeyCodes (
	  eventKeyCode,
	  key,
	  builtInAlias,
	  eventKeyName
	) {
	  var keyCodes = config.keyCodes[key] || builtInAlias;
	  if (keyCodes) {
	    if (Array.isArray(keyCodes)) {
	      return keyCodes.indexOf(eventKeyCode) === -1
	    } else {
	      return keyCodes !== eventKeyCode
	    }
	  } else if (eventKeyName) {
	    return hyphenate(eventKeyName) !== key
	  }
	}
	
	/*  */
	
	/**
	 * Runtime helper for merging v-bind="object" into a VNode's data.
	 */
	function bindObjectProps (
	  data,
	  tag,
	  value,
	  asProp,
	  isSync
	) {
	  if (value) {
	    if (!isObject(value)) {
	      ("production") !== 'production' && warn(
	        'v-bind without argument expects an Object or Array value',
	        this
	      );
	    } else {
	      if (Array.isArray(value)) {
	        value = toObject(value);
	      }
	      var hash;
	      var loop = function ( key ) {
	        if (
	          key === 'class' ||
	          key === 'style' ||
	          isReservedAttribute(key)
	        ) {
	          hash = data;
	        } else {
	          var type = data.attrs && data.attrs.type;
	          hash = asProp || config.mustUseProp(tag, type, key)
	            ? data.domProps || (data.domProps = {})
	            : data.attrs || (data.attrs = {});
	        }
	        if (!(key in hash)) {
	          hash[key] = value[key];
	
	          if (isSync) {
	            var on = data.on || (data.on = {});
	            on[("update:" + key)] = function ($event) {
	              value[key] = $event;
	            };
	          }
	        }
	      };
	
	      for (var key in value) loop( key );
	    }
	  }
	  return data
	}
	
	/*  */
	
	/**
	 * Runtime helper for rendering static trees.
	 */
	function renderStatic (
	  index,
	  isInFor
	) {
	  // static trees can be rendered once and cached on the contructor options
	  // so every instance shares the same cached trees
	  var renderFns = this.$options.staticRenderFns;
	  var cached = renderFns.cached || (renderFns.cached = []);
	  var tree = cached[index];
	  // if has already-rendered static tree and not inside v-for,
	  // we can reuse the same tree by doing a shallow clone.
	  if (tree && !isInFor) {
	    return Array.isArray(tree)
	      ? cloneVNodes(tree)
	      : cloneVNode(tree)
	  }
	  // otherwise, render a fresh tree.
	  tree = cached[index] = renderFns[index].call(this._renderProxy, null, this);
	  markStatic(tree, ("__static__" + index), false);
	  return tree
	}
	
	/**
	 * Runtime helper for v-once.
	 * Effectively it means marking the node as static with a unique key.
	 */
	function markOnce (
	  tree,
	  index,
	  key
	) {
	  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
	  return tree
	}
	
	function markStatic (
	  tree,
	  key,
	  isOnce
	) {
	  if (Array.isArray(tree)) {
	    for (var i = 0; i < tree.length; i++) {
	      if (tree[i] && typeof tree[i] !== 'string') {
	        markStaticNode(tree[i], (key + "_" + i), isOnce);
	      }
	    }
	  } else {
	    markStaticNode(tree, key, isOnce);
	  }
	}
	
	function markStaticNode (node, key, isOnce) {
	  node.isStatic = true;
	  node.key = key;
	  node.isOnce = isOnce;
	}
	
	/*  */
	
	function bindObjectListeners (data, value) {
	  if (value) {
	    if (!isPlainObject(value)) {
	      ("production") !== 'production' && warn(
	        'v-on without argument expects an Object value',
	        this
	      );
	    } else {
	      var on = data.on = data.on ? extend({}, data.on) : {};
	      for (var key in value) {
	        var existing = on[key];
	        var ours = value[key];
	        on[key] = existing ? [].concat(existing, ours) : ours;
	      }
	    }
	  }
	  return data
	}
	
	/*  */
	
	function installRenderHelpers (target) {
	  target._o = markOnce;
	  target._n = toNumber;
	  target._s = toString;
	  target._l = renderList;
	  target._t = renderSlot;
	  target._q = looseEqual;
	  target._i = looseIndexOf;
	  target._m = renderStatic;
	  target._f = resolveFilter;
	  target._k = checkKeyCodes;
	  target._b = bindObjectProps;
	  target._v = createTextVNode;
	  target._e = createEmptyVNode;
	  target._u = resolveScopedSlots;
	  target._g = bindObjectListeners;
	}
	
	/*  */
	
	function FunctionalRenderContext (
	  data,
	  props,
	  children,
	  parent,
	  Ctor
	) {
	  var options = Ctor.options;
	  this.data = data;
	  this.props = props;
	  this.children = children;
	  this.parent = parent;
	  this.listeners = data.on || emptyObject;
	  this.injections = resolveInject(options.inject, parent);
	  this.slots = function () { return resolveSlots(children, parent); };
	
	  // ensure the createElement function in functional components
	  // gets a unique context - this is necessary for correct named slot check
	  var contextVm = Object.create(parent);
	  var isCompiled = isTrue(options._compiled);
	  var needNormalization = !isCompiled;
	
	  // support for compiled functional template
	  if (isCompiled) {
	    // exposing $options for renderStatic()
	    this.$options = options;
	    // pre-resolve slots for renderSlot()
	    this.$slots = this.slots();
	    this.$scopedSlots = data.scopedSlots || emptyObject;
	  }
	
	  if (options._scopeId) {
	    this._c = function (a, b, c, d) {
	      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
	      if (vnode) {
	        vnode.functionalScopeId = options._scopeId;
	        vnode.functionalContext = parent;
	      }
	      return vnode
	    };
	  } else {
	    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
	  }
	}
	
	installRenderHelpers(FunctionalRenderContext.prototype);
	
	function createFunctionalComponent (
	  Ctor,
	  propsData,
	  data,
	  contextVm,
	  children
	) {
	  var options = Ctor.options;
	  var props = {};
	  var propOptions = options.props;
	  if (isDef(propOptions)) {
	    for (var key in propOptions) {
	      props[key] = validateProp(key, propOptions, propsData || emptyObject);
	    }
	  } else {
	    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
	    if (isDef(data.props)) { mergeProps(props, data.props); }
	  }
	
	  var renderContext = new FunctionalRenderContext(
	    data,
	    props,
	    children,
	    contextVm,
	    Ctor
	  );
	
	  var vnode = options.render.call(null, renderContext._c, renderContext);
	
	  if (vnode instanceof VNode) {
	    vnode.functionalContext = contextVm;
	    vnode.functionalOptions = options;
	    if (data.slot) {
	      (vnode.data || (vnode.data = {})).slot = data.slot;
	    }
	  }
	
	  return vnode
	}
	
	function mergeProps (to, from) {
	  for (var key in from) {
	    to[camelize(key)] = from[key];
	  }
	}
	
	/*  */
	
	// hooks to be invoked on component VNodes during patch
	var componentVNodeHooks = {
	  init: function init (
	    vnode,
	    hydrating,
	    parentElm,
	    refElm
	  ) {
	    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
	      var child = vnode.componentInstance = createComponentInstanceForVnode(
	        vnode,
	        activeInstance,
	        parentElm,
	        refElm
	      );
	      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
	    } else if (vnode.data.keepAlive) {
	      // kept-alive components, treat as a patch
	      var mountedNode = vnode; // work around flow
	      componentVNodeHooks.prepatch(mountedNode, mountedNode);
	    }
	  },
	
	  prepatch: function prepatch (oldVnode, vnode) {
	    var options = vnode.componentOptions;
	    var child = vnode.componentInstance = oldVnode.componentInstance;
	    updateChildComponent(
	      child,
	      options.propsData, // updated props
	      options.listeners, // updated listeners
	      vnode, // new parent vnode
	      options.children // new children
	    );
	  },
	
	  insert: function insert (vnode) {
	    var context = vnode.context;
	    var componentInstance = vnode.componentInstance;
	    if (!componentInstance._isMounted) {
	      componentInstance._isMounted = true;
	      callHook(componentInstance, 'mounted');
	    }
	    if (vnode.data.keepAlive) {
	      if (context._isMounted) {
	        // vue-router#1212
	        // During updates, a kept-alive component's child components may
	        // change, so directly walking the tree here may call activated hooks
	        // on incorrect children. Instead we push them into a queue which will
	        // be processed after the whole patch process ended.
	        queueActivatedComponent(componentInstance);
	      } else {
	        activateChildComponent(componentInstance, true /* direct */);
	      }
	    }
	  },
	
	  destroy: function destroy (vnode) {
	    var componentInstance = vnode.componentInstance;
	    if (!componentInstance._isDestroyed) {
	      if (!vnode.data.keepAlive) {
	        componentInstance.$destroy();
	      } else {
	        deactivateChildComponent(componentInstance, true /* direct */);
	      }
	    }
	  }
	};
	
	var hooksToMerge = Object.keys(componentVNodeHooks);
	
	function createComponent (
	  Ctor,
	  data,
	  context,
	  children,
	  tag
	) {
	  if (isUndef(Ctor)) {
	    return
	  }
	
	  var baseCtor = context.$options._base;
	
	  // plain options object: turn it into a constructor
	  if (isObject(Ctor)) {
	    Ctor = baseCtor.extend(Ctor);
	  }
	
	  // if at this stage it's not a constructor or an async component factory,
	  // reject.
	  if (typeof Ctor !== 'function') {
	    if (false) {
	      warn(("Invalid Component definition: " + (String(Ctor))), context);
	    }
	    return
	  }
	
	  // async component
	  var asyncFactory;
	  if (isUndef(Ctor.cid)) {
	    asyncFactory = Ctor;
	    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
	    if (Ctor === undefined) {
	      // return a placeholder node for async component, which is rendered
	      // as a comment node but preserves all the raw information for the node.
	      // the information will be used for async server-rendering and hydration.
	      return createAsyncPlaceholder(
	        asyncFactory,
	        data,
	        context,
	        children,
	        tag
	      )
	    }
	  }
	
	  data = data || {};
	
	  // resolve constructor options in case global mixins are applied after
	  // component constructor creation
	  resolveConstructorOptions(Ctor);
	
	  // transform component v-model data into props & events
	  if (isDef(data.model)) {
	    transformModel(Ctor.options, data);
	  }
	
	  // extract props
	  var propsData = extractPropsFromVNodeData(data, Ctor, tag);
	
	  // functional component
	  if (isTrue(Ctor.options.functional)) {
	    return createFunctionalComponent(Ctor, propsData, data, context, children)
	  }
	
	  // extract listeners, since these needs to be treated as
	  // child component listeners instead of DOM listeners
	  var listeners = data.on;
	  // replace with listeners with .native modifier
	  // so it gets processed during parent component patch.
	  data.on = data.nativeOn;
	
	  if (isTrue(Ctor.options.abstract)) {
	    // abstract components do not keep anything
	    // other than props & listeners & slot
	
	    // work around flow
	    var slot = data.slot;
	    data = {};
	    if (slot) {
	      data.slot = slot;
	    }
	  }
	
	  // merge component management hooks onto the placeholder node
	  mergeHooks(data);
	
	  // return a placeholder vnode
	  var name = Ctor.options.name || tag;
	  var vnode = new VNode(
	    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
	    data, undefined, undefined, undefined, context,
	    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
	    asyncFactory
	  );
	  return vnode
	}
	
	function createComponentInstanceForVnode (
	  vnode, // we know it's MountedComponentVNode but flow doesn't
	  parent, // activeInstance in lifecycle state
	  parentElm,
	  refElm
	) {
	  var vnodeComponentOptions = vnode.componentOptions;
	  var options = {
	    _isComponent: true,
	    parent: parent,
	    propsData: vnodeComponentOptions.propsData,
	    _componentTag: vnodeComponentOptions.tag,
	    _parentVnode: vnode,
	    _parentListeners: vnodeComponentOptions.listeners,
	    _renderChildren: vnodeComponentOptions.children,
	    _parentElm: parentElm || null,
	    _refElm: refElm || null
	  };
	  // check inline-template render functions
	  var inlineTemplate = vnode.data.inlineTemplate;
	  if (isDef(inlineTemplate)) {
	    options.render = inlineTemplate.render;
	    options.staticRenderFns = inlineTemplate.staticRenderFns;
	  }
	  return new vnodeComponentOptions.Ctor(options)
	}
	
	function mergeHooks (data) {
	  if (!data.hook) {
	    data.hook = {};
	  }
	  for (var i = 0; i < hooksToMerge.length; i++) {
	    var key = hooksToMerge[i];
	    var fromParent = data.hook[key];
	    var ours = componentVNodeHooks[key];
	    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
	  }
	}
	
	function mergeHook$1 (one, two) {
	  return function (a, b, c, d) {
	    one(a, b, c, d);
	    two(a, b, c, d);
	  }
	}
	
	// transform component v-model info (value and callback) into
	// prop and event handler respectively.
	function transformModel (options, data) {
	  var prop = (options.model && options.model.prop) || 'value';
	  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
	  var on = data.on || (data.on = {});
	  if (isDef(on[event])) {
	    on[event] = [data.model.callback].concat(on[event]);
	  } else {
	    on[event] = data.model.callback;
	  }
	}
	
	/*  */
	
	var SIMPLE_NORMALIZE = 1;
	var ALWAYS_NORMALIZE = 2;
	
	// wrapper function for providing a more flexible interface
	// without getting yelled at by flow
	function createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType,
	  alwaysNormalize
	) {
	  if (Array.isArray(data) || isPrimitive(data)) {
	    normalizationType = children;
	    children = data;
	    data = undefined;
	  }
	  if (isTrue(alwaysNormalize)) {
	    normalizationType = ALWAYS_NORMALIZE;
	  }
	  return _createElement(context, tag, data, children, normalizationType)
	}
	
	function _createElement (
	  context,
	  tag,
	  data,
	  children,
	  normalizationType
	) {
	  if (isDef(data) && isDef((data).__ob__)) {
	    ("production") !== 'production' && warn(
	      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
	      'Always create fresh vnode data objects in each render!',
	      context
	    );
	    return createEmptyVNode()
	  }
	  // object syntax in v-bind
	  if (isDef(data) && isDef(data.is)) {
	    tag = data.is;
	  }
	  if (!tag) {
	    // in case of component :is set to falsy value
	    return createEmptyVNode()
	  }
	  // warn against non-primitive key
	  if (false
	  ) {
	    warn(
	      'Avoid using non-primitive value as key, ' +
	      'use string/number value instead.',
	      context
	    );
	  }
	  // support single function children as default scoped slot
	  if (Array.isArray(children) &&
	    typeof children[0] === 'function'
	  ) {
	    data = data || {};
	    data.scopedSlots = { default: children[0] };
	    children.length = 0;
	  }
	  if (normalizationType === ALWAYS_NORMALIZE) {
	    children = normalizeChildren(children);
	  } else if (normalizationType === SIMPLE_NORMALIZE) {
	    children = simpleNormalizeChildren(children);
	  }
	  var vnode, ns;
	  if (typeof tag === 'string') {
	    var Ctor;
	    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
	    if (config.isReservedTag(tag)) {
	      // platform built-in elements
	      vnode = new VNode(
	        config.parsePlatformTagName(tag), data, children,
	        undefined, undefined, context
	      );
	    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
	      // component
	      vnode = createComponent(Ctor, data, context, children, tag);
	    } else {
	      // unknown or unlisted namespaced elements
	      // check at runtime because it may get assigned a namespace when its
	      // parent normalizes children
	      vnode = new VNode(
	        tag, data, children,
	        undefined, undefined, context
	      );
	    }
	  } else {
	    // direct component options / constructor
	    vnode = createComponent(tag, data, context, children);
	  }
	  if (isDef(vnode)) {
	    if (ns) { applyNS(vnode, ns); }
	    return vnode
	  } else {
	    return createEmptyVNode()
	  }
	}
	
	function applyNS (vnode, ns, force) {
	  vnode.ns = ns;
	  if (vnode.tag === 'foreignObject') {
	    // use default namespace inside foreignObject
	    ns = undefined;
	    force = true;
	  }
	  if (isDef(vnode.children)) {
	    for (var i = 0, l = vnode.children.length; i < l; i++) {
	      var child = vnode.children[i];
	      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force))) {
	        applyNS(child, ns, force);
	      }
	    }
	  }
	}
	
	/*  */
	
	function initRender (vm) {
	  vm._vnode = null; // the root of the child tree
	  var options = vm.$options;
	  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
	  var renderContext = parentVnode && parentVnode.context;
	  vm.$slots = resolveSlots(options._renderChildren, renderContext);
	  vm.$scopedSlots = emptyObject;
	  // bind the createElement fn to this instance
	  // so that we get proper render context inside it.
	  // args order: tag, data, children, normalizationType, alwaysNormalize
	  // internal version is used by render functions compiled from templates
	  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
	  // normalization is always applied for the public version, used in
	  // user-written render functions.
	  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };
	
	  // $attrs & $listeners are exposed for easier HOC creation.
	  // they need to be reactive so that HOCs using them are always updated
	  var parentData = parentVnode && parentVnode.data;
	
	  /* istanbul ignore else */
	  if (false) {
	    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
	      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
	    }, true);
	    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
	      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
	    }, true);
	  } else {
	    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
	    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);
	  }
	}
	
	function renderMixin (Vue) {
	  // install runtime convenience helpers
	  installRenderHelpers(Vue.prototype);
	
	  Vue.prototype.$nextTick = function (fn) {
	    return nextTick(fn, this)
	  };
	
	  Vue.prototype._render = function () {
	    var vm = this;
	    var ref = vm.$options;
	    var render = ref.render;
	    var _parentVnode = ref._parentVnode;
	
	    if (vm._isMounted) {
	      // if the parent didn't update, the slot nodes will be the ones from
	      // last render. They need to be cloned to ensure "freshness" for this render.
	      for (var key in vm.$slots) {
	        var slot = vm.$slots[key];
	        if (slot._rendered) {
	          vm.$slots[key] = cloneVNodes(slot, true /* deep */);
	        }
	      }
	    }
	
	    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;
	
	    // set parent vnode. this allows render functions to have access
	    // to the data on the placeholder node.
	    vm.$vnode = _parentVnode;
	    // render self
	    var vnode;
	    try {
	      vnode = render.call(vm._renderProxy, vm.$createElement);
	    } catch (e) {
	      handleError(e, vm, "render");
	      // return error render result,
	      // or previous vnode to prevent render error causing blank component
	      /* istanbul ignore else */
	      if (false) {
	        if (vm.$options.renderError) {
	          try {
	            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
	          } catch (e) {
	            handleError(e, vm, "renderError");
	            vnode = vm._vnode;
	          }
	        } else {
	          vnode = vm._vnode;
	        }
	      } else {
	        vnode = vm._vnode;
	      }
	    }
	    // return empty vnode in case the render function errored out
	    if (!(vnode instanceof VNode)) {
	      if (false) {
	        warn(
	          'Multiple root nodes returned from render function. Render function ' +
	          'should return a single root node.',
	          vm
	        );
	      }
	      vnode = createEmptyVNode();
	    }
	    // set parent
	    vnode.parent = _parentVnode;
	    return vnode
	  };
	}
	
	/*  */
	
	var uid$1 = 0;
	
	function initMixin (Vue) {
	  Vue.prototype._init = function (options) {
	    var vm = this;
	    // a uid
	    vm._uid = uid$1++;
	
	    var startTag, endTag;
	    /* istanbul ignore if */
	    if (false) {
	      startTag = "vue-perf-start:" + (vm._uid);
	      endTag = "vue-perf-end:" + (vm._uid);
	      mark(startTag);
	    }
	
	    // a flag to avoid this being observed
	    vm._isVue = true;
	    // merge options
	    if (options && options._isComponent) {
	      // optimize internal component instantiation
	      // since dynamic options merging is pretty slow, and none of the
	      // internal component options needs special treatment.
	      initInternalComponent(vm, options);
	    } else {
	      vm.$options = mergeOptions(
	        resolveConstructorOptions(vm.constructor),
	        options || {},
	        vm
	      );
	    }
	    /* istanbul ignore else */
	    if (false) {
	      initProxy(vm);
	    } else {
	      vm._renderProxy = vm;
	    }
	    // expose real self
	    vm._self = vm;
	    initLifecycle(vm);
	    initEvents(vm);
	    initRender(vm);
	    callHook(vm, 'beforeCreate');
	    initInjections(vm); // resolve injections before data/props
	    initState(vm);
	    initProvide(vm); // resolve provide after data/props
	    callHook(vm, 'created');
	
	    /* istanbul ignore if */
	    if (false) {
	      vm._name = formatComponentName(vm, false);
	      mark(endTag);
	      measure(("vue " + (vm._name) + " init"), startTag, endTag);
	    }
	
	    if (vm.$options.el) {
	      vm.$mount(vm.$options.el);
	    }
	  };
	}
	
	function initInternalComponent (vm, options) {
	  var opts = vm.$options = Object.create(vm.constructor.options);
	  // doing this because it's faster than dynamic enumeration.
	  opts.parent = options.parent;
	  opts.propsData = options.propsData;
	  opts._parentVnode = options._parentVnode;
	  opts._parentListeners = options._parentListeners;
	  opts._renderChildren = options._renderChildren;
	  opts._componentTag = options._componentTag;
	  opts._parentElm = options._parentElm;
	  opts._refElm = options._refElm;
	  if (options.render) {
	    opts.render = options.render;
	    opts.staticRenderFns = options.staticRenderFns;
	  }
	}
	
	function resolveConstructorOptions (Ctor) {
	  var options = Ctor.options;
	  if (Ctor.super) {
	    var superOptions = resolveConstructorOptions(Ctor.super);
	    var cachedSuperOptions = Ctor.superOptions;
	    if (superOptions !== cachedSuperOptions) {
	      // super option changed,
	      // need to resolve new options.
	      Ctor.superOptions = superOptions;
	      // check if there are any late-modified/attached options (#4976)
	      var modifiedOptions = resolveModifiedOptions(Ctor);
	      // update base extend options
	      if (modifiedOptions) {
	        extend(Ctor.extendOptions, modifiedOptions);
	      }
	      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
	      if (options.name) {
	        options.components[options.name] = Ctor;
	      }
	    }
	  }
	  return options
	}
	
	function resolveModifiedOptions (Ctor) {
	  var modified;
	  var latest = Ctor.options;
	  var extended = Ctor.extendOptions;
	  var sealed = Ctor.sealedOptions;
	  for (var key in latest) {
	    if (latest[key] !== sealed[key]) {
	      if (!modified) { modified = {}; }
	      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
	    }
	  }
	  return modified
	}
	
	function dedupe (latest, extended, sealed) {
	  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
	  // between merges
	  if (Array.isArray(latest)) {
	    var res = [];
	    sealed = Array.isArray(sealed) ? sealed : [sealed];
	    extended = Array.isArray(extended) ? extended : [extended];
	    for (var i = 0; i < latest.length; i++) {
	      // push original options and not sealed options to exclude duplicated options
	      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
	        res.push(latest[i]);
	      }
	    }
	    return res
	  } else {
	    return latest
	  }
	}
	
	function Vue$3 (options) {
	  if (false
	  ) {
	    warn('Vue is a constructor and should be called with the `new` keyword');
	  }
	  this._init(options);
	}
	
	initMixin(Vue$3);
	stateMixin(Vue$3);
	eventsMixin(Vue$3);
	lifecycleMixin(Vue$3);
	renderMixin(Vue$3);
	
	/*  */
	
	function initUse (Vue) {
	  Vue.use = function (plugin) {
	    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
	    if (installedPlugins.indexOf(plugin) > -1) {
	      return this
	    }
	
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else if (typeof plugin === 'function') {
	      plugin.apply(null, args);
	    }
	    installedPlugins.push(plugin);
	    return this
	  };
	}
	
	/*  */
	
	function initMixin$1 (Vue) {
	  Vue.mixin = function (mixin) {
	    this.options = mergeOptions(this.options, mixin);
	    return this
	  };
	}
	
	/*  */
	
	function initExtend (Vue) {
	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */
	  Vue.cid = 0;
	  var cid = 1;
	
	  /**
	   * Class inheritance
	   */
	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var SuperId = Super.cid;
	    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
	    if (cachedCtors[SuperId]) {
	      return cachedCtors[SuperId]
	    }
	
	    var name = extendOptions.name || Super.options.name;
	    if (false) {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn(
	          'Invalid component name: "' + name + '". Component names ' +
	          'can only contain alphanumeric characters and the hyphen, ' +
	          'and must start with a letter.'
	        );
	      }
	    }
	
	    var Sub = function VueComponent (options) {
	      this._init(options);
	    };
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(
	      Super.options,
	      extendOptions
	    );
	    Sub['super'] = Super;
	
	    // For props and computed properties, we define the proxy getters on
	    // the Vue instances at extension time, on the extended prototype. This
	    // avoids Object.defineProperty calls for each instance created.
	    if (Sub.options.props) {
	      initProps$1(Sub);
	    }
	    if (Sub.options.computed) {
	      initComputed$1(Sub);
	    }
	
	    // allow further extension/mixin/plugin usage
	    Sub.extend = Super.extend;
	    Sub.mixin = Super.mixin;
	    Sub.use = Super.use;
	
	    // create asset registers, so extended classes
	    // can have their private assets too.
	    ASSET_TYPES.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }
	
	    // keep a reference to the super options at extension time.
	    // later at instantiation we can check if Super's options have
	    // been updated.
	    Sub.superOptions = Super.options;
	    Sub.extendOptions = extendOptions;
	    Sub.sealedOptions = extend({}, Sub.options);
	
	    // cache constructor
	    cachedCtors[SuperId] = Sub;
	    return Sub
	  };
	}
	
	function initProps$1 (Comp) {
	  var props = Comp.options.props;
	  for (var key in props) {
	    proxy(Comp.prototype, "_props", key);
	  }
	}
	
	function initComputed$1 (Comp) {
	  var computed = Comp.options.computed;
	  for (var key in computed) {
	    defineComputed(Comp.prototype, key, computed[key]);
	  }
	}
	
	/*  */
	
	function initAssetRegisters (Vue) {
	  /**
	   * Create asset registration methods.
	   */
	  ASSET_TYPES.forEach(function (type) {
	    Vue[type] = function (
	      id,
	      definition
	    ) {
	      if (!definition) {
	        return this.options[type + 's'][id]
	      } else {
	        /* istanbul ignore if */
	        if (false) {
	          if (type === 'component' && config.isReservedTag(id)) {
	            warn(
	              'Do not use built-in or reserved HTML elements as component ' +
	              'id: ' + id
	            );
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          definition.name = definition.name || id;
	          definition = this.options._base.extend(definition);
	        }
	        if (type === 'directive' && typeof definition === 'function') {
	          definition = { bind: definition, update: definition };
	        }
	        this.options[type + 's'][id] = definition;
	        return definition
	      }
	    };
	  });
	}
	
	/*  */
	
	function getComponentName (opts) {
	  return opts && (opts.Ctor.options.name || opts.tag)
	}
	
	function matches (pattern, name) {
	  if (Array.isArray(pattern)) {
	    return pattern.indexOf(name) > -1
	  } else if (typeof pattern === 'string') {
	    return pattern.split(',').indexOf(name) > -1
	  } else if (isRegExp(pattern)) {
	    return pattern.test(name)
	  }
	  /* istanbul ignore next */
	  return false
	}
	
	function pruneCache (keepAliveInstance, filter) {
	  var cache = keepAliveInstance.cache;
	  var keys = keepAliveInstance.keys;
	  var _vnode = keepAliveInstance._vnode;
	  for (var key in cache) {
	    var cachedNode = cache[key];
	    if (cachedNode) {
	      var name = getComponentName(cachedNode.componentOptions);
	      if (name && !filter(name)) {
	        pruneCacheEntry(cache, key, keys, _vnode);
	      }
	    }
	  }
	}
	
	function pruneCacheEntry (
	  cache,
	  key,
	  keys,
	  current
	) {
	  var cached$$1 = cache[key];
	  if (cached$$1 && cached$$1 !== current) {
	    cached$$1.componentInstance.$destroy();
	  }
	  cache[key] = null;
	  remove(keys, key);
	}
	
	var patternTypes = [String, RegExp, Array];
	
	var KeepAlive = {
	  name: 'keep-alive',
	  abstract: true,
	
	  props: {
	    include: patternTypes,
	    exclude: patternTypes,
	    max: [String, Number]
	  },
	
	  created: function created () {
	    this.cache = Object.create(null);
	    this.keys = [];
	  },
	
	  destroyed: function destroyed () {
	    var this$1 = this;
	
	    for (var key in this$1.cache) {
	      pruneCacheEntry(this$1.cache, key, this$1.keys);
	    }
	  },
	
	  watch: {
	    include: function include (val) {
	      pruneCache(this, function (name) { return matches(val, name); });
	    },
	    exclude: function exclude (val) {
	      pruneCache(this, function (name) { return !matches(val, name); });
	    }
	  },
	
	  render: function render () {
	    var vnode = getFirstComponentChild(this.$slots.default);
	    var componentOptions = vnode && vnode.componentOptions;
	    if (componentOptions) {
	      // check pattern
	      var name = getComponentName(componentOptions);
	      if (name && (
	        (this.include && !matches(this.include, name)) ||
	        (this.exclude && matches(this.exclude, name))
	      )) {
	        return vnode
	      }
	
	      var ref = this;
	      var cache = ref.cache;
	      var keys = ref.keys;
	      var key = vnode.key == null
	        // same constructor may get registered as different local components
	        // so cid alone is not enough (#3269)
	        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
	        : vnode.key;
	      if (cache[key]) {
	        vnode.componentInstance = cache[key].componentInstance;
	        // make current key freshest
	        remove(keys, key);
	        keys.push(key);
	      } else {
	        cache[key] = vnode;
	        keys.push(key);
	        // prune oldest entry
	        if (this.max && keys.length > parseInt(this.max)) {
	          pruneCacheEntry(cache, keys[0], keys, this._vnode);
	        }
	      }
	
	      vnode.data.keepAlive = true;
	    }
	    return vnode
	  }
	};
	
	var builtInComponents = {
	  KeepAlive: KeepAlive
	};
	
	/*  */
	
	function initGlobalAPI (Vue) {
	  // config
	  var configDef = {};
	  configDef.get = function () { return config; };
	  if (false) {
	    configDef.set = function () {
	      warn(
	        'Do not replace the Vue.config object, set individual fields instead.'
	      );
	    };
	  }
	  Object.defineProperty(Vue, 'config', configDef);
	
	  // exposed util methods.
	  // NOTE: these are not considered part of the public API - avoid relying on
	  // them unless you are aware of the risk.
	  Vue.util = {
	    warn: warn,
	    extend: extend,
	    mergeOptions: mergeOptions,
	    defineReactive: defineReactive
	  };
	
	  Vue.set = set;
	  Vue.delete = del;
	  Vue.nextTick = nextTick;
	
	  Vue.options = Object.create(null);
	  ASSET_TYPES.forEach(function (type) {
	    Vue.options[type + 's'] = Object.create(null);
	  });
	
	  // this is used to identify the "base" constructor to extend all plain-object
	  // components with in Weex's multi-instance scenarios.
	  Vue.options._base = Vue;
	
	  extend(Vue.options.components, builtInComponents);
	
	  initUse(Vue);
	  initMixin$1(Vue);
	  initExtend(Vue);
	  initAssetRegisters(Vue);
	}
	
	initGlobalAPI(Vue$3);
	
	Object.defineProperty(Vue$3.prototype, '$isServer', {
	  get: isServerRendering
	});
	
	Object.defineProperty(Vue$3.prototype, '$ssrContext', {
	  get: function get () {
	    /* istanbul ignore next */
	    return this.$vnode && this.$vnode.ssrContext
	  }
	});
	
	Vue$3.version = '2.5.2';
	
	/*  */
	
	// these are reserved for web because they are directly compiled away
	// during template compilation
	var isReservedAttr = makeMap('style,class');
	
	// attributes that should be using props for binding
	var acceptValue = makeMap('input,textarea,option,select,progress');
	var mustUseProp = function (tag, type, attr) {
	  return (
	    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
	    (attr === 'selected' && tag === 'option') ||
	    (attr === 'checked' && tag === 'input') ||
	    (attr === 'muted' && tag === 'video')
	  )
	};
	
	var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
	
	var isBooleanAttr = makeMap(
	  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
	  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
	  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
	  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
	  'required,reversed,scoped,seamless,selected,sortable,translate,' +
	  'truespeed,typemustmatch,visible'
	);
	
	var xlinkNS = 'http://www.w3.org/1999/xlink';
	
	var isXlink = function (name) {
	  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
	};
	
	var getXlinkProp = function (name) {
	  return isXlink(name) ? name.slice(6, name.length) : ''
	};
	
	var isFalsyAttrValue = function (val) {
	  return val == null || val === false
	};
	
	/*  */
	
	function genClassForVnode (vnode) {
	  var data = vnode.data;
	  var parentNode = vnode;
	  var childNode = vnode;
	  while (isDef(childNode.componentInstance)) {
	    childNode = childNode.componentInstance._vnode;
	    if (childNode.data) {
	      data = mergeClassData(childNode.data, data);
	    }
	  }
	  while (isDef(parentNode = parentNode.parent)) {
	    if (parentNode.data) {
	      data = mergeClassData(data, parentNode.data);
	    }
	  }
	  return renderClass(data.staticClass, data.class)
	}
	
	function mergeClassData (child, parent) {
	  return {
	    staticClass: concat(child.staticClass, parent.staticClass),
	    class: isDef(child.class)
	      ? [child.class, parent.class]
	      : parent.class
	  }
	}
	
	function renderClass (
	  staticClass,
	  dynamicClass
	) {
	  if (isDef(staticClass) || isDef(dynamicClass)) {
	    return concat(staticClass, stringifyClass(dynamicClass))
	  }
	  /* istanbul ignore next */
	  return ''
	}
	
	function concat (a, b) {
	  return a ? b ? (a + ' ' + b) : a : (b || '')
	}
	
	function stringifyClass (value) {
	  if (Array.isArray(value)) {
	    return stringifyArray(value)
	  }
	  if (isObject(value)) {
	    return stringifyObject(value)
	  }
	  if (typeof value === 'string') {
	    return value
	  }
	  /* istanbul ignore next */
	  return ''
	}
	
	function stringifyArray (value) {
	  var res = '';
	  var stringified;
	  for (var i = 0, l = value.length; i < l; i++) {
	    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
	      if (res) { res += ' '; }
	      res += stringified;
	    }
	  }
	  return res
	}
	
	function stringifyObject (value) {
	  var res = '';
	  for (var key in value) {
	    if (value[key]) {
	      if (res) { res += ' '; }
	      res += key;
	    }
	  }
	  return res
	}
	
	/*  */
	
	var namespaceMap = {
	  svg: 'http://www.w3.org/2000/svg',
	  math: 'http://www.w3.org/1998/Math/MathML'
	};
	
	var isHTMLTag = makeMap(
	  'html,body,base,head,link,meta,style,title,' +
	  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
	  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
	  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
	  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
	  'embed,object,param,source,canvas,script,noscript,del,ins,' +
	  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
	  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
	  'output,progress,select,textarea,' +
	  'details,dialog,menu,menuitem,summary,' +
	  'content,element,shadow,template,blockquote,iframe,tfoot'
	);
	
	// this map is intentionally selective, only covering SVG elements that may
	// contain child elements.
	var isSVG = makeMap(
	  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
	  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
	  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
	  true
	);
	
	var isPreTag = function (tag) { return tag === 'pre'; };
	
	var isReservedTag = function (tag) {
	  return isHTMLTag(tag) || isSVG(tag)
	};
	
	function getTagNamespace (tag) {
	  if (isSVG(tag)) {
	    return 'svg'
	  }
	  // basic support for MathML
	  // note it doesn't support other MathML elements being component roots
	  if (tag === 'math') {
	    return 'math'
	  }
	}
	
	var unknownElementCache = Object.create(null);
	function isUnknownElement (tag) {
	  /* istanbul ignore if */
	  if (!inBrowser) {
	    return true
	  }
	  if (isReservedTag(tag)) {
	    return false
	  }
	  tag = tag.toLowerCase();
	  /* istanbul ignore if */
	  if (unknownElementCache[tag] != null) {
	    return unknownElementCache[tag]
	  }
	  var el = document.createElement(tag);
	  if (tag.indexOf('-') > -1) {
	    // http://stackoverflow.com/a/28210364/1070244
	    return (unknownElementCache[tag] = (
	      el.constructor === window.HTMLUnknownElement ||
	      el.constructor === window.HTMLElement
	    ))
	  } else {
	    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
	  }
	}
	
	var isTextInputType = makeMap('text,number,password,search,email,tel,url');
	
	/*  */
	
	/**
	 * Query an element selector if it's not an element already.
	 */
	function query (el) {
	  if (typeof el === 'string') {
	    var selected = document.querySelector(el);
	    if (!selected) {
	      ("production") !== 'production' && warn(
	        'Cannot find element: ' + el
	      );
	      return document.createElement('div')
	    }
	    return selected
	  } else {
	    return el
	  }
	}
	
	/*  */
	
	function createElement$1 (tagName, vnode) {
	  var elm = document.createElement(tagName);
	  if (tagName !== 'select') {
	    return elm
	  }
	  // false or null will remove the attribute but undefined will not
	  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
	    elm.setAttribute('multiple', 'multiple');
	  }
	  return elm
	}
	
	function createElementNS (namespace, tagName) {
	  return document.createElementNS(namespaceMap[namespace], tagName)
	}
	
	function createTextNode (text) {
	  return document.createTextNode(text)
	}
	
	function createComment (text) {
	  return document.createComment(text)
	}
	
	function insertBefore (parentNode, newNode, referenceNode) {
	  parentNode.insertBefore(newNode, referenceNode);
	}
	
	function removeChild (node, child) {
	  node.removeChild(child);
	}
	
	function appendChild (node, child) {
	  node.appendChild(child);
	}
	
	function parentNode (node) {
	  return node.parentNode
	}
	
	function nextSibling (node) {
	  return node.nextSibling
	}
	
	function tagName (node) {
	  return node.tagName
	}
	
	function setTextContent (node, text) {
	  node.textContent = text;
	}
	
	function setAttribute (node, key, val) {
	  node.setAttribute(key, val);
	}
	
	
	var nodeOps = Object.freeze({
		createElement: createElement$1,
		createElementNS: createElementNS,
		createTextNode: createTextNode,
		createComment: createComment,
		insertBefore: insertBefore,
		removeChild: removeChild,
		appendChild: appendChild,
		parentNode: parentNode,
		nextSibling: nextSibling,
		tagName: tagName,
		setTextContent: setTextContent,
		setAttribute: setAttribute
	});
	
	/*  */
	
	var ref = {
	  create: function create (_, vnode) {
	    registerRef(vnode);
	  },
	  update: function update (oldVnode, vnode) {
	    if (oldVnode.data.ref !== vnode.data.ref) {
	      registerRef(oldVnode, true);
	      registerRef(vnode);
	    }
	  },
	  destroy: function destroy (vnode) {
	    registerRef(vnode, true);
	  }
	};
	
	function registerRef (vnode, isRemoval) {
	  var key = vnode.data.ref;
	  if (!key) { return }
	
	  var vm = vnode.context;
	  var ref = vnode.componentInstance || vnode.elm;
	  var refs = vm.$refs;
	  if (isRemoval) {
	    if (Array.isArray(refs[key])) {
	      remove(refs[key], ref);
	    } else if (refs[key] === ref) {
	      refs[key] = undefined;
	    }
	  } else {
	    if (vnode.data.refInFor) {
	      if (!Array.isArray(refs[key])) {
	        refs[key] = [ref];
	      } else if (refs[key].indexOf(ref) < 0) {
	        // $flow-disable-line
	        refs[key].push(ref);
	      }
	    } else {
	      refs[key] = ref;
	    }
	  }
	}
	
	/**
	 * Virtual DOM patching algorithm based on Snabbdom by
	 * Simon Friis Vindum (@paldepind)
	 * Licensed under the MIT License
	 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
	 *
	 * modified by Evan You (@yyx990803)
	 *
	 * Not type-checking this because this file is perf-critical and the cost
	 * of making flow understand it is not worth it.
	 */
	
	var emptyNode = new VNode('', {}, []);
	
	var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];
	
	function sameVnode (a, b) {
	  return (
	    a.key === b.key && (
	      (
	        a.tag === b.tag &&
	        a.isComment === b.isComment &&
	        isDef(a.data) === isDef(b.data) &&
	        sameInputType(a, b)
	      ) || (
	        isTrue(a.isAsyncPlaceholder) &&
	        a.asyncFactory === b.asyncFactory &&
	        isUndef(b.asyncFactory.error)
	      )
	    )
	  )
	}
	
	function sameInputType (a, b) {
	  if (a.tag !== 'input') { return true }
	  var i;
	  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
	  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
	  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
	}
	
	function createKeyToOldIdx (children, beginIdx, endIdx) {
	  var i, key;
	  var map = {};
	  for (i = beginIdx; i <= endIdx; ++i) {
	    key = children[i].key;
	    if (isDef(key)) { map[key] = i; }
	  }
	  return map
	}
	
	function createPatchFunction (backend) {
	  var i, j;
	  var cbs = {};
	
	  var modules = backend.modules;
	  var nodeOps = backend.nodeOps;
	
	  for (i = 0; i < hooks.length; ++i) {
	    cbs[hooks[i]] = [];
	    for (j = 0; j < modules.length; ++j) {
	      if (isDef(modules[j][hooks[i]])) {
	        cbs[hooks[i]].push(modules[j][hooks[i]]);
	      }
	    }
	  }
	
	  function emptyNodeAt (elm) {
	    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
	  }
	
	  function createRmCb (childElm, listeners) {
	    function remove () {
	      if (--remove.listeners === 0) {
	        removeNode(childElm);
	      }
	    }
	    remove.listeners = listeners;
	    return remove
	  }
	
	  function removeNode (el) {
	    var parent = nodeOps.parentNode(el);
	    // element may have already been removed due to v-html / v-text
	    if (isDef(parent)) {
	      nodeOps.removeChild(parent, el);
	    }
	  }
	
	  var inPre = 0;
	  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
	    vnode.isRootInsert = !nested; // for transition enter check
	    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
	      return
	    }
	
	    var data = vnode.data;
	    var children = vnode.children;
	    var tag = vnode.tag;
	    if (isDef(tag)) {
	      if (false) {
	        if (data && data.pre) {
	          inPre++;
	        }
	        if (
	          !inPre &&
	          !vnode.ns &&
	          !(
	            config.ignoredElements.length &&
	            config.ignoredElements.some(function (ignore) {
	              return isRegExp(ignore)
	                ? ignore.test(tag)
	                : ignore === tag
	            })
	          ) &&
	          config.isUnknownElement(tag)
	        ) {
	          warn(
	            'Unknown custom element: <' + tag + '> - did you ' +
	            'register the component correctly? For recursive components, ' +
	            'make sure to provide the "name" option.',
	            vnode.context
	          );
	        }
	      }
	      vnode.elm = vnode.ns
	        ? nodeOps.createElementNS(vnode.ns, tag)
	        : nodeOps.createElement(tag, vnode);
	      setScope(vnode);
	
	      /* istanbul ignore if */
	      {
	        createChildren(vnode, children, insertedVnodeQueue);
	        if (isDef(data)) {
	          invokeCreateHooks(vnode, insertedVnodeQueue);
	        }
	        insert(parentElm, vnode.elm, refElm);
	      }
	
	      if (false) {
	        inPre--;
	      }
	    } else if (isTrue(vnode.isComment)) {
	      vnode.elm = nodeOps.createComment(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    } else {
	      vnode.elm = nodeOps.createTextNode(vnode.text);
	      insert(parentElm, vnode.elm, refElm);
	    }
	  }
	
	  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i = vnode.data;
	    if (isDef(i)) {
	      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
	      if (isDef(i = i.hook) && isDef(i = i.init)) {
	        i(vnode, false /* hydrating */, parentElm, refElm);
	      }
	      // after calling the init hook, if the vnode is a child component
	      // it should've created a child instance and mounted it. the child
	      // component also has set the placeholder vnode's elm.
	      // in that case we can just return the element and be done.
	      if (isDef(vnode.componentInstance)) {
	        initComponent(vnode, insertedVnodeQueue);
	        if (isTrue(isReactivated)) {
	          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
	        }
	        return true
	      }
	    }
	  }
	
	  function initComponent (vnode, insertedVnodeQueue) {
	    if (isDef(vnode.data.pendingInsert)) {
	      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
	      vnode.data.pendingInsert = null;
	    }
	    vnode.elm = vnode.componentInstance.$el;
	    if (isPatchable(vnode)) {
	      invokeCreateHooks(vnode, insertedVnodeQueue);
	      setScope(vnode);
	    } else {
	      // empty component root.
	      // skip all element-related modules except for ref (#3455)
	      registerRef(vnode);
	      // make sure to invoke the insert hook
	      insertedVnodeQueue.push(vnode);
	    }
	  }
	
	  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	    var i;
	    // hack for #4339: a reactivated component with inner transition
	    // does not trigger because the inner node's created hooks are not called
	    // again. It's not ideal to involve module-specific logic in here but
	    // there doesn't seem to be a better way to do it.
	    var innerNode = vnode;
	    while (innerNode.componentInstance) {
	      innerNode = innerNode.componentInstance._vnode;
	      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
	        for (i = 0; i < cbs.activate.length; ++i) {
	          cbs.activate[i](emptyNode, innerNode);
	        }
	        insertedVnodeQueue.push(innerNode);
	        break
	      }
	    }
	    // unlike a newly created component,
	    // a reactivated keep-alive component doesn't insert itself
	    insert(parentElm, vnode.elm, refElm);
	  }
	
	  function insert (parent, elm, ref$$1) {
	    if (isDef(parent)) {
	      if (isDef(ref$$1)) {
	        if (ref$$1.parentNode === parent) {
	          nodeOps.insertBefore(parent, elm, ref$$1);
	        }
	      } else {
	        nodeOps.appendChild(parent, elm);
	      }
	    }
	  }
	
	  function createChildren (vnode, children, insertedVnodeQueue) {
	    if (Array.isArray(children)) {
	      for (var i = 0; i < children.length; ++i) {
	        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
	      }
	    } else if (isPrimitive(vnode.text)) {
	      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
	    }
	  }
	
	  function isPatchable (vnode) {
	    while (vnode.componentInstance) {
	      vnode = vnode.componentInstance._vnode;
	    }
	    return isDef(vnode.tag)
	  }
	
	  function invokeCreateHooks (vnode, insertedVnodeQueue) {
	    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
	      cbs.create[i$1](emptyNode, vnode);
	    }
	    i = vnode.data.hook; // Reuse variable
	    if (isDef(i)) {
	      if (isDef(i.create)) { i.create(emptyNode, vnode); }
	      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
	    }
	  }
	
	  // set scope id attribute for scoped CSS.
	  // this is implemented as a special case to avoid the overhead
	  // of going through the normal attribute patching process.
	  function setScope (vnode) {
	    var i;
	    if (isDef(i = vnode.functionalScopeId)) {
	      nodeOps.setAttribute(vnode.elm, i, '');
	    } else {
	      var ancestor = vnode;
	      while (ancestor) {
	        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
	          nodeOps.setAttribute(vnode.elm, i, '');
	        }
	        ancestor = ancestor.parent;
	      }
	    }
	    // for slot content they should also get the scopeId from the host instance.
	    if (isDef(i = activeInstance) &&
	      i !== vnode.context &&
	      i !== vnode.functionalContext &&
	      isDef(i = i.$options._scopeId)
	    ) {
	      nodeOps.setAttribute(vnode.elm, i, '');
	    }
	  }
	
	  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
	    }
	  }
	
	  function invokeDestroyHook (vnode) {
	    var i, j;
	    var data = vnode.data;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
	      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
	    }
	    if (isDef(i = vnode.children)) {
	      for (j = 0; j < vnode.children.length; ++j) {
	        invokeDestroyHook(vnode.children[j]);
	      }
	    }
	  }
	
	  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
	    for (; startIdx <= endIdx; ++startIdx) {
	      var ch = vnodes[startIdx];
	      if (isDef(ch)) {
	        if (isDef(ch.tag)) {
	          removeAndInvokeRemoveHook(ch);
	          invokeDestroyHook(ch);
	        } else { // Text node
	          removeNode(ch.elm);
	        }
	      }
	    }
	  }
	
	  function removeAndInvokeRemoveHook (vnode, rm) {
	    if (isDef(rm) || isDef(vnode.data)) {
	      var i;
	      var listeners = cbs.remove.length + 1;
	      if (isDef(rm)) {
	        // we have a recursively passed down rm callback
	        // increase the listeners count
	        rm.listeners += listeners;
	      } else {
	        // directly removing
	        rm = createRmCb(vnode.elm, listeners);
	      }
	      // recursively invoke hooks on child component root node
	      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
	        removeAndInvokeRemoveHook(i, rm);
	      }
	      for (i = 0; i < cbs.remove.length; ++i) {
	        cbs.remove[i](vnode, rm);
	      }
	      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
	        i(vnode, rm);
	      } else {
	        rm();
	      }
	    } else {
	      removeNode(vnode.elm);
	    }
	  }
	
	  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
	    var oldStartIdx = 0;
	    var newStartIdx = 0;
	    var oldEndIdx = oldCh.length - 1;
	    var oldStartVnode = oldCh[0];
	    var oldEndVnode = oldCh[oldEndIdx];
	    var newEndIdx = newCh.length - 1;
	    var newStartVnode = newCh[0];
	    var newEndVnode = newCh[newEndIdx];
	    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
	
	    // removeOnly is a special flag used only by <transition-group>
	    // to ensure removed elements stay in correct relative positions
	    // during leaving transitions
	    var canMove = !removeOnly;
	
	    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
	      if (isUndef(oldStartVnode)) {
	        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
	      } else if (isUndef(oldEndVnode)) {
	        oldEndVnode = oldCh[--oldEndIdx];
	      } else if (sameVnode(oldStartVnode, newStartVnode)) {
	        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
	        oldStartVnode = oldCh[++oldStartIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else if (sameVnode(oldEndVnode, newEndVnode)) {
	        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
	        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
	        oldStartVnode = oldCh[++oldStartIdx];
	        newEndVnode = newCh[--newEndIdx];
	      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
	        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
	        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
	        oldEndVnode = oldCh[--oldEndIdx];
	        newStartVnode = newCh[++newStartIdx];
	      } else {
	        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
	        idxInOld = isDef(newStartVnode.key)
	          ? oldKeyToIdx[newStartVnode.key]
	          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
	        if (isUndef(idxInOld)) { // New element
	          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	        } else {
	          vnodeToMove = oldCh[idxInOld];
	          /* istanbul ignore if */
	          if (false) {
	            warn(
	              'It seems there are duplicate keys that is causing an update error. ' +
	              'Make sure each v-for item has a unique key.'
	            );
	          }
	          if (sameVnode(vnodeToMove, newStartVnode)) {
	            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
	            oldCh[idxInOld] = undefined;
	            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
	          } else {
	            // same key but different element. treat as new element
	            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
	          }
	        }
	        newStartVnode = newCh[++newStartIdx];
	      }
	    }
	    if (oldStartIdx > oldEndIdx) {
	      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
	      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
	    } else if (newStartIdx > newEndIdx) {
	      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
	    }
	  }
	
	  function findIdxInOld (node, oldCh, start, end) {
	    for (var i = start; i < end; i++) {
	      var c = oldCh[i];
	      if (isDef(c) && sameVnode(node, c)) { return i }
	    }
	  }
	
	  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
	    if (oldVnode === vnode) {
	      return
	    }
	
	    var elm = vnode.elm = oldVnode.elm;
	
	    if (isTrue(oldVnode.isAsyncPlaceholder)) {
	      if (isDef(vnode.asyncFactory.resolved)) {
	        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
	      } else {
	        vnode.isAsyncPlaceholder = true;
	      }
	      return
	    }
	
	    // reuse element for static trees.
	    // note we only do this if the vnode is cloned -
	    // if the new node is not cloned it means the render functions have been
	    // reset by the hot-reload-api and we need to do a proper re-render.
	    if (isTrue(vnode.isStatic) &&
	      isTrue(oldVnode.isStatic) &&
	      vnode.key === oldVnode.key &&
	      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
	    ) {
	      vnode.componentInstance = oldVnode.componentInstance;
	      return
	    }
	
	    var i;
	    var data = vnode.data;
	    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
	      i(oldVnode, vnode);
	    }
	
	    var oldCh = oldVnode.children;
	    var ch = vnode.children;
	    if (isDef(data) && isPatchable(vnode)) {
	      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
	      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
	    }
	    if (isUndef(vnode.text)) {
	      if (isDef(oldCh) && isDef(ch)) {
	        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
	      } else if (isDef(ch)) {
	        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
	        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
	      } else if (isDef(oldCh)) {
	        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
	      } else if (isDef(oldVnode.text)) {
	        nodeOps.setTextContent(elm, '');
	      }
	    } else if (oldVnode.text !== vnode.text) {
	      nodeOps.setTextContent(elm, vnode.text);
	    }
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
	    }
	  }
	
	  function invokeInsertHook (vnode, queue, initial) {
	    // delay insert hooks for component root nodes, invoke them after the
	    // element is really inserted
	    if (isTrue(initial) && isDef(vnode.parent)) {
	      vnode.parent.data.pendingInsert = queue;
	    } else {
	      for (var i = 0; i < queue.length; ++i) {
	        queue[i].data.hook.insert(queue[i]);
	      }
	    }
	  }
	
	  var bailed = false;
	  // list of modules that can skip create hook during hydration because they
	  // are already rendered on the client or has no need for initialization
	  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');
	
	  // Note: this is a browser-only function so we can assume elms are DOM nodes.
	  function hydrate (elm, vnode, insertedVnodeQueue) {
	    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
	      vnode.elm = elm;
	      vnode.isAsyncPlaceholder = true;
	      return true
	    }
	    if (false) {
	      if (!assertNodeMatch(elm, vnode)) {
	        return false
	      }
	    }
	    vnode.elm = elm;
	    var tag = vnode.tag;
	    var data = vnode.data;
	    var children = vnode.children;
	    if (isDef(data)) {
	      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
	      if (isDef(i = vnode.componentInstance)) {
	        // child component. it should have hydrated its own tree.
	        initComponent(vnode, insertedVnodeQueue);
	        return true
	      }
	    }
	    if (isDef(tag)) {
	      if (isDef(children)) {
	        // empty element, allow client to pick up and populate children
	        if (!elm.hasChildNodes()) {
	          createChildren(vnode, children, insertedVnodeQueue);
	        } else {
	          // v-html and domProps: innerHTML
	          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
	            if (i !== elm.innerHTML) {
	              /* istanbul ignore if */
	              if (false
	              ) {
	                bailed = true;
	                console.warn('Parent: ', elm);
	                console.warn('server innerHTML: ', i);
	                console.warn('client innerHTML: ', elm.innerHTML);
	              }
	              return false
	            }
	          } else {
	            // iterate and compare children lists
	            var childrenMatch = true;
	            var childNode = elm.firstChild;
	            for (var i$1 = 0; i$1 < children.length; i$1++) {
	              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
	                childrenMatch = false;
	                break
	              }
	              childNode = childNode.nextSibling;
	            }
	            // if childNode is not null, it means the actual childNodes list is
	            // longer than the virtual children list.
	            if (!childrenMatch || childNode) {
	              /* istanbul ignore if */
	              if (false
	              ) {
	                bailed = true;
	                console.warn('Parent: ', elm);
	                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
	              }
	              return false
	            }
	          }
	        }
	      }
	      if (isDef(data)) {
	        for (var key in data) {
	          if (!isRenderedModule(key)) {
	            invokeCreateHooks(vnode, insertedVnodeQueue);
	            break
	          }
	        }
	      }
	    } else if (elm.data !== vnode.text) {
	      elm.data = vnode.text;
	    }
	    return true
	  }
	
	  function assertNodeMatch (node, vnode) {
	    if (isDef(vnode.tag)) {
	      return (
	        vnode.tag.indexOf('vue-component') === 0 ||
	        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
	      )
	    } else {
	      return node.nodeType === (vnode.isComment ? 8 : 3)
	    }
	  }
	
	  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
	    if (isUndef(vnode)) {
	      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
	      return
	    }
	
	    var isInitialPatch = false;
	    var insertedVnodeQueue = [];
	
	    if (isUndef(oldVnode)) {
	      // empty mount (likely as component), create new root element
	      isInitialPatch = true;
	      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
	    } else {
	      var isRealElement = isDef(oldVnode.nodeType);
	      if (!isRealElement && sameVnode(oldVnode, vnode)) {
	        // patch existing root node
	        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
	      } else {
	        if (isRealElement) {
	          // mounting to a real element
	          // check if this is server-rendered content and if we can perform
	          // a successful hydration.
	          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
	            oldVnode.removeAttribute(SSR_ATTR);
	            hydrating = true;
	          }
	          if (isTrue(hydrating)) {
	            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
	              invokeInsertHook(vnode, insertedVnodeQueue, true);
	              return oldVnode
	            } else if (false) {
	              warn(
	                'The client-side rendered virtual DOM tree is not matching ' +
	                'server-rendered content. This is likely caused by incorrect ' +
	                'HTML markup, for example nesting block-level elements inside ' +
	                '<p>, or missing <tbody>. Bailing hydration and performing ' +
	                'full client-side render.'
	              );
	            }
	          }
	          // either not server-rendered, or hydration failed.
	          // create an empty node and replace it
	          oldVnode = emptyNodeAt(oldVnode);
	        }
	        // replacing existing element
	        var oldElm = oldVnode.elm;
	        var parentElm$1 = nodeOps.parentNode(oldElm);
	        createElm(
	          vnode,
	          insertedVnodeQueue,
	          // extremely rare edge case: do not insert if old element is in a
	          // leaving transition. Only happens when combining transition +
	          // keep-alive + HOCs. (#4590)
	          oldElm._leaveCb ? null : parentElm$1,
	          nodeOps.nextSibling(oldElm)
	        );
	
	        if (isDef(vnode.parent)) {
	          // component root element replaced.
	          // update parent placeholder node element, recursively
	          var ancestor = vnode.parent;
	          var patchable = isPatchable(vnode);
	          while (ancestor) {
	            for (var i = 0; i < cbs.destroy.length; ++i) {
	              cbs.destroy[i](ancestor);
	            }
	            ancestor.elm = vnode.elm;
	            if (patchable) {
	              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
	                cbs.create[i$1](emptyNode, ancestor);
	              }
	              // #6513
	              // invoke insert hooks that may have been merged by create hooks.
	              // e.g. for directives that uses the "inserted" hook.
	              var insert = ancestor.data.hook.insert;
	              if (insert.merged) {
	                // start at index 1 to avoid re-invoking component mounted hook
	                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
	                  insert.fns[i$2]();
	                }
	              }
	            } else {
	              registerRef(ancestor);
	            }
	            ancestor = ancestor.parent;
	          }
	        }
	
	        if (isDef(parentElm$1)) {
	          removeVnodes(parentElm$1, [oldVnode], 0, 0);
	        } else if (isDef(oldVnode.tag)) {
	          invokeDestroyHook(oldVnode);
	        }
	      }
	    }
	
	    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
	    return vnode.elm
	  }
	}
	
	/*  */
	
	var directives = {
	  create: updateDirectives,
	  update: updateDirectives,
	  destroy: function unbindDirectives (vnode) {
	    updateDirectives(vnode, emptyNode);
	  }
	};
	
	function updateDirectives (oldVnode, vnode) {
	  if (oldVnode.data.directives || vnode.data.directives) {
	    _update(oldVnode, vnode);
	  }
	}
	
	function _update (oldVnode, vnode) {
	  var isCreate = oldVnode === emptyNode;
	  var isDestroy = vnode === emptyNode;
	  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
	  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
	
	  var dirsWithInsert = [];
	  var dirsWithPostpatch = [];
	
	  var key, oldDir, dir;
	  for (key in newDirs) {
	    oldDir = oldDirs[key];
	    dir = newDirs[key];
	    if (!oldDir) {
	      // new directive, bind
	      callHook$1(dir, 'bind', vnode, oldVnode);
	      if (dir.def && dir.def.inserted) {
	        dirsWithInsert.push(dir);
	      }
	    } else {
	      // existing directive, update
	      dir.oldValue = oldDir.value;
	      callHook$1(dir, 'update', vnode, oldVnode);
	      if (dir.def && dir.def.componentUpdated) {
	        dirsWithPostpatch.push(dir);
	      }
	    }
	  }
	
	  if (dirsWithInsert.length) {
	    var callInsert = function () {
	      for (var i = 0; i < dirsWithInsert.length; i++) {
	        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
	      }
	    };
	    if (isCreate) {
	      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
	    } else {
	      callInsert();
	    }
	  }
	
	  if (dirsWithPostpatch.length) {
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
	      for (var i = 0; i < dirsWithPostpatch.length; i++) {
	        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
	      }
	    });
	  }
	
	  if (!isCreate) {
	    for (key in oldDirs) {
	      if (!newDirs[key]) {
	        // no longer present, unbind
	        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
	      }
	    }
	  }
	}
	
	var emptyModifiers = Object.create(null);
	
	function normalizeDirectives$1 (
	  dirs,
	  vm
	) {
	  var res = Object.create(null);
	  if (!dirs) {
	    return res
	  }
	  var i, dir;
	  for (i = 0; i < dirs.length; i++) {
	    dir = dirs[i];
	    if (!dir.modifiers) {
	      dir.modifiers = emptyModifiers;
	    }
	    res[getRawDirName(dir)] = dir;
	    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
	  }
	  return res
	}
	
	function getRawDirName (dir) {
	  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
	}
	
	function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
	  var fn = dir.def && dir.def[hook];
	  if (fn) {
	    try {
	      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
	    } catch (e) {
	      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
	    }
	  }
	}
	
	var baseModules = [
	  ref,
	  directives
	];
	
	/*  */
	
	function updateAttrs (oldVnode, vnode) {
	  var opts = vnode.componentOptions;
	  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
	    return
	  }
	  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
	    return
	  }
	  var key, cur, old;
	  var elm = vnode.elm;
	  var oldAttrs = oldVnode.data.attrs || {};
	  var attrs = vnode.data.attrs || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (isDef(attrs.__ob__)) {
	    attrs = vnode.data.attrs = extend({}, attrs);
	  }
	
	  for (key in attrs) {
	    cur = attrs[key];
	    old = oldAttrs[key];
	    if (old !== cur) {
	      setAttr(elm, key, cur);
	    }
	  }
	  // #4391: in IE9, setting type can reset value for input[type=radio]
	  // #6666: IE/Edge forces progress value down to 1 before setting a max
	  /* istanbul ignore if */
	  if ((isIE9 || isEdge) && attrs.value !== oldAttrs.value) {
	    setAttr(elm, 'value', attrs.value);
	  }
	  for (key in oldAttrs) {
	    if (isUndef(attrs[key])) {
	      if (isXlink(key)) {
	        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
	      } else if (!isEnumeratedAttr(key)) {
	        elm.removeAttribute(key);
	      }
	    }
	  }
	}
	
	function setAttr (el, key, value) {
	  if (isBooleanAttr(key)) {
	    // set attribute for blank value
	    // e.g. <option disabled>Select one</option>
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      // technically allowfullscreen is a boolean attribute for <iframe>,
	      // but Flash expects a value of "true" when used on <embed> tag
	      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
	        ? 'true'
	        : key;
	      el.setAttribute(key, value);
	    }
	  } else if (isEnumeratedAttr(key)) {
	    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
	  } else if (isXlink(key)) {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
	    } else {
	      el.setAttributeNS(xlinkNS, key, value);
	    }
	  } else {
	    if (isFalsyAttrValue(value)) {
	      el.removeAttribute(key);
	    } else {
	      el.setAttribute(key, value);
	    }
	  }
	}
	
	var attrs = {
	  create: updateAttrs,
	  update: updateAttrs
	};
	
	/*  */
	
	function updateClass (oldVnode, vnode) {
	  var el = vnode.elm;
	  var data = vnode.data;
	  var oldData = oldVnode.data;
	  if (
	    isUndef(data.staticClass) &&
	    isUndef(data.class) && (
	      isUndef(oldData) || (
	        isUndef(oldData.staticClass) &&
	        isUndef(oldData.class)
	      )
	    )
	  ) {
	    return
	  }
	
	  var cls = genClassForVnode(vnode);
	
	  // handle transition classes
	  var transitionClass = el._transitionClasses;
	  if (isDef(transitionClass)) {
	    cls = concat(cls, stringifyClass(transitionClass));
	  }
	
	  // set the class
	  if (cls !== el._prevClass) {
	    el.setAttribute('class', cls);
	    el._prevClass = cls;
	  }
	}
	
	var klass = {
	  create: updateClass,
	  update: updateClass
	};
	
	/*  */
	
	var validDivisionCharRE = /[\w).+\-_$\]]/;
	
	function parseFilters (exp) {
	  var inSingle = false;
	  var inDouble = false;
	  var inTemplateString = false;
	  var inRegex = false;
	  var curly = 0;
	  var square = 0;
	  var paren = 0;
	  var lastFilterIndex = 0;
	  var c, prev, i, expression, filters;
	
	  for (i = 0; i < exp.length; i++) {
	    prev = c;
	    c = exp.charCodeAt(i);
	    if (inSingle) {
	      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
	    } else if (inDouble) {
	      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
	    } else if (inTemplateString) {
	      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
	    } else if (inRegex) {
	      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
	    } else if (
	      c === 0x7C && // pipe
	      exp.charCodeAt(i + 1) !== 0x7C &&
	      exp.charCodeAt(i - 1) !== 0x7C &&
	      !curly && !square && !paren
	    ) {
	      if (expression === undefined) {
	        // first filter, end of expression
	        lastFilterIndex = i + 1;
	        expression = exp.slice(0, i).trim();
	      } else {
	        pushFilter();
	      }
	    } else {
	      switch (c) {
	        case 0x22: inDouble = true; break         // "
	        case 0x27: inSingle = true; break         // '
	        case 0x60: inTemplateString = true; break // `
	        case 0x28: paren++; break                 // (
	        case 0x29: paren--; break                 // )
	        case 0x5B: square++; break                // [
	        case 0x5D: square--; break                // ]
	        case 0x7B: curly++; break                 // {
	        case 0x7D: curly--; break                 // }
	      }
	      if (c === 0x2f) { // /
	        var j = i - 1;
	        var p = (void 0);
	        // find first non-whitespace prev char
	        for (; j >= 0; j--) {
	          p = exp.charAt(j);
	          if (p !== ' ') { break }
	        }
	        if (!p || !validDivisionCharRE.test(p)) {
	          inRegex = true;
	        }
	      }
	    }
	  }
	
	  if (expression === undefined) {
	    expression = exp.slice(0, i).trim();
	  } else if (lastFilterIndex !== 0) {
	    pushFilter();
	  }
	
	  function pushFilter () {
	    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
	    lastFilterIndex = i + 1;
	  }
	
	  if (filters) {
	    for (i = 0; i < filters.length; i++) {
	      expression = wrapFilter(expression, filters[i]);
	    }
	  }
	
	  return expression
	}
	
	function wrapFilter (exp, filter) {
	  var i = filter.indexOf('(');
	  if (i < 0) {
	    // _f: resolveFilter
	    return ("_f(\"" + filter + "\")(" + exp + ")")
	  } else {
	    var name = filter.slice(0, i);
	    var args = filter.slice(i + 1);
	    return ("_f(\"" + name + "\")(" + exp + "," + args)
	  }
	}
	
	/*  */
	
	function baseWarn (msg) {
	  console.error(("[Vue compiler]: " + msg));
	}
	
	function pluckModuleFunction (
	  modules,
	  key
	) {
	  return modules
	    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
	    : []
	}
	
	function addProp (el, name, value) {
	  (el.props || (el.props = [])).push({ name: name, value: value });
	}
	
	function addAttr (el, name, value) {
	  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
	}
	
	function addDirective (
	  el,
	  name,
	  rawName,
	  value,
	  arg,
	  modifiers
	) {
	  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
	}
	
	function addHandler (
	  el,
	  name,
	  value,
	  modifiers,
	  important,
	  warn
	) {
	  // warn prevent and passive modifier
	  /* istanbul ignore if */
	  if (
	    false
	  ) {
	    warn(
	      'passive and prevent can\'t be used together. ' +
	      'Passive handler can\'t prevent default event.'
	    );
	  }
	  // check capture modifier
	  if (modifiers && modifiers.capture) {
	    delete modifiers.capture;
	    name = '!' + name; // mark the event as captured
	  }
	  if (modifiers && modifiers.once) {
	    delete modifiers.once;
	    name = '~' + name; // mark the event as once
	  }
	  /* istanbul ignore if */
	  if (modifiers && modifiers.passive) {
	    delete modifiers.passive;
	    name = '&' + name; // mark the event as passive
	  }
	  var events;
	  if (modifiers && modifiers.native) {
	    delete modifiers.native;
	    events = el.nativeEvents || (el.nativeEvents = {});
	  } else {
	    events = el.events || (el.events = {});
	  }
	  var newHandler = { value: value, modifiers: modifiers };
	  var handlers = events[name];
	  /* istanbul ignore if */
	  if (Array.isArray(handlers)) {
	    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
	  } else if (handlers) {
	    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
	  } else {
	    events[name] = newHandler;
	  }
	}
	
	function getBindingAttr (
	  el,
	  name,
	  getStatic
	) {
	  var dynamicValue =
	    getAndRemoveAttr(el, ':' + name) ||
	    getAndRemoveAttr(el, 'v-bind:' + name);
	  if (dynamicValue != null) {
	    return parseFilters(dynamicValue)
	  } else if (getStatic !== false) {
	    var staticValue = getAndRemoveAttr(el, name);
	    if (staticValue != null) {
	      return JSON.stringify(staticValue)
	    }
	  }
	}
	
	// note: this only removes the attr from the Array (attrsList) so that it
	// doesn't get processed by processAttrs.
	// By default it does NOT remove it from the map (attrsMap) because the map is
	// needed during codegen.
	function getAndRemoveAttr (
	  el,
	  name,
	  removeFromMap
	) {
	  var val;
	  if ((val = el.attrsMap[name]) != null) {
	    var list = el.attrsList;
	    for (var i = 0, l = list.length; i < l; i++) {
	      if (list[i].name === name) {
	        list.splice(i, 1);
	        break
	      }
	    }
	  }
	  if (removeFromMap) {
	    delete el.attrsMap[name];
	  }
	  return val
	}
	
	/*  */
	
	/**
	 * Cross-platform code generation for component v-model
	 */
	function genComponentModel (
	  el,
	  value,
	  modifiers
	) {
	  var ref = modifiers || {};
	  var number = ref.number;
	  var trim = ref.trim;
	
	  var baseValueExpression = '$$v';
	  var valueExpression = baseValueExpression;
	  if (trim) {
	    valueExpression =
	      "(typeof " + baseValueExpression + " === 'string'" +
	        "? " + baseValueExpression + ".trim()" +
	        ": " + baseValueExpression + ")";
	  }
	  if (number) {
	    valueExpression = "_n(" + valueExpression + ")";
	  }
	  var assignment = genAssignmentCode(value, valueExpression);
	
	  el.model = {
	    value: ("(" + value + ")"),
	    expression: ("\"" + value + "\""),
	    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
	  };
	}
	
	/**
	 * Cross-platform codegen helper for generating v-model value assignment code.
	 */
	function genAssignmentCode (
	  value,
	  assignment
	) {
	  var res = parseModel(value);
	  if (res.key === null) {
	    return (value + "=" + assignment)
	  } else {
	    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
	  }
	}
	
	/**
	 * Parse a v-model expression into a base path and a final key segment.
	 * Handles both dot-path and possible square brackets.
	 *
	 * Possible cases:
	 *
	 * - test
	 * - test[key]
	 * - test[test1[key]]
	 * - test["a"][key]
	 * - xxx.test[a[a].test1[key]]
	 * - test.xxx.a["asa"][test1[key]]
	 *
	 */
	
	var len;
	var str;
	var chr;
	var index$1;
	var expressionPos;
	var expressionEndPos;
	
	
	
	function parseModel (val) {
	  len = val.length;
	
	  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
	    index$1 = val.lastIndexOf('.');
	    if (index$1 > -1) {
	      return {
	        exp: val.slice(0, index$1),
	        key: '"' + val.slice(index$1 + 1) + '"'
	      }
	    } else {
	      return {
	        exp: val,
	        key: null
	      }
	    }
	  }
	
	  str = val;
	  index$1 = expressionPos = expressionEndPos = 0;
	
	  while (!eof()) {
	    chr = next();
	    /* istanbul ignore if */
	    if (isStringStart(chr)) {
	      parseString(chr);
	    } else if (chr === 0x5B) {
	      parseBracket(chr);
	    }
	  }
	
	  return {
	    exp: val.slice(0, expressionPos),
	    key: val.slice(expressionPos + 1, expressionEndPos)
	  }
	}
	
	function next () {
	  return str.charCodeAt(++index$1)
	}
	
	function eof () {
	  return index$1 >= len
	}
	
	function isStringStart (chr) {
	  return chr === 0x22 || chr === 0x27
	}
	
	function parseBracket (chr) {
	  var inBracket = 1;
	  expressionPos = index$1;
	  while (!eof()) {
	    chr = next();
	    if (isStringStart(chr)) {
	      parseString(chr);
	      continue
	    }
	    if (chr === 0x5B) { inBracket++; }
	    if (chr === 0x5D) { inBracket--; }
	    if (inBracket === 0) {
	      expressionEndPos = index$1;
	      break
	    }
	  }
	}
	
	function parseString (chr) {
	  var stringQuote = chr;
	  while (!eof()) {
	    chr = next();
	    if (chr === stringQuote) {
	      break
	    }
	  }
	}
	
	/*  */
	
	var warn$1;
	
	// in some cases, the event used has to be determined at runtime
	// so we used some reserved tokens during compile.
	var RANGE_TOKEN = '__r';
	var CHECKBOX_RADIO_TOKEN = '__c';
	
	function model (
	  el,
	  dir,
	  _warn
	) {
	  warn$1 = _warn;
	  var value = dir.value;
	  var modifiers = dir.modifiers;
	  var tag = el.tag;
	  var type = el.attrsMap.type;
	
	  if (false) {
	    // inputs with type="file" are read only and setting the input's
	    // value will throw an error.
	    if (tag === 'input' && type === 'file') {
	      warn$1(
	        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
	        "File inputs are read only. Use a v-on:change listener instead."
	      );
	    }
	  }
	
	  if (el.component) {
	    genComponentModel(el, value, modifiers);
	    // component v-model doesn't need extra runtime
	    return false
	  } else if (tag === 'select') {
	    genSelect(el, value, modifiers);
	  } else if (tag === 'input' && type === 'checkbox') {
	    genCheckboxModel(el, value, modifiers);
	  } else if (tag === 'input' && type === 'radio') {
	    genRadioModel(el, value, modifiers);
	  } else if (tag === 'input' || tag === 'textarea') {
	    genDefaultModel(el, value, modifiers);
	  } else if (!config.isReservedTag(tag)) {
	    genComponentModel(el, value, modifiers);
	    // component v-model doesn't need extra runtime
	    return false
	  } else if (false) {
	    warn$1(
	      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
	      "v-model is not supported on this element type. " +
	      'If you are working with contenteditable, it\'s recommended to ' +
	      'wrap a library dedicated for that purpose inside a custom component.'
	    );
	  }
	
	  // ensure runtime directive metadata
	  return true
	}
	
	function genCheckboxModel (
	  el,
	  value,
	  modifiers
	) {
	  var number = modifiers && modifiers.number;
	  var valueBinding = getBindingAttr(el, 'value') || 'null';
	  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
	  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
	  addProp(el, 'checked',
	    "Array.isArray(" + value + ")" +
	      "?_i(" + value + "," + valueBinding + ")>-1" + (
	        trueValueBinding === 'true'
	          ? (":(" + value + ")")
	          : (":_q(" + value + "," + trueValueBinding + ")")
	      )
	  );
	  addHandler(el, 'change',
	    "var $$a=" + value + "," +
	        '$$el=$event.target,' +
	        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
	    'if(Array.isArray($$a)){' +
	      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
	          '$$i=_i($$a,$$v);' +
	      "if($$el.checked){$$i<0&&(" + value + "=$$a.concat([$$v]))}" +
	      "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" +
	    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
	    null, true
	  );
	}
	
	function genRadioModel (
	    el,
	    value,
	    modifiers
	) {
	  var number = modifiers && modifiers.number;
	  var valueBinding = getBindingAttr(el, 'value') || 'null';
	  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
	  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
	  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
	}
	
	function genSelect (
	    el,
	    value,
	    modifiers
	) {
	  var number = modifiers && modifiers.number;
	  var selectedVal = "Array.prototype.filter" +
	    ".call($event.target.options,function(o){return o.selected})" +
	    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
	    "return " + (number ? '_n(val)' : 'val') + "})";
	
	  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
	  var code = "var $$selectedVal = " + selectedVal + ";";
	  code = code + " " + (genAssignmentCode(value, assignment));
	  addHandler(el, 'change', code, null, true);
	}
	
	function genDefaultModel (
	  el,
	  value,
	  modifiers
	) {
	  var type = el.attrsMap.type;
	  var ref = modifiers || {};
	  var lazy = ref.lazy;
	  var number = ref.number;
	  var trim = ref.trim;
	  var needCompositionGuard = !lazy && type !== 'range';
	  var event = lazy
	    ? 'change'
	    : type === 'range'
	      ? RANGE_TOKEN
	      : 'input';
	
	  var valueExpression = '$event.target.value';
	  if (trim) {
	    valueExpression = "$event.target.value.trim()";
	  }
	  if (number) {
	    valueExpression = "_n(" + valueExpression + ")";
	  }
	
	  var code = genAssignmentCode(value, valueExpression);
	  if (needCompositionGuard) {
	    code = "if($event.target.composing)return;" + code;
	  }
	
	  addProp(el, 'value', ("(" + value + ")"));
	  addHandler(el, event, code, null, true);
	  if (trim || number) {
	    addHandler(el, 'blur', '$forceUpdate()');
	  }
	}
	
	/*  */
	
	// normalize v-model event tokens that can only be determined at runtime.
	// it's important to place the event as the first in the array because
	// the whole point is ensuring the v-model callback gets called before
	// user-attached handlers.
	function normalizeEvents (on) {
	  /* istanbul ignore if */
	  if (isDef(on[RANGE_TOKEN])) {
	    // IE input[type=range] only supports `change` event
	    var event = isIE ? 'change' : 'input';
	    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
	    delete on[RANGE_TOKEN];
	  }
	  // This was originally intended to fix #4521 but no longer necessary
	  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
	  /* istanbul ignore if */
	  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
	    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
	    delete on[CHECKBOX_RADIO_TOKEN];
	  }
	}
	
	var target$1;
	
	function createOnceHandler (handler, event, capture) {
	  var _target = target$1; // save current target element in closure
	  return function onceHandler () {
	    var res = handler.apply(null, arguments);
	    if (res !== null) {
	      remove$2(event, onceHandler, capture, _target);
	    }
	  }
	}
	
	function add$1 (
	  event,
	  handler,
	  once$$1,
	  capture,
	  passive
	) {
	  handler = withMacroTask(handler);
	  if (once$$1) { handler = createOnceHandler(handler, event, capture); }
	  target$1.addEventListener(
	    event,
	    handler,
	    supportsPassive
	      ? { capture: capture, passive: passive }
	      : capture
	  );
	}
	
	function remove$2 (
	  event,
	  handler,
	  capture,
	  _target
	) {
	  (_target || target$1).removeEventListener(
	    event,
	    handler._withTask || handler,
	    capture
	  );
	}
	
	function updateDOMListeners (oldVnode, vnode) {
	  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
	    return
	  }
	  var on = vnode.data.on || {};
	  var oldOn = oldVnode.data.on || {};
	  target$1 = vnode.elm;
	  normalizeEvents(on);
	  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
	}
	
	var events = {
	  create: updateDOMListeners,
	  update: updateDOMListeners
	};
	
	/*  */
	
	function updateDOMProps (oldVnode, vnode) {
	  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
	    return
	  }
	  var key, cur;
	  var elm = vnode.elm;
	  var oldProps = oldVnode.data.domProps || {};
	  var props = vnode.data.domProps || {};
	  // clone observed objects, as the user probably wants to mutate it
	  if (isDef(props.__ob__)) {
	    props = vnode.data.domProps = extend({}, props);
	  }
	
	  for (key in oldProps) {
	    if (isUndef(props[key])) {
	      elm[key] = '';
	    }
	  }
	  for (key in props) {
	    cur = props[key];
	    // ignore children if the node has textContent or innerHTML,
	    // as these will throw away existing DOM nodes and cause removal errors
	    // on subsequent patches (#3360)
	    if (key === 'textContent' || key === 'innerHTML') {
	      if (vnode.children) { vnode.children.length = 0; }
	      if (cur === oldProps[key]) { continue }
	      // #6601 work around Chrome version <= 55 bug where single textNode
	      // replaced by innerHTML/textContent retains its parentNode property
	      if (elm.childNodes.length === 1) {
	        elm.removeChild(elm.childNodes[0]);
	      }
	    }
	
	    if (key === 'value') {
	      // store value as _value as well since
	      // non-string values will be stringified
	      elm._value = cur;
	      // avoid resetting cursor position when value is the same
	      var strCur = isUndef(cur) ? '' : String(cur);
	      if (shouldUpdateValue(elm, strCur)) {
	        elm.value = strCur;
	      }
	    } else {
	      elm[key] = cur;
	    }
	  }
	}
	
	// check platforms/web/util/attrs.js acceptValue
	
	
	function shouldUpdateValue (elm, checkVal) {
	  return (!elm.composing && (
	    elm.tagName === 'OPTION' ||
	    isDirty(elm, checkVal) ||
	    isInputChanged(elm, checkVal)
	  ))
	}
	
	function isDirty (elm, checkVal) {
	  // return true when textbox (.number and .trim) loses focus and its value is
	  // not equal to the updated value
	  var notInFocus = true;
	  // #6157
	  // work around IE bug when accessing document.activeElement in an iframe
	  try { notInFocus = document.activeElement !== elm; } catch (e) {}
	  return notInFocus && elm.value !== checkVal
	}
	
	function isInputChanged (elm, newVal) {
	  var value = elm.value;
	  var modifiers = elm._vModifiers; // injected by v-model runtime
	  if (isDef(modifiers) && modifiers.number) {
	    return toNumber(value) !== toNumber(newVal)
	  }
	  if (isDef(modifiers) && modifiers.trim) {
	    return value.trim() !== newVal.trim()
	  }
	  return value !== newVal
	}
	
	var domProps = {
	  create: updateDOMProps,
	  update: updateDOMProps
	};
	
	/*  */
	
	var parseStyleText = cached(function (cssText) {
	  var res = {};
	  var listDelimiter = /;(?![^(]*\))/g;
	  var propertyDelimiter = /:(.+)/;
	  cssText.split(listDelimiter).forEach(function (item) {
	    if (item) {
	      var tmp = item.split(propertyDelimiter);
	      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
	    }
	  });
	  return res
	});
	
	// merge static and dynamic style data on the same vnode
	function normalizeStyleData (data) {
	  var style = normalizeStyleBinding(data.style);
	  // static style is pre-processed into an object during compilation
	  // and is always a fresh object, so it's safe to merge into it
	  return data.staticStyle
	    ? extend(data.staticStyle, style)
	    : style
	}
	
	// normalize possible array / string values into Object
	function normalizeStyleBinding (bindingStyle) {
	  if (Array.isArray(bindingStyle)) {
	    return toObject(bindingStyle)
	  }
	  if (typeof bindingStyle === 'string') {
	    return parseStyleText(bindingStyle)
	  }
	  return bindingStyle
	}
	
	/**
	 * parent component style should be after child's
	 * so that parent component's style could override it
	 */
	function getStyle (vnode, checkChild) {
	  var res = {};
	  var styleData;
	
	  if (checkChild) {
	    var childNode = vnode;
	    while (childNode.componentInstance) {
	      childNode = childNode.componentInstance._vnode;
	      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
	        extend(res, styleData);
	      }
	    }
	  }
	
	  if ((styleData = normalizeStyleData(vnode.data))) {
	    extend(res, styleData);
	  }
	
	  var parentNode = vnode;
	  while ((parentNode = parentNode.parent)) {
	    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
	      extend(res, styleData);
	    }
	  }
	  return res
	}
	
	/*  */
	
	var cssVarRE = /^--/;
	var importantRE = /\s*!important$/;
	var setProp = function (el, name, val) {
	  /* istanbul ignore if */
	  if (cssVarRE.test(name)) {
	    el.style.setProperty(name, val);
	  } else if (importantRE.test(val)) {
	    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
	  } else {
	    var normalizedName = normalize(name);
	    if (Array.isArray(val)) {
	      // Support values array created by autoprefixer, e.g.
	      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
	      // Set them one by one, and the browser will only set those it can recognize
	      for (var i = 0, len = val.length; i < len; i++) {
	        el.style[normalizedName] = val[i];
	      }
	    } else {
	      el.style[normalizedName] = val;
	    }
	  }
	};
	
	var vendorNames = ['Webkit', 'Moz', 'ms'];
	
	var emptyStyle;
	var normalize = cached(function (prop) {
	  emptyStyle = emptyStyle || document.createElement('div').style;
	  prop = camelize(prop);
	  if (prop !== 'filter' && (prop in emptyStyle)) {
	    return prop
	  }
	  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
	  for (var i = 0; i < vendorNames.length; i++) {
	    var name = vendorNames[i] + capName;
	    if (name in emptyStyle) {
	      return name
	    }
	  }
	});
	
	function updateStyle (oldVnode, vnode) {
	  var data = vnode.data;
	  var oldData = oldVnode.data;
	
	  if (isUndef(data.staticStyle) && isUndef(data.style) &&
	    isUndef(oldData.staticStyle) && isUndef(oldData.style)
	  ) {
	    return
	  }
	
	  var cur, name;
	  var el = vnode.elm;
	  var oldStaticStyle = oldData.staticStyle;
	  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
	
	  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
	  var oldStyle = oldStaticStyle || oldStyleBinding;
	
	  var style = normalizeStyleBinding(vnode.data.style) || {};
	
	  // store normalized style under a different key for next diff
	  // make sure to clone it if it's reactive, since the user likely wants
	  // to mutate it.
	  vnode.data.normalizedStyle = isDef(style.__ob__)
	    ? extend({}, style)
	    : style;
	
	  var newStyle = getStyle(vnode, true);
	
	  for (name in oldStyle) {
	    if (isUndef(newStyle[name])) {
	      setProp(el, name, '');
	    }
	  }
	  for (name in newStyle) {
	    cur = newStyle[name];
	    if (cur !== oldStyle[name]) {
	      // ie9 setting to null has no effect, must use empty string
	      setProp(el, name, cur == null ? '' : cur);
	    }
	  }
	}
	
	var style = {
	  create: updateStyle,
	  update: updateStyle
	};
	
	/*  */
	
	/**
	 * Add class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function addClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !(cls = cls.trim())) {
	    return
	  }
	
	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
	    } else {
	      el.classList.add(cls);
	    }
	  } else {
	    var cur = " " + (el.getAttribute('class') || '') + " ";
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      el.setAttribute('class', (cur + cls).trim());
	    }
	  }
	}
	
	/**
	 * Remove class with compatibility for SVG since classList is not supported on
	 * SVG elements in IE
	 */
	function removeClass (el, cls) {
	  /* istanbul ignore if */
	  if (!cls || !(cls = cls.trim())) {
	    return
	  }
	
	  /* istanbul ignore else */
	  if (el.classList) {
	    if (cls.indexOf(' ') > -1) {
	      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
	    } else {
	      el.classList.remove(cls);
	    }
	    if (!el.classList.length) {
	      el.removeAttribute('class');
	    }
	  } else {
	    var cur = " " + (el.getAttribute('class') || '') + " ";
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    cur = cur.trim();
	    if (cur) {
	      el.setAttribute('class', cur);
	    } else {
	      el.removeAttribute('class');
	    }
	  }
	}
	
	/*  */
	
	function resolveTransition (def) {
	  if (!def) {
	    return
	  }
	  /* istanbul ignore else */
	  if (typeof def === 'object') {
	    var res = {};
	    if (def.css !== false) {
	      extend(res, autoCssTransition(def.name || 'v'));
	    }
	    extend(res, def);
	    return res
	  } else if (typeof def === 'string') {
	    return autoCssTransition(def)
	  }
	}
	
	var autoCssTransition = cached(function (name) {
	  return {
	    enterClass: (name + "-enter"),
	    enterToClass: (name + "-enter-to"),
	    enterActiveClass: (name + "-enter-active"),
	    leaveClass: (name + "-leave"),
	    leaveToClass: (name + "-leave-to"),
	    leaveActiveClass: (name + "-leave-active")
	  }
	});
	
	var hasTransition = inBrowser && !isIE9;
	var TRANSITION = 'transition';
	var ANIMATION = 'animation';
	
	// Transition property/event sniffing
	var transitionProp = 'transition';
	var transitionEndEvent = 'transitionend';
	var animationProp = 'animation';
	var animationEndEvent = 'animationend';
	if (hasTransition) {
	  /* istanbul ignore if */
	  if (window.ontransitionend === undefined &&
	    window.onwebkittransitionend !== undefined
	  ) {
	    transitionProp = 'WebkitTransition';
	    transitionEndEvent = 'webkitTransitionEnd';
	  }
	  if (window.onanimationend === undefined &&
	    window.onwebkitanimationend !== undefined
	  ) {
	    animationProp = 'WebkitAnimation';
	    animationEndEvent = 'webkitAnimationEnd';
	  }
	}
	
	// binding to window is necessary to make hot reload work in IE in strict mode
	var raf = inBrowser
	  ? window.requestAnimationFrame
	    ? window.requestAnimationFrame.bind(window)
	    : setTimeout
	  : /* istanbul ignore next */ function (fn) { return fn(); };
	
	function nextFrame (fn) {
	  raf(function () {
	    raf(fn);
	  });
	}
	
	function addTransitionClass (el, cls) {
	  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
	  if (transitionClasses.indexOf(cls) < 0) {
	    transitionClasses.push(cls);
	    addClass(el, cls);
	  }
	}
	
	function removeTransitionClass (el, cls) {
	  if (el._transitionClasses) {
	    remove(el._transitionClasses, cls);
	  }
	  removeClass(el, cls);
	}
	
	function whenTransitionEnds (
	  el,
	  expectedType,
	  cb
	) {
	  var ref = getTransitionInfo(el, expectedType);
	  var type = ref.type;
	  var timeout = ref.timeout;
	  var propCount = ref.propCount;
	  if (!type) { return cb() }
	  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
	  var ended = 0;
	  var end = function () {
	    el.removeEventListener(event, onEnd);
	    cb();
	  };
	  var onEnd = function (e) {
	    if (e.target === el) {
	      if (++ended >= propCount) {
	        end();
	      }
	    }
	  };
	  setTimeout(function () {
	    if (ended < propCount) {
	      end();
	    }
	  }, timeout + 1);
	  el.addEventListener(event, onEnd);
	}
	
	var transformRE = /\b(transform|all)(,|$)/;
	
	function getTransitionInfo (el, expectedType) {
	  var styles = window.getComputedStyle(el);
	  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
	  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
	  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
	  var animationDelays = styles[animationProp + 'Delay'].split(', ');
	  var animationDurations = styles[animationProp + 'Duration'].split(', ');
	  var animationTimeout = getTimeout(animationDelays, animationDurations);
	
	  var type;
	  var timeout = 0;
	  var propCount = 0;
	  /* istanbul ignore if */
	  if (expectedType === TRANSITION) {
	    if (transitionTimeout > 0) {
	      type = TRANSITION;
	      timeout = transitionTimeout;
	      propCount = transitionDurations.length;
	    }
	  } else if (expectedType === ANIMATION) {
	    if (animationTimeout > 0) {
	      type = ANIMATION;
	      timeout = animationTimeout;
	      propCount = animationDurations.length;
	    }
	  } else {
	    timeout = Math.max(transitionTimeout, animationTimeout);
	    type = timeout > 0
	      ? transitionTimeout > animationTimeout
	        ? TRANSITION
	        : ANIMATION
	      : null;
	    propCount = type
	      ? type === TRANSITION
	        ? transitionDurations.length
	        : animationDurations.length
	      : 0;
	  }
	  var hasTransform =
	    type === TRANSITION &&
	    transformRE.test(styles[transitionProp + 'Property']);
	  return {
	    type: type,
	    timeout: timeout,
	    propCount: propCount,
	    hasTransform: hasTransform
	  }
	}
	
	function getTimeout (delays, durations) {
	  /* istanbul ignore next */
	  while (delays.length < durations.length) {
	    delays = delays.concat(delays);
	  }
	
	  return Math.max.apply(null, durations.map(function (d, i) {
	    return toMs(d) + toMs(delays[i])
	  }))
	}
	
	function toMs (s) {
	  return Number(s.slice(0, -1)) * 1000
	}
	
	/*  */
	
	function enter (vnode, toggleDisplay) {
	  var el = vnode.elm;
	
	  // call leave callback now
	  if (isDef(el._leaveCb)) {
	    el._leaveCb.cancelled = true;
	    el._leaveCb();
	  }
	
	  var data = resolveTransition(vnode.data.transition);
	  if (isUndef(data)) {
	    return
	  }
	
	  /* istanbul ignore if */
	  if (isDef(el._enterCb) || el.nodeType !== 1) {
	    return
	  }
	
	  var css = data.css;
	  var type = data.type;
	  var enterClass = data.enterClass;
	  var enterToClass = data.enterToClass;
	  var enterActiveClass = data.enterActiveClass;
	  var appearClass = data.appearClass;
	  var appearToClass = data.appearToClass;
	  var appearActiveClass = data.appearActiveClass;
	  var beforeEnter = data.beforeEnter;
	  var enter = data.enter;
	  var afterEnter = data.afterEnter;
	  var enterCancelled = data.enterCancelled;
	  var beforeAppear = data.beforeAppear;
	  var appear = data.appear;
	  var afterAppear = data.afterAppear;
	  var appearCancelled = data.appearCancelled;
	  var duration = data.duration;
	
	  // activeInstance will always be the <transition> component managing this
	  // transition. One edge case to check is when the <transition> is placed
	  // as the root node of a child component. In that case we need to check
	  // <transition>'s parent for appear check.
	  var context = activeInstance;
	  var transitionNode = activeInstance.$vnode;
	  while (transitionNode && transitionNode.parent) {
	    transitionNode = transitionNode.parent;
	    context = transitionNode.context;
	  }
	
	  var isAppear = !context._isMounted || !vnode.isRootInsert;
	
	  if (isAppear && !appear && appear !== '') {
	    return
	  }
	
	  var startClass = isAppear && appearClass
	    ? appearClass
	    : enterClass;
	  var activeClass = isAppear && appearActiveClass
	    ? appearActiveClass
	    : enterActiveClass;
	  var toClass = isAppear && appearToClass
	    ? appearToClass
	    : enterToClass;
	
	  var beforeEnterHook = isAppear
	    ? (beforeAppear || beforeEnter)
	    : beforeEnter;
	  var enterHook = isAppear
	    ? (typeof appear === 'function' ? appear : enter)
	    : enter;
	  var afterEnterHook = isAppear
	    ? (afterAppear || afterEnter)
	    : afterEnter;
	  var enterCancelledHook = isAppear
	    ? (appearCancelled || enterCancelled)
	    : enterCancelled;
	
	  var explicitEnterDuration = toNumber(
	    isObject(duration)
	      ? duration.enter
	      : duration
	  );
	
	  if (false) {
	    checkDuration(explicitEnterDuration, 'enter', vnode);
	  }
	
	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl = getHookArgumentsLength(enterHook);
	
	  var cb = el._enterCb = once(function () {
	    if (expectsCSS) {
	      removeTransitionClass(el, toClass);
	      removeTransitionClass(el, activeClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, startClass);
	      }
	      enterCancelledHook && enterCancelledHook(el);
	    } else {
	      afterEnterHook && afterEnterHook(el);
	    }
	    el._enterCb = null;
	  });
	
	  if (!vnode.data.show) {
	    // remove pending leave element on enter by injecting an insert hook
	    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
	      var parent = el.parentNode;
	      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
	      if (pendingNode &&
	        pendingNode.tag === vnode.tag &&
	        pendingNode.elm._leaveCb
	      ) {
	        pendingNode.elm._leaveCb();
	      }
	      enterHook && enterHook(el, cb);
	    });
	  }
	
	  // start enter transition
	  beforeEnterHook && beforeEnterHook(el);
	  if (expectsCSS) {
	    addTransitionClass(el, startClass);
	    addTransitionClass(el, activeClass);
	    nextFrame(function () {
	      addTransitionClass(el, toClass);
	      removeTransitionClass(el, startClass);
	      if (!cb.cancelled && !userWantsControl) {
	        if (isValidDuration(explicitEnterDuration)) {
	          setTimeout(cb, explicitEnterDuration);
	        } else {
	          whenTransitionEnds(el, type, cb);
	        }
	      }
	    });
	  }
	
	  if (vnode.data.show) {
	    toggleDisplay && toggleDisplay();
	    enterHook && enterHook(el, cb);
	  }
	
	  if (!expectsCSS && !userWantsControl) {
	    cb();
	  }
	}
	
	function leave (vnode, rm) {
	  var el = vnode.elm;
	
	  // call enter callback now
	  if (isDef(el._enterCb)) {
	    el._enterCb.cancelled = true;
	    el._enterCb();
	  }
	
	  var data = resolveTransition(vnode.data.transition);
	  if (isUndef(data)) {
	    return rm()
	  }
	
	  /* istanbul ignore if */
	  if (isDef(el._leaveCb) || el.nodeType !== 1) {
	    return
	  }
	
	  var css = data.css;
	  var type = data.type;
	  var leaveClass = data.leaveClass;
	  var leaveToClass = data.leaveToClass;
	  var leaveActiveClass = data.leaveActiveClass;
	  var beforeLeave = data.beforeLeave;
	  var leave = data.leave;
	  var afterLeave = data.afterLeave;
	  var leaveCancelled = data.leaveCancelled;
	  var delayLeave = data.delayLeave;
	  var duration = data.duration;
	
	  var expectsCSS = css !== false && !isIE9;
	  var userWantsControl = getHookArgumentsLength(leave);
	
	  var explicitLeaveDuration = toNumber(
	    isObject(duration)
	      ? duration.leave
	      : duration
	  );
	
	  if (false) {
	    checkDuration(explicitLeaveDuration, 'leave', vnode);
	  }
	
	  var cb = el._leaveCb = once(function () {
	    if (el.parentNode && el.parentNode._pending) {
	      el.parentNode._pending[vnode.key] = null;
	    }
	    if (expectsCSS) {
	      removeTransitionClass(el, leaveToClass);
	      removeTransitionClass(el, leaveActiveClass);
	    }
	    if (cb.cancelled) {
	      if (expectsCSS) {
	        removeTransitionClass(el, leaveClass);
	      }
	      leaveCancelled && leaveCancelled(el);
	    } else {
	      rm();
	      afterLeave && afterLeave(el);
	    }
	    el._leaveCb = null;
	  });
	
	  if (delayLeave) {
	    delayLeave(performLeave);
	  } else {
	    performLeave();
	  }
	
	  function performLeave () {
	    // the delayed leave may have already been cancelled
	    if (cb.cancelled) {
	      return
	    }
	    // record leaving element
	    if (!vnode.data.show) {
	      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
	    }
	    beforeLeave && beforeLeave(el);
	    if (expectsCSS) {
	      addTransitionClass(el, leaveClass);
	      addTransitionClass(el, leaveActiveClass);
	      nextFrame(function () {
	        addTransitionClass(el, leaveToClass);
	        removeTransitionClass(el, leaveClass);
	        if (!cb.cancelled && !userWantsControl) {
	          if (isValidDuration(explicitLeaveDuration)) {
	            setTimeout(cb, explicitLeaveDuration);
	          } else {
	            whenTransitionEnds(el, type, cb);
	          }
	        }
	      });
	    }
	    leave && leave(el, cb);
	    if (!expectsCSS && !userWantsControl) {
	      cb();
	    }
	  }
	}
	
	// only used in dev mode
	function checkDuration (val, name, vnode) {
	  if (typeof val !== 'number') {
	    warn(
	      "<transition> explicit " + name + " duration is not a valid number - " +
	      "got " + (JSON.stringify(val)) + ".",
	      vnode.context
	    );
	  } else if (isNaN(val)) {
	    warn(
	      "<transition> explicit " + name + " duration is NaN - " +
	      'the duration expression might be incorrect.',
	      vnode.context
	    );
	  }
	}
	
	function isValidDuration (val) {
	  return typeof val === 'number' && !isNaN(val)
	}
	
	/**
	 * Normalize a transition hook's argument length. The hook may be:
	 * - a merged hook (invoker) with the original in .fns
	 * - a wrapped component method (check ._length)
	 * - a plain function (.length)
	 */
	function getHookArgumentsLength (fn) {
	  if (isUndef(fn)) {
	    return false
	  }
	  var invokerFns = fn.fns;
	  if (isDef(invokerFns)) {
	    // invoker
	    return getHookArgumentsLength(
	      Array.isArray(invokerFns)
	        ? invokerFns[0]
	        : invokerFns
	    )
	  } else {
	    return (fn._length || fn.length) > 1
	  }
	}
	
	function _enter (_, vnode) {
	  if (vnode.data.show !== true) {
	    enter(vnode);
	  }
	}
	
	var transition = inBrowser ? {
	  create: _enter,
	  activate: _enter,
	  remove: function remove$$1 (vnode, rm) {
	    /* istanbul ignore else */
	    if (vnode.data.show !== true) {
	      leave(vnode, rm);
	    } else {
	      rm();
	    }
	  }
	} : {};
	
	var platformModules = [
	  attrs,
	  klass,
	  events,
	  domProps,
	  style,
	  transition
	];
	
	/*  */
	
	// the directive module should be applied last, after all
	// built-in modules have been applied.
	var modules = platformModules.concat(baseModules);
	
	var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });
	
	/**
	 * Not type checking this file because flow doesn't like attaching
	 * properties to Elements.
	 */
	
	/* istanbul ignore if */
	if (isIE9) {
	  // http://www.matts411.com/post/internet-explorer-9-oninput/
	  document.addEventListener('selectionchange', function () {
	    var el = document.activeElement;
	    if (el && el.vmodel) {
	      trigger(el, 'input');
	    }
	  });
	}
	
	var model$1 = {
	  inserted: function inserted (el, binding, vnode) {
	    if (vnode.tag === 'select') {
	      setSelected(el, binding, vnode.context);
	      el._vOptions = [].map.call(el.options, getValue);
	    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
	      el._vModifiers = binding.modifiers;
	      if (!binding.modifiers.lazy) {
	        // Safari < 10.2 & UIWebView doesn't fire compositionend when
	        // switching focus before confirming composition choice
	        // this also fixes the issue where some browsers e.g. iOS Chrome
	        // fires "change" instead of "input" on autocomplete.
	        el.addEventListener('change', onCompositionEnd);
	        if (!isAndroid) {
	          el.addEventListener('compositionstart', onCompositionStart);
	          el.addEventListener('compositionend', onCompositionEnd);
	        }
	        /* istanbul ignore if */
	        if (isIE9) {
	          el.vmodel = true;
	        }
	      }
	    }
	  },
	  componentUpdated: function componentUpdated (el, binding, vnode) {
	    if (vnode.tag === 'select') {
	      setSelected(el, binding, vnode.context);
	      // in case the options rendered by v-for have changed,
	      // it's possible that the value is out-of-sync with the rendered options.
	      // detect such cases and filter out values that no longer has a matching
	      // option in the DOM.
	      var prevOptions = el._vOptions;
	      var curOptions = el._vOptions = [].map.call(el.options, getValue);
	      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
	        // trigger change event if
	        // no matching option found for at least one value
	        var needReset = el.multiple
	          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
	          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
	        if (needReset) {
	          trigger(el, 'change');
	        }
	      }
	    }
	  }
	};
	
	function setSelected (el, binding, vm) {
	  actuallySetSelected(el, binding, vm);
	  /* istanbul ignore if */
	  if (isIE || isEdge) {
	    setTimeout(function () {
	      actuallySetSelected(el, binding, vm);
	    }, 0);
	  }
	}
	
	function actuallySetSelected (el, binding, vm) {
	  var value = binding.value;
	  var isMultiple = el.multiple;
	  if (isMultiple && !Array.isArray(value)) {
	    ("production") !== 'production' && warn(
	      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
	      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
	      vm
	    );
	    return
	  }
	  var selected, option;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    option = el.options[i];
	    if (isMultiple) {
	      selected = looseIndexOf(value, getValue(option)) > -1;
	      if (option.selected !== selected) {
	        option.selected = selected;
	      }
	    } else {
	      if (looseEqual(getValue(option), value)) {
	        if (el.selectedIndex !== i) {
	          el.selectedIndex = i;
	        }
	        return
	      }
	    }
	  }
	  if (!isMultiple) {
	    el.selectedIndex = -1;
	  }
	}
	
	function hasNoMatchingOption (value, options) {
	  return options.every(function (o) { return !looseEqual(o, value); })
	}
	
	function getValue (option) {
	  return '_value' in option
	    ? option._value
	    : option.value
	}
	
	function onCompositionStart (e) {
	  e.target.composing = true;
	}
	
	function onCompositionEnd (e) {
	  // prevent triggering an input event for no reason
	  if (!e.target.composing) { return }
	  e.target.composing = false;
	  trigger(e.target, 'input');
	}
	
	function trigger (el, type) {
	  var e = document.createEvent('HTMLEvents');
	  e.initEvent(type, true, true);
	  el.dispatchEvent(e);
	}
	
	/*  */
	
	// recursively search for possible transition defined inside the component root
	function locateNode (vnode) {
	  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
	    ? locateNode(vnode.componentInstance._vnode)
	    : vnode
	}
	
	var show = {
	  bind: function bind (el, ref, vnode) {
	    var value = ref.value;
	
	    vnode = locateNode(vnode);
	    var transition$$1 = vnode.data && vnode.data.transition;
	    var originalDisplay = el.__vOriginalDisplay =
	      el.style.display === 'none' ? '' : el.style.display;
	    if (value && transition$$1) {
	      vnode.data.show = true;
	      enter(vnode, function () {
	        el.style.display = originalDisplay;
	      });
	    } else {
	      el.style.display = value ? originalDisplay : 'none';
	    }
	  },
	
	  update: function update (el, ref, vnode) {
	    var value = ref.value;
	    var oldValue = ref.oldValue;
	
	    /* istanbul ignore if */
	    if (value === oldValue) { return }
	    vnode = locateNode(vnode);
	    var transition$$1 = vnode.data && vnode.data.transition;
	    if (transition$$1) {
	      vnode.data.show = true;
	      if (value) {
	        enter(vnode, function () {
	          el.style.display = el.__vOriginalDisplay;
	        });
	      } else {
	        leave(vnode, function () {
	          el.style.display = 'none';
	        });
	      }
	    } else {
	      el.style.display = value ? el.__vOriginalDisplay : 'none';
	    }
	  },
	
	  unbind: function unbind (
	    el,
	    binding,
	    vnode,
	    oldVnode,
	    isDestroy
	  ) {
	    if (!isDestroy) {
	      el.style.display = el.__vOriginalDisplay;
	    }
	  }
	};
	
	var platformDirectives = {
	  model: model$1,
	  show: show
	};
	
	/*  */
	
	// Provides transition support for a single element/component.
	// supports transition mode (out-in / in-out)
	
	var transitionProps = {
	  name: String,
	  appear: Boolean,
	  css: Boolean,
	  mode: String,
	  type: String,
	  enterClass: String,
	  leaveClass: String,
	  enterToClass: String,
	  leaveToClass: String,
	  enterActiveClass: String,
	  leaveActiveClass: String,
	  appearClass: String,
	  appearActiveClass: String,
	  appearToClass: String,
	  duration: [Number, String, Object]
	};
	
	// in case the child is also an abstract component, e.g. <keep-alive>
	// we want to recursively retrieve the real component to be rendered
	function getRealChild (vnode) {
	  var compOptions = vnode && vnode.componentOptions;
	  if (compOptions && compOptions.Ctor.options.abstract) {
	    return getRealChild(getFirstComponentChild(compOptions.children))
	  } else {
	    return vnode
	  }
	}
	
	function extractTransitionData (comp) {
	  var data = {};
	  var options = comp.$options;
	  // props
	  for (var key in options.propsData) {
	    data[key] = comp[key];
	  }
	  // events.
	  // extract listeners and pass them directly to the transition methods
	  var listeners = options._parentListeners;
	  for (var key$1 in listeners) {
	    data[camelize(key$1)] = listeners[key$1];
	  }
	  return data
	}
	
	function placeholder (h, rawChild) {
	  if (/\d-keep-alive$/.test(rawChild.tag)) {
	    return h('keep-alive', {
	      props: rawChild.componentOptions.propsData
	    })
	  }
	}
	
	function hasParentTransition (vnode) {
	  while ((vnode = vnode.parent)) {
	    if (vnode.data.transition) {
	      return true
	    }
	  }
	}
	
	function isSameChild (child, oldChild) {
	  return oldChild.key === child.key && oldChild.tag === child.tag
	}
	
	var Transition = {
	  name: 'transition',
	  props: transitionProps,
	  abstract: true,
	
	  render: function render (h) {
	    var this$1 = this;
	
	    var children = this.$options._renderChildren;
	    if (!children) {
	      return
	    }
	
	    // filter out text nodes (possible whitespaces)
	    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });
	    /* istanbul ignore if */
	    if (!children.length) {
	      return
	    }
	
	    // warn multiple elements
	    if (false) {
	      warn(
	        '<transition> can only be used on a single element. Use ' +
	        '<transition-group> for lists.',
	        this.$parent
	      );
	    }
	
	    var mode = this.mode;
	
	    // warn invalid mode
	    if (false
	    ) {
	      warn(
	        'invalid <transition> mode: ' + mode,
	        this.$parent
	      );
	    }
	
	    var rawChild = children[0];
	
	    // if this is a component root node and the component's
	    // parent container node also has transition, skip.
	    if (hasParentTransition(this.$vnode)) {
	      return rawChild
	    }
	
	    // apply transition data to child
	    // use getRealChild() to ignore abstract components e.g. keep-alive
	    var child = getRealChild(rawChild);
	    /* istanbul ignore if */
	    if (!child) {
	      return rawChild
	    }
	
	    if (this._leaving) {
	      return placeholder(h, rawChild)
	    }
	
	    // ensure a key that is unique to the vnode type and to this transition
	    // component instance. This key will be used to remove pending leaving nodes
	    // during entering.
	    var id = "__transition-" + (this._uid) + "-";
	    child.key = child.key == null
	      ? child.isComment
	        ? id + 'comment'
	        : id + child.tag
	      : isPrimitive(child.key)
	        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
	        : child.key;
	
	    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
	    var oldRawChild = this._vnode;
	    var oldChild = getRealChild(oldRawChild);
	
	    // mark v-show
	    // so that the transition module can hand over the control to the directive
	    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
	      child.data.show = true;
	    }
	
	    if (
	      oldChild &&
	      oldChild.data &&
	      !isSameChild(child, oldChild) &&
	      !isAsyncPlaceholder(oldChild)
	    ) {
	      // replace old child transition data with fresh one
	      // important for dynamic transitions!
	      var oldData = oldChild.data.transition = extend({}, data);
	      // handle transition mode
	      if (mode === 'out-in') {
	        // return placeholder node and queue update when leave finishes
	        this._leaving = true;
	        mergeVNodeHook(oldData, 'afterLeave', function () {
	          this$1._leaving = false;
	          this$1.$forceUpdate();
	        });
	        return placeholder(h, rawChild)
	      } else if (mode === 'in-out') {
	        if (isAsyncPlaceholder(child)) {
	          return oldRawChild
	        }
	        var delayedLeave;
	        var performLeave = function () { delayedLeave(); };
	        mergeVNodeHook(data, 'afterEnter', performLeave);
	        mergeVNodeHook(data, 'enterCancelled', performLeave);
	        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
	      }
	    }
	
	    return rawChild
	  }
	};
	
	/*  */
	
	// Provides transition support for list items.
	// supports move transitions using the FLIP technique.
	
	// Because the vdom's children update algorithm is "unstable" - i.e.
	// it doesn't guarantee the relative positioning of removed elements,
	// we force transition-group to update its children into two passes:
	// in the first pass, we remove all nodes that need to be removed,
	// triggering their leaving transition; in the second pass, we insert/move
	// into the final desired state. This way in the second pass removed
	// nodes will remain where they should be.
	
	var props = extend({
	  tag: String,
	  moveClass: String
	}, transitionProps);
	
	delete props.mode;
	
	var TransitionGroup = {
	  props: props,
	
	  render: function render (h) {
	    var tag = this.tag || this.$vnode.data.tag || 'span';
	    var map = Object.create(null);
	    var prevChildren = this.prevChildren = this.children;
	    var rawChildren = this.$slots.default || [];
	    var children = this.children = [];
	    var transitionData = extractTransitionData(this);
	
	    for (var i = 0; i < rawChildren.length; i++) {
	      var c = rawChildren[i];
	      if (c.tag) {
	        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
	          children.push(c);
	          map[c.key] = c
	          ;(c.data || (c.data = {})).transition = transitionData;
	        } else if (false) {
	          var opts = c.componentOptions;
	          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
	          warn(("<transition-group> children must be keyed: <" + name + ">"));
	        }
	      }
	    }
	
	    if (prevChildren) {
	      var kept = [];
	      var removed = [];
	      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
	        var c$1 = prevChildren[i$1];
	        c$1.data.transition = transitionData;
	        c$1.data.pos = c$1.elm.getBoundingClientRect();
	        if (map[c$1.key]) {
	          kept.push(c$1);
	        } else {
	          removed.push(c$1);
	        }
	      }
	      this.kept = h(tag, null, kept);
	      this.removed = removed;
	    }
	
	    return h(tag, null, children)
	  },
	
	  beforeUpdate: function beforeUpdate () {
	    // force removing pass
	    this.__patch__(
	      this._vnode,
	      this.kept,
	      false, // hydrating
	      true // removeOnly (!important, avoids unnecessary moves)
	    );
	    this._vnode = this.kept;
	  },
	
	  updated: function updated () {
	    var children = this.prevChildren;
	    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
	    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
	      return
	    }
	
	    // we divide the work into three loops to avoid mixing DOM reads and writes
	    // in each iteration - which helps prevent layout thrashing.
	    children.forEach(callPendingCbs);
	    children.forEach(recordPosition);
	    children.forEach(applyTranslation);
	
	    // force reflow to put everything in position
	    // assign to this to avoid being removed in tree-shaking
	    // $flow-disable-line
	    this._reflow = document.body.offsetHeight;
	
	    children.forEach(function (c) {
	      if (c.data.moved) {
	        var el = c.elm;
	        var s = el.style;
	        addTransitionClass(el, moveClass);
	        s.transform = s.WebkitTransform = s.transitionDuration = '';
	        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
	          if (!e || /transform$/.test(e.propertyName)) {
	            el.removeEventListener(transitionEndEvent, cb);
	            el._moveCb = null;
	            removeTransitionClass(el, moveClass);
	          }
	        });
	      }
	    });
	  },
	
	  methods: {
	    hasMove: function hasMove (el, moveClass) {
	      /* istanbul ignore if */
	      if (!hasTransition) {
	        return false
	      }
	      /* istanbul ignore if */
	      if (this._hasMove) {
	        return this._hasMove
	      }
	      // Detect whether an element with the move class applied has
	      // CSS transitions. Since the element may be inside an entering
	      // transition at this very moment, we make a clone of it and remove
	      // all other transition classes applied to ensure only the move class
	      // is applied.
	      var clone = el.cloneNode();
	      if (el._transitionClasses) {
	        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
	      }
	      addClass(clone, moveClass);
	      clone.style.display = 'none';
	      this.$el.appendChild(clone);
	      var info = getTransitionInfo(clone);
	      this.$el.removeChild(clone);
	      return (this._hasMove = info.hasTransform)
	    }
	  }
	};
	
	function callPendingCbs (c) {
	  /* istanbul ignore if */
	  if (c.elm._moveCb) {
	    c.elm._moveCb();
	  }
	  /* istanbul ignore if */
	  if (c.elm._enterCb) {
	    c.elm._enterCb();
	  }
	}
	
	function recordPosition (c) {
	  c.data.newPos = c.elm.getBoundingClientRect();
	}
	
	function applyTranslation (c) {
	  var oldPos = c.data.pos;
	  var newPos = c.data.newPos;
	  var dx = oldPos.left - newPos.left;
	  var dy = oldPos.top - newPos.top;
	  if (dx || dy) {
	    c.data.moved = true;
	    var s = c.elm.style;
	    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
	    s.transitionDuration = '0s';
	  }
	}
	
	var platformComponents = {
	  Transition: Transition,
	  TransitionGroup: TransitionGroup
	};
	
	/*  */
	
	// install platform specific utils
	Vue$3.config.mustUseProp = mustUseProp;
	Vue$3.config.isReservedTag = isReservedTag;
	Vue$3.config.isReservedAttr = isReservedAttr;
	Vue$3.config.getTagNamespace = getTagNamespace;
	Vue$3.config.isUnknownElement = isUnknownElement;
	
	// install platform runtime directives & components
	extend(Vue$3.options.directives, platformDirectives);
	extend(Vue$3.options.components, platformComponents);
	
	// install platform patch function
	Vue$3.prototype.__patch__ = inBrowser ? patch : noop;
	
	// public mount method
	Vue$3.prototype.$mount = function (
	  el,
	  hydrating
	) {
	  el = el && inBrowser ? query(el) : undefined;
	  return mountComponent(this, el, hydrating)
	};
	
	// devtools global hook
	/* istanbul ignore next */
	Vue$3.nextTick(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue$3);
	    } else if (false) {
	      console[console.info ? 'info' : 'log'](
	        'Download the Vue Devtools extension for a better development experience:\n' +
	        'https://github.com/vuejs/vue-devtools'
	      );
	    }
	  }
	  if (false
	  ) {
	    console[console.info ? 'info' : 'log'](
	      "You are running Vue in development mode.\n" +
	      "Make sure to turn on production mode when deploying for production.\n" +
	      "See more tips at https://vuejs.org/guide/deployment.html"
	    );
	  }
	}, 0);
	
	/*  */
	
	// check whether current browser encodes a char inside attribute values
	function shouldDecode (content, encoded) {
	  var div = document.createElement('div');
	  div.innerHTML = "<div a=\"" + content + "\"/>";
	  return div.innerHTML.indexOf(encoded) > 0
	}
	
	// #3663
	// IE encodes newlines inside attribute values while other browsers don't
	var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;
	
	/*  */
	
	var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
	var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	
	var buildRegex = cached(function (delimiters) {
	  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
	  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
	  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
	});
	
	function parseText (
	  text,
	  delimiters
	) {
	  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
	  if (!tagRE.test(text)) {
	    return
	  }
	  var tokens = [];
	  var lastIndex = tagRE.lastIndex = 0;
	  var match, index;
	  while ((match = tagRE.exec(text))) {
	    index = match.index;
	    // push text token
	    if (index > lastIndex) {
	      tokens.push(JSON.stringify(text.slice(lastIndex, index)));
	    }
	    // tag token
	    var exp = parseFilters(match[1].trim());
	    tokens.push(("_s(" + exp + ")"));
	    lastIndex = index + match[0].length;
	  }
	  if (lastIndex < text.length) {
	    tokens.push(JSON.stringify(text.slice(lastIndex)));
	  }
	  return tokens.join('+')
	}
	
	/*  */
	
	function transformNode (el, options) {
	  var warn = options.warn || baseWarn;
	  var staticClass = getAndRemoveAttr(el, 'class');
	  if (false) {
	    var expression = parseText(staticClass, options.delimiters);
	    if (expression) {
	      warn(
	        "class=\"" + staticClass + "\": " +
	        'Interpolation inside attributes has been removed. ' +
	        'Use v-bind or the colon shorthand instead. For example, ' +
	        'instead of <div class="{{ val }}">, use <div :class="val">.'
	      );
	    }
	  }
	  if (staticClass) {
	    el.staticClass = JSON.stringify(staticClass);
	  }
	  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
	  if (classBinding) {
	    el.classBinding = classBinding;
	  }
	}
	
	function genData (el) {
	  var data = '';
	  if (el.staticClass) {
	    data += "staticClass:" + (el.staticClass) + ",";
	  }
	  if (el.classBinding) {
	    data += "class:" + (el.classBinding) + ",";
	  }
	  return data
	}
	
	var klass$1 = {
	  staticKeys: ['staticClass'],
	  transformNode: transformNode,
	  genData: genData
	};
	
	/*  */
	
	function transformNode$1 (el, options) {
	  var warn = options.warn || baseWarn;
	  var staticStyle = getAndRemoveAttr(el, 'style');
	  if (staticStyle) {
	    /* istanbul ignore if */
	    if (false) {
	      var expression = parseText(staticStyle, options.delimiters);
	      if (expression) {
	        warn(
	          "style=\"" + staticStyle + "\": " +
	          'Interpolation inside attributes has been removed. ' +
	          'Use v-bind or the colon shorthand instead. For example, ' +
	          'instead of <div style="{{ val }}">, use <div :style="val">.'
	        );
	      }
	    }
	    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
	  }
	
	  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
	  if (styleBinding) {
	    el.styleBinding = styleBinding;
	  }
	}
	
	function genData$1 (el) {
	  var data = '';
	  if (el.staticStyle) {
	    data += "staticStyle:" + (el.staticStyle) + ",";
	  }
	  if (el.styleBinding) {
	    data += "style:(" + (el.styleBinding) + "),";
	  }
	  return data
	}
	
	var style$1 = {
	  staticKeys: ['staticStyle'],
	  transformNode: transformNode$1,
	  genData: genData$1
	};
	
	/*  */
	
	var decoder;
	
	var he = {
	  decode: function decode (html) {
	    decoder = decoder || document.createElement('div');
	    decoder.innerHTML = html;
	    return decoder.textContent
	  }
	};
	
	/*  */
	
	var isUnaryTag = makeMap(
	  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
	  'link,meta,param,source,track,wbr'
	);
	
	// Elements that you can, intentionally, leave open
	// (and which close themselves)
	var canBeLeftOpenTag = makeMap(
	  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
	);
	
	// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
	// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
	var isNonPhrasingTag = makeMap(
	  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
	  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
	  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
	  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
	  'title,tr,track'
	);
	
	/**
	 * Not type-checking this file because it's mostly vendor code.
	 */
	
	/*!
	 * HTML Parser By John Resig (ejohn.org)
	 * Modified by Juriy "kangax" Zaytsev
	 * Original code by Erik Arvidsson, Mozilla Public License
	 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
	 */
	
	// Regular Expressions for parsing tags and attributes
	var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
	// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
	// but for Vue templates we can enforce a simple charset
	var ncname = '[a-zA-Z_][\\w\\-\\.]*';
	var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
	var startTagOpen = new RegExp(("^<" + qnameCapture));
	var startTagClose = /^\s*(\/?)>/;
	var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
	var doctype = /^<!DOCTYPE [^>]+>/i;
	var comment = /^<!--/;
	var conditionalComment = /^<!\[/;
	
	var IS_REGEX_CAPTURING_BROKEN = false;
	'x'.replace(/x(.)?/g, function (m, g) {
	  IS_REGEX_CAPTURING_BROKEN = g === '';
	});
	
	// Special Elements (can contain anything)
	var isPlainTextElement = makeMap('script,style,textarea', true);
	var reCache = {};
	
	var decodingMap = {
	  '&lt;': '<',
	  '&gt;': '>',
	  '&quot;': '"',
	  '&amp;': '&',
	  '&#10;': '\n'
	};
	var encodedAttr = /&(?:lt|gt|quot|amp);/g;
	var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;
	
	// #5992
	var isIgnoreNewlineTag = makeMap('pre,textarea', true);
	var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };
	
	function decodeAttr (value, shouldDecodeNewlines) {
	  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
	  return value.replace(re, function (match) { return decodingMap[match]; })
	}
	
	function parseHTML (html, options) {
	  var stack = [];
	  var expectHTML = options.expectHTML;
	  var isUnaryTag$$1 = options.isUnaryTag || no;
	  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
	  var index = 0;
	  var last, lastTag;
	  while (html) {
	    last = html;
	    // Make sure we're not in a plaintext content element like script/style
	    if (!lastTag || !isPlainTextElement(lastTag)) {
	      var textEnd = html.indexOf('<');
	      if (textEnd === 0) {
	        // Comment:
	        if (comment.test(html)) {
	          var commentEnd = html.indexOf('-->');
	
	          if (commentEnd >= 0) {
	            if (options.shouldKeepComment) {
	              options.comment(html.substring(4, commentEnd));
	            }
	            advance(commentEnd + 3);
	            continue
	          }
	        }
	
	        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
	        if (conditionalComment.test(html)) {
	          var conditionalEnd = html.indexOf(']>');
	
	          if (conditionalEnd >= 0) {
	            advance(conditionalEnd + 2);
	            continue
	          }
	        }
	
	        // Doctype:
	        var doctypeMatch = html.match(doctype);
	        if (doctypeMatch) {
	          advance(doctypeMatch[0].length);
	          continue
	        }
	
	        // End tag:
	        var endTagMatch = html.match(endTag);
	        if (endTagMatch) {
	          var curIndex = index;
	          advance(endTagMatch[0].length);
	          parseEndTag(endTagMatch[1], curIndex, index);
	          continue
	        }
	
	        // Start tag:
	        var startTagMatch = parseStartTag();
	        if (startTagMatch) {
	          handleStartTag(startTagMatch);
	          if (shouldIgnoreFirstNewline(lastTag, html)) {
	            advance(1);
	          }
	          continue
	        }
	      }
	
	      var text = (void 0), rest = (void 0), next = (void 0);
	      if (textEnd >= 0) {
	        rest = html.slice(textEnd);
	        while (
	          !endTag.test(rest) &&
	          !startTagOpen.test(rest) &&
	          !comment.test(rest) &&
	          !conditionalComment.test(rest)
	        ) {
	          // < in plain text, be forgiving and treat it as text
	          next = rest.indexOf('<', 1);
	          if (next < 0) { break }
	          textEnd += next;
	          rest = html.slice(textEnd);
	        }
	        text = html.substring(0, textEnd);
	        advance(textEnd);
	      }
	
	      if (textEnd < 0) {
	        text = html;
	        html = '';
	      }
	
	      if (options.chars && text) {
	        options.chars(text);
	      }
	    } else {
	      var endTagLength = 0;
	      var stackedTag = lastTag.toLowerCase();
	      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
	      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
	        endTagLength = endTag.length;
	        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
	          text = text
	            .replace(/<!--([\s\S]*?)-->/g, '$1')
	            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
	        }
	        if (shouldIgnoreFirstNewline(stackedTag, text)) {
	          text = text.slice(1);
	        }
	        if (options.chars) {
	          options.chars(text);
	        }
	        return ''
	      });
	      index += html.length - rest$1.length;
	      html = rest$1;
	      parseEndTag(stackedTag, index - endTagLength, index);
	    }
	
	    if (html === last) {
	      options.chars && options.chars(html);
	      if (false) {
	        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""));
	      }
	      break
	    }
	  }
	
	  // Clean up any remaining tags
	  parseEndTag();
	
	  function advance (n) {
	    index += n;
	    html = html.substring(n);
	  }
	
	  function parseStartTag () {
	    var start = html.match(startTagOpen);
	    if (start) {
	      var match = {
	        tagName: start[1],
	        attrs: [],
	        start: index
	      };
	      advance(start[0].length);
	      var end, attr;
	      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
	        advance(attr[0].length);
	        match.attrs.push(attr);
	      }
	      if (end) {
	        match.unarySlash = end[1];
	        advance(end[0].length);
	        match.end = index;
	        return match
	      }
	    }
	  }
	
	  function handleStartTag (match) {
	    var tagName = match.tagName;
	    var unarySlash = match.unarySlash;
	
	    if (expectHTML) {
	      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
	        parseEndTag(lastTag);
	      }
	      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
	        parseEndTag(tagName);
	      }
	    }
	
	    var unary = isUnaryTag$$1(tagName) || !!unarySlash;
	
	    var l = match.attrs.length;
	    var attrs = new Array(l);
	    for (var i = 0; i < l; i++) {
	      var args = match.attrs[i];
	      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
	      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
	        if (args[3] === '') { delete args[3]; }
	        if (args[4] === '') { delete args[4]; }
	        if (args[5] === '') { delete args[5]; }
	      }
	      var value = args[3] || args[4] || args[5] || '';
	      attrs[i] = {
	        name: args[1],
	        value: decodeAttr(
	          value,
	          options.shouldDecodeNewlines
	        )
	      };
	    }
	
	    if (!unary) {
	      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
	      lastTag = tagName;
	    }
	
	    if (options.start) {
	      options.start(tagName, attrs, unary, match.start, match.end);
	    }
	  }
	
	  function parseEndTag (tagName, start, end) {
	    var pos, lowerCasedTagName;
	    if (start == null) { start = index; }
	    if (end == null) { end = index; }
	
	    if (tagName) {
	      lowerCasedTagName = tagName.toLowerCase();
	    }
	
	    // Find the closest opened tag of the same type
	    if (tagName) {
	      for (pos = stack.length - 1; pos >= 0; pos--) {
	        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
	          break
	        }
	      }
	    } else {
	      // If no tag name is provided, clean shop
	      pos = 0;
	    }
	
	    if (pos >= 0) {
	      // Close all the open elements, up the stack
	      for (var i = stack.length - 1; i >= pos; i--) {
	        if (false
	        ) {
	          options.warn(
	            ("tag <" + (stack[i].tag) + "> has no matching end tag.")
	          );
	        }
	        if (options.end) {
	          options.end(stack[i].tag, start, end);
	        }
	      }
	
	      // Remove the open elements from the stack
	      stack.length = pos;
	      lastTag = pos && stack[pos - 1].tag;
	    } else if (lowerCasedTagName === 'br') {
	      if (options.start) {
	        options.start(tagName, [], true, start, end);
	      }
	    } else if (lowerCasedTagName === 'p') {
	      if (options.start) {
	        options.start(tagName, [], false, start, end);
	      }
	      if (options.end) {
	        options.end(tagName, start, end);
	      }
	    }
	  }
	}
	
	/*  */
	
	var onRE = /^@|^v-on:/;
	var dirRE = /^v-|^@|^:/;
	var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
	var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;
	
	var argRE = /:(.*)$/;
	var bindRE = /^:|^v-bind:/;
	var modifierRE = /\.[^.]+/g;
	
	var decodeHTMLCached = cached(he.decode);
	
	// configurable state
	var warn$2;
	var delimiters;
	var transforms;
	var preTransforms;
	var postTransforms;
	var platformIsPreTag;
	var platformMustUseProp;
	var platformGetTagNamespace;
	
	
	
	function createASTElement (
	  tag,
	  attrs,
	  parent
	) {
	  return {
	    type: 1,
	    tag: tag,
	    attrsList: attrs,
	    attrsMap: makeAttrsMap(attrs),
	    parent: parent,
	    children: []
	  }
	}
	
	/**
	 * Convert HTML string to AST.
	 */
	function parse (
	  template,
	  options
	) {
	  warn$2 = options.warn || baseWarn;
	
	  platformIsPreTag = options.isPreTag || no;
	  platformMustUseProp = options.mustUseProp || no;
	  platformGetTagNamespace = options.getTagNamespace || no;
	
	  transforms = pluckModuleFunction(options.modules, 'transformNode');
	  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
	  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
	
	  delimiters = options.delimiters;
	
	  var stack = [];
	  var preserveWhitespace = options.preserveWhitespace !== false;
	  var root;
	  var currentParent;
	  var inVPre = false;
	  var inPre = false;
	  var warned = false;
	
	  function warnOnce (msg) {
	    if (!warned) {
	      warned = true;
	      warn$2(msg);
	    }
	  }
	
	  function endPre (element) {
	    // check pre state
	    if (element.pre) {
	      inVPre = false;
	    }
	    if (platformIsPreTag(element.tag)) {
	      inPre = false;
	    }
	  }
	
	  parseHTML(template, {
	    warn: warn$2,
	    expectHTML: options.expectHTML,
	    isUnaryTag: options.isUnaryTag,
	    canBeLeftOpenTag: options.canBeLeftOpenTag,
	    shouldDecodeNewlines: options.shouldDecodeNewlines,
	    shouldKeepComment: options.comments,
	    start: function start (tag, attrs, unary) {
	      // check namespace.
	      // inherit parent ns if there is one
	      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);
	
	      // handle IE svg bug
	      /* istanbul ignore if */
	      if (isIE && ns === 'svg') {
	        attrs = guardIESVGBug(attrs);
	      }
	
	      var element = createASTElement(tag, attrs, currentParent);
	      if (ns) {
	        element.ns = ns;
	      }
	
	      if (isForbiddenTag(element) && !isServerRendering()) {
	        element.forbidden = true;
	        ("production") !== 'production' && warn$2(
	          'Templates should only be responsible for mapping the state to the ' +
	          'UI. Avoid placing tags with side-effects in your templates, such as ' +
	          "<" + tag + ">" + ', as they will not be parsed.'
	        );
	      }
	
	      // apply pre-transforms
	      for (var i = 0; i < preTransforms.length; i++) {
	        element = preTransforms[i](element, options) || element;
	      }
	
	      if (!inVPre) {
	        processPre(element);
	        if (element.pre) {
	          inVPre = true;
	        }
	      }
	      if (platformIsPreTag(element.tag)) {
	        inPre = true;
	      }
	      if (inVPre) {
	        processRawAttrs(element);
	      } else if (!element.processed) {
	        // structural directives
	        processFor(element);
	        processIf(element);
	        processOnce(element);
	        // element-scope stuff
	        processElement(element, options);
	      }
	
	      function checkRootConstraints (el) {
	        if (false) {
	          if (el.tag === 'slot' || el.tag === 'template') {
	            warnOnce(
	              "Cannot use <" + (el.tag) + "> as component root element because it may " +
	              'contain multiple nodes.'
	            );
	          }
	          if (el.attrsMap.hasOwnProperty('v-for')) {
	            warnOnce(
	              'Cannot use v-for on stateful component root element because ' +
	              'it renders multiple elements.'
	            );
	          }
	        }
	      }
	
	      // tree management
	      if (!root) {
	        root = element;
	        checkRootConstraints(root);
	      } else if (!stack.length) {
	        // allow root elements with v-if, v-else-if and v-else
	        if (root.if && (element.elseif || element.else)) {
	          checkRootConstraints(element);
	          addIfCondition(root, {
	            exp: element.elseif,
	            block: element
	          });
	        } else if (false) {
	          warnOnce(
	            "Component template should contain exactly one root element. " +
	            "If you are using v-if on multiple elements, " +
	            "use v-else-if to chain them instead."
	          );
	        }
	      }
	      if (currentParent && !element.forbidden) {
	        if (element.elseif || element.else) {
	          processIfConditions(element, currentParent);
	        } else if (element.slotScope) { // scoped slot
	          currentParent.plain = false;
	          var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
	        } else {
	          currentParent.children.push(element);
	          element.parent = currentParent;
	        }
	      }
	      if (!unary) {
	        currentParent = element;
	        stack.push(element);
	      } else {
	        endPre(element);
	      }
	      // apply post-transforms
	      for (var i$1 = 0; i$1 < postTransforms.length; i$1++) {
	        postTransforms[i$1](element, options);
	      }
	    },
	
	    end: function end () {
	      // remove trailing whitespace
	      var element = stack[stack.length - 1];
	      var lastNode = element.children[element.children.length - 1];
	      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
	        element.children.pop();
	      }
	      // pop stack
	      stack.length -= 1;
	      currentParent = stack[stack.length - 1];
	      endPre(element);
	    },
	
	    chars: function chars (text) {
	      if (!currentParent) {
	        if (false) {
	          if (text === template) {
	            warnOnce(
	              'Component template requires a root element, rather than just text.'
	            );
	          } else if ((text = text.trim())) {
	            warnOnce(
	              ("text \"" + text + "\" outside root element will be ignored.")
	            );
	          }
	        }
	        return
	      }
	      // IE textarea placeholder bug
	      /* istanbul ignore if */
	      if (isIE &&
	        currentParent.tag === 'textarea' &&
	        currentParent.attrsMap.placeholder === text
	      ) {
	        return
	      }
	      var children = currentParent.children;
	      text = inPre || text.trim()
	        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
	        // only preserve whitespace if its not right after a starting tag
	        : preserveWhitespace && children.length ? ' ' : '';
	      if (text) {
	        var expression;
	        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
	          children.push({
	            type: 2,
	            expression: expression,
	            text: text
	          });
	        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
	          children.push({
	            type: 3,
	            text: text
	          });
	        }
	      }
	    },
	    comment: function comment (text) {
	      currentParent.children.push({
	        type: 3,
	        text: text,
	        isComment: true
	      });
	    }
	  });
	  return root
	}
	
	function processPre (el) {
	  if (getAndRemoveAttr(el, 'v-pre') != null) {
	    el.pre = true;
	  }
	}
	
	function processRawAttrs (el) {
	  var l = el.attrsList.length;
	  if (l) {
	    var attrs = el.attrs = new Array(l);
	    for (var i = 0; i < l; i++) {
	      attrs[i] = {
	        name: el.attrsList[i].name,
	        value: JSON.stringify(el.attrsList[i].value)
	      };
	    }
	  } else if (!el.pre) {
	    // non root node in pre blocks with no attributes
	    el.plain = true;
	  }
	}
	
	function processElement (element, options) {
	  processKey(element);
	
	  // determine whether this is a plain element after
	  // removing structural attributes
	  element.plain = !element.key && !element.attrsList.length;
	
	  processRef(element);
	  processSlot(element);
	  processComponent(element);
	  for (var i = 0; i < transforms.length; i++) {
	    element = transforms[i](element, options) || element;
	  }
	  processAttrs(element);
	}
	
	function processKey (el) {
	  var exp = getBindingAttr(el, 'key');
	  if (exp) {
	    if (false) {
	      warn$2("<template> cannot be keyed. Place the key on real elements instead.");
	    }
	    el.key = exp;
	  }
	}
	
	function processRef (el) {
	  var ref = getBindingAttr(el, 'ref');
	  if (ref) {
	    el.ref = ref;
	    el.refInFor = checkInFor(el);
	  }
	}
	
	function processFor (el) {
	  var exp;
	  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
	    var inMatch = exp.match(forAliasRE);
	    if (!inMatch) {
	      ("production") !== 'production' && warn$2(
	        ("Invalid v-for expression: " + exp)
	      );
	      return
	    }
	    el.for = inMatch[2].trim();
	    var alias = inMatch[1].trim();
	    var iteratorMatch = alias.match(forIteratorRE);
	    if (iteratorMatch) {
	      el.alias = iteratorMatch[1].trim();
	      el.iterator1 = iteratorMatch[2].trim();
	      if (iteratorMatch[3]) {
	        el.iterator2 = iteratorMatch[3].trim();
	      }
	    } else {
	      el.alias = alias;
	    }
	  }
	}
	
	function processIf (el) {
	  var exp = getAndRemoveAttr(el, 'v-if');
	  if (exp) {
	    el.if = exp;
	    addIfCondition(el, {
	      exp: exp,
	      block: el
	    });
	  } else {
	    if (getAndRemoveAttr(el, 'v-else') != null) {
	      el.else = true;
	    }
	    var elseif = getAndRemoveAttr(el, 'v-else-if');
	    if (elseif) {
	      el.elseif = elseif;
	    }
	  }
	}
	
	function processIfConditions (el, parent) {
	  var prev = findPrevElement(parent.children);
	  if (prev && prev.if) {
	    addIfCondition(prev, {
	      exp: el.elseif,
	      block: el
	    });
	  } else if (false) {
	    warn$2(
	      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
	      "used on element <" + (el.tag) + "> without corresponding v-if."
	    );
	  }
	}
	
	function findPrevElement (children) {
	  var i = children.length;
	  while (i--) {
	    if (children[i].type === 1) {
	      return children[i]
	    } else {
	      if (false) {
	        warn$2(
	          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
	          "will be ignored."
	        );
	      }
	      children.pop();
	    }
	  }
	}
	
	function addIfCondition (el, condition) {
	  if (!el.ifConditions) {
	    el.ifConditions = [];
	  }
	  el.ifConditions.push(condition);
	}
	
	function processOnce (el) {
	  var once$$1 = getAndRemoveAttr(el, 'v-once');
	  if (once$$1 != null) {
	    el.once = true;
	  }
	}
	
	function processSlot (el) {
	  if (el.tag === 'slot') {
	    el.slotName = getBindingAttr(el, 'name');
	    if (false) {
	      warn$2(
	        "`key` does not work on <slot> because slots are abstract outlets " +
	        "and can possibly expand into multiple elements. " +
	        "Use the key on a wrapping element instead."
	      );
	    }
	  } else {
	    var slotScope;
	    if (el.tag === 'template') {
	      slotScope = getAndRemoveAttr(el, 'scope');
	      /* istanbul ignore if */
	      if (false) {
	        warn$2(
	          "the \"scope\" attribute for scoped slots have been deprecated and " +
	          "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
	          "can also be used on plain elements in addition to <template> to " +
	          "denote scoped slots.",
	          true
	        );
	      }
	      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
	    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
	      el.slotScope = slotScope;
	    }
	    var slotTarget = getBindingAttr(el, 'slot');
	    if (slotTarget) {
	      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
	      // preserve slot as an attribute for native shadow DOM compat
	      // only for non-scoped slots.
	      if (!el.slotScope) {
	        addAttr(el, 'slot', slotTarget);
	      }
	    }
	  }
	}
	
	function processComponent (el) {
	  var binding;
	  if ((binding = getBindingAttr(el, 'is'))) {
	    el.component = binding;
	  }
	  if (getAndRemoveAttr(el, 'inline-template') != null) {
	    el.inlineTemplate = true;
	  }
	}
	
	function processAttrs (el) {
	  var list = el.attrsList;
	  var i, l, name, rawName, value, modifiers, isProp;
	  for (i = 0, l = list.length; i < l; i++) {
	    name = rawName = list[i].name;
	    value = list[i].value;
	    if (dirRE.test(name)) {
	      // mark element as dynamic
	      el.hasBindings = true;
	      // modifiers
	      modifiers = parseModifiers(name);
	      if (modifiers) {
	        name = name.replace(modifierRE, '');
	      }
	      if (bindRE.test(name)) { // v-bind
	        name = name.replace(bindRE, '');
	        value = parseFilters(value);
	        isProp = false;
	        if (modifiers) {
	          if (modifiers.prop) {
	            isProp = true;
	            name = camelize(name);
	            if (name === 'innerHtml') { name = 'innerHTML'; }
	          }
	          if (modifiers.camel) {
	            name = camelize(name);
	          }
	          if (modifiers.sync) {
	            addHandler(
	              el,
	              ("update:" + (camelize(name))),
	              genAssignmentCode(value, "$event")
	            );
	          }
	        }
	        if (isProp || (
	          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
	        )) {
	          addProp(el, name, value);
	        } else {
	          addAttr(el, name, value);
	        }
	      } else if (onRE.test(name)) { // v-on
	        name = name.replace(onRE, '');
	        addHandler(el, name, value, modifiers, false, warn$2);
	      } else { // normal directives
	        name = name.replace(dirRE, '');
	        // parse arg
	        var argMatch = name.match(argRE);
	        var arg = argMatch && argMatch[1];
	        if (arg) {
	          name = name.slice(0, -(arg.length + 1));
	        }
	        addDirective(el, name, rawName, value, arg, modifiers);
	        if (false) {
	          checkForAliasModel(el, value);
	        }
	      }
	    } else {
	      // literal attribute
	      if (false) {
	        var expression = parseText(value, delimiters);
	        if (expression) {
	          warn$2(
	            name + "=\"" + value + "\": " +
	            'Interpolation inside attributes has been removed. ' +
	            'Use v-bind or the colon shorthand instead. For example, ' +
	            'instead of <div id="{{ val }}">, use <div :id="val">.'
	          );
	        }
	      }
	      addAttr(el, name, JSON.stringify(value));
	    }
	  }
	}
	
	function checkInFor (el) {
	  var parent = el;
	  while (parent) {
	    if (parent.for !== undefined) {
	      return true
	    }
	    parent = parent.parent;
	  }
	  return false
	}
	
	function parseModifiers (name) {
	  var match = name.match(modifierRE);
	  if (match) {
	    var ret = {};
	    match.forEach(function (m) { ret[m.slice(1)] = true; });
	    return ret
	  }
	}
	
	function makeAttrsMap (attrs) {
	  var map = {};
	  for (var i = 0, l = attrs.length; i < l; i++) {
	    if (
	      false
	    ) {
	      warn$2('duplicate attribute: ' + attrs[i].name);
	    }
	    map[attrs[i].name] = attrs[i].value;
	  }
	  return map
	}
	
	// for script (e.g. type="x/template") or style, do not decode content
	function isTextTag (el) {
	  return el.tag === 'script' || el.tag === 'style'
	}
	
	function isForbiddenTag (el) {
	  return (
	    el.tag === 'style' ||
	    (el.tag === 'script' && (
	      !el.attrsMap.type ||
	      el.attrsMap.type === 'text/javascript'
	    ))
	  )
	}
	
	var ieNSBug = /^xmlns:NS\d+/;
	var ieNSPrefix = /^NS\d+:/;
	
	/* istanbul ignore next */
	function guardIESVGBug (attrs) {
	  var res = [];
	  for (var i = 0; i < attrs.length; i++) {
	    var attr = attrs[i];
	    if (!ieNSBug.test(attr.name)) {
	      attr.name = attr.name.replace(ieNSPrefix, '');
	      res.push(attr);
	    }
	  }
	  return res
	}
	
	function checkForAliasModel (el, value) {
	  var _el = el;
	  while (_el) {
	    if (_el.for && _el.alias === value) {
	      warn$2(
	        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
	        "You are binding v-model directly to a v-for iteration alias. " +
	        "This will not be able to modify the v-for source array because " +
	        "writing to the alias is like modifying a function local variable. " +
	        "Consider using an array of objects and use v-model on an object property instead."
	      );
	    }
	    _el = _el.parent;
	  }
	}
	
	/*  */
	
	/**
	 * Expand input[v-model] with dyanmic type bindings into v-if-else chains
	 * Turn this:
	 *   <input v-model="data[type]" :type="type">
	 * into this:
	 *   <input v-if="type === 'checkbox'" type="checkbox" v-model="data[type]">
	 *   <input v-else-if="type === 'radio'" type="radio" v-model="data[type]">
	 *   <input v-else :type="type" v-model="data[type]">
	 */
	
	function preTransformNode (el, options) {
	  if (el.tag === 'input') {
	    var map = el.attrsMap;
	    if (map['v-model'] && (map['v-bind:type'] || map[':type'])) {
	      var typeBinding = getBindingAttr(el, 'type');
	      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
	      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
	      // 1. checkbox
	      var branch0 = cloneASTElement(el);
	      // process for on the main node
	      processFor(branch0);
	      addRawAttr(branch0, 'type', 'checkbox');
	      processElement(branch0, options);
	      branch0.processed = true; // prevent it from double-processed
	      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
	      addIfCondition(branch0, {
	        exp: branch0.if,
	        block: branch0
	      });
	      // 2. add radio else-if condition
	      var branch1 = cloneASTElement(el);
	      getAndRemoveAttr(branch1, 'v-for', true);
	      addRawAttr(branch1, 'type', 'radio');
	      processElement(branch1, options);
	      addIfCondition(branch0, {
	        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
	        block: branch1
	      });
	      // 3. other
	      var branch2 = cloneASTElement(el);
	      getAndRemoveAttr(branch2, 'v-for', true);
	      addRawAttr(branch2, ':type', typeBinding);
	      processElement(branch2, options);
	      addIfCondition(branch0, {
	        exp: ifCondition,
	        block: branch2
	      });
	      return branch0
	    }
	  }
	}
	
	function cloneASTElement (el) {
	  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
	}
	
	function addRawAttr (el, name, value) {
	  el.attrsMap[name] = value;
	  el.attrsList.push({ name: name, value: value });
	}
	
	var model$2 = {
	  preTransformNode: preTransformNode
	};
	
	var modules$1 = [
	  klass$1,
	  style$1,
	  model$2
	];
	
	/*  */
	
	function text (el, dir) {
	  if (dir.value) {
	    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"));
	  }
	}
	
	/*  */
	
	function html (el, dir) {
	  if (dir.value) {
	    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"));
	  }
	}
	
	var directives$1 = {
	  model: model,
	  text: text,
	  html: html
	};
	
	/*  */
	
	var baseOptions = {
	  expectHTML: true,
	  modules: modules$1,
	  directives: directives$1,
	  isPreTag: isPreTag,
	  isUnaryTag: isUnaryTag,
	  mustUseProp: mustUseProp,
	  canBeLeftOpenTag: canBeLeftOpenTag,
	  isReservedTag: isReservedTag,
	  getTagNamespace: getTagNamespace,
	  staticKeys: genStaticKeys(modules$1)
	};
	
	/*  */
	
	var isStaticKey;
	var isPlatformReservedTag;
	
	var genStaticKeysCached = cached(genStaticKeys$1);
	
	/**
	 * Goal of the optimizer: walk the generated template AST tree
	 * and detect sub-trees that are purely static, i.e. parts of
	 * the DOM that never needs to change.
	 *
	 * Once we detect these sub-trees, we can:
	 *
	 * 1. Hoist them into constants, so that we no longer need to
	 *    create fresh nodes for them on each re-render;
	 * 2. Completely skip them in the patching process.
	 */
	function optimize (root, options) {
	  if (!root) { return }
	  isStaticKey = genStaticKeysCached(options.staticKeys || '');
	  isPlatformReservedTag = options.isReservedTag || no;
	  // first pass: mark all non-static nodes.
	  markStatic$1(root);
	  // second pass: mark static roots.
	  markStaticRoots(root, false);
	}
	
	function genStaticKeys$1 (keys) {
	  return makeMap(
	    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +
	    (keys ? ',' + keys : '')
	  )
	}
	
	function markStatic$1 (node) {
	  node.static = isStatic(node);
	  if (node.type === 1) {
	    // do not make component slot content static. this avoids
	    // 1. components not able to mutate slot nodes
	    // 2. static slot content fails for hot-reloading
	    if (
	      !isPlatformReservedTag(node.tag) &&
	      node.tag !== 'slot' &&
	      node.attrsMap['inline-template'] == null
	    ) {
	      return
	    }
	    for (var i = 0, l = node.children.length; i < l; i++) {
	      var child = node.children[i];
	      markStatic$1(child);
	      if (!child.static) {
	        node.static = false;
	      }
	    }
	    if (node.ifConditions) {
	      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
	        var block = node.ifConditions[i$1].block;
	        markStatic$1(block);
	        if (!block.static) {
	          node.static = false;
	        }
	      }
	    }
	  }
	}
	
	function markStaticRoots (node, isInFor) {
	  if (node.type === 1) {
	    if (node.static || node.once) {
	      node.staticInFor = isInFor;
	    }
	    // For a node to qualify as a static root, it should have children that
	    // are not just static text. Otherwise the cost of hoisting out will
	    // outweigh the benefits and it's better off to just always render it fresh.
	    if (node.static && node.children.length && !(
	      node.children.length === 1 &&
	      node.children[0].type === 3
	    )) {
	      node.staticRoot = true;
	      return
	    } else {
	      node.staticRoot = false;
	    }
	    if (node.children) {
	      for (var i = 0, l = node.children.length; i < l; i++) {
	        markStaticRoots(node.children[i], isInFor || !!node.for);
	      }
	    }
	    if (node.ifConditions) {
	      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
	        markStaticRoots(node.ifConditions[i$1].block, isInFor);
	      }
	    }
	  }
	}
	
	function isStatic (node) {
	  if (node.type === 2) { // expression
	    return false
	  }
	  if (node.type === 3) { // text
	    return true
	  }
	  return !!(node.pre || (
	    !node.hasBindings && // no dynamic bindings
	    !node.if && !node.for && // not v-if or v-for or v-else
	    !isBuiltInTag(node.tag) && // not a built-in
	    isPlatformReservedTag(node.tag) && // not a component
	    !isDirectChildOfTemplateFor(node) &&
	    Object.keys(node).every(isStaticKey)
	  ))
	}
	
	function isDirectChildOfTemplateFor (node) {
	  while (node.parent) {
	    node = node.parent;
	    if (node.tag !== 'template') {
	      return false
	    }
	    if (node.for) {
	      return true
	    }
	  }
	  return false
	}
	
	/*  */
	
	var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
	var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;
	
	// keyCode aliases
	var keyCodes = {
	  esc: 27,
	  tab: 9,
	  enter: 13,
	  space: 32,
	  up: 38,
	  left: 37,
	  right: 39,
	  down: 40,
	  'delete': [8, 46]
	};
	
	// #4868: modifiers that prevent the execution of the listener
	// need to explicitly return null so that we can determine whether to remove
	// the listener for .once
	var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };
	
	var modifierCode = {
	  stop: '$event.stopPropagation();',
	  prevent: '$event.preventDefault();',
	  self: genGuard("$event.target !== $event.currentTarget"),
	  ctrl: genGuard("!$event.ctrlKey"),
	  shift: genGuard("!$event.shiftKey"),
	  alt: genGuard("!$event.altKey"),
	  meta: genGuard("!$event.metaKey"),
	  left: genGuard("'button' in $event && $event.button !== 0"),
	  middle: genGuard("'button' in $event && $event.button !== 1"),
	  right: genGuard("'button' in $event && $event.button !== 2")
	};
	
	function genHandlers (
	  events,
	  isNative,
	  warn
	) {
	  var res = isNative ? 'nativeOn:{' : 'on:{';
	  for (var name in events) {
	    var handler = events[name];
	    // #5330: warn click.right, since right clicks do not actually fire click events.
	    if (false
	    ) {
	      warn(
	        "Use \"contextmenu\" instead of \"click.right\" since right clicks " +
	        "do not actually fire \"click\" events."
	      );
	    }
	    res += "\"" + name + "\":" + (genHandler(name, handler)) + ",";
	  }
	  return res.slice(0, -1) + '}'
	}
	
	function genHandler (
	  name,
	  handler
	) {
	  if (!handler) {
	    return 'function(){}'
	  }
	
	  if (Array.isArray(handler)) {
	    return ("[" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + "]")
	  }
	
	  var isMethodPath = simplePathRE.test(handler.value);
	  var isFunctionExpression = fnExpRE.test(handler.value);
	
	  if (!handler.modifiers) {
	    return isMethodPath || isFunctionExpression
	      ? handler.value
	      : ("function($event){" + (handler.value) + "}") // inline statement
	  } else {
	    var code = '';
	    var genModifierCode = '';
	    var keys = [];
	    for (var key in handler.modifiers) {
	      if (modifierCode[key]) {
	        genModifierCode += modifierCode[key];
	        // left/right
	        if (keyCodes[key]) {
	          keys.push(key);
	        }
	      } else if (key === 'exact') {
	        var modifiers = (handler.modifiers);
	        genModifierCode += genGuard(
	          ['ctrl', 'shift', 'alt', 'meta']
	            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
	            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
	            .join('||')
	        );
	      } else {
	        keys.push(key);
	      }
	    }
	    if (keys.length) {
	      code += genKeyFilter(keys);
	    }
	    // Make sure modifiers like prevent and stop get executed after key filtering
	    if (genModifierCode) {
	      code += genModifierCode;
	    }
	    var handlerCode = isMethodPath
	      ? handler.value + '($event)'
	      : isFunctionExpression
	        ? ("(" + (handler.value) + ")($event)")
	        : handler.value;
	    return ("function($event){" + code + handlerCode + "}")
	  }
	}
	
	function genKeyFilter (keys) {
	  return ("if(!('button' in $event)&&" + (keys.map(genFilterCode).join('&&')) + ")return null;")
	}
	
	function genFilterCode (key) {
	  var keyVal = parseInt(key, 10);
	  if (keyVal) {
	    return ("$event.keyCode!==" + keyVal)
	  }
	  var code = keyCodes[key];
	  return (
	    "_k($event.keyCode," +
	    (JSON.stringify(key)) + "," +
	    (JSON.stringify(code)) + "," +
	    "$event.key)"
	  )
	}
	
	/*  */
	
	function on (el, dir) {
	  if (false) {
	    warn("v-on without argument does not support modifiers.");
	  }
	  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
	}
	
	/*  */
	
	function bind$1 (el, dir) {
	  el.wrapData = function (code) {
	    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
	  };
	}
	
	/*  */
	
	var baseDirectives = {
	  on: on,
	  bind: bind$1,
	  cloak: noop
	};
	
	/*  */
	
	var CodegenState = function CodegenState (options) {
	  this.options = options;
	  this.warn = options.warn || baseWarn;
	  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
	  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
	  this.directives = extend(extend({}, baseDirectives), options.directives);
	  var isReservedTag = options.isReservedTag || no;
	  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };
	  this.onceId = 0;
	  this.staticRenderFns = [];
	};
	
	
	
	function generate (
	  ast,
	  options
	) {
	  var state = new CodegenState(options);
	  var code = ast ? genElement(ast, state) : '_c("div")';
	  return {
	    render: ("with(this){return " + code + "}"),
	    staticRenderFns: state.staticRenderFns
	  }
	}
	
	function genElement (el, state) {
	  if (el.staticRoot && !el.staticProcessed) {
	    return genStatic(el, state)
	  } else if (el.once && !el.onceProcessed) {
	    return genOnce(el, state)
	  } else if (el.for && !el.forProcessed) {
	    return genFor(el, state)
	  } else if (el.if && !el.ifProcessed) {
	    return genIf(el, state)
	  } else if (el.tag === 'template' && !el.slotTarget) {
	    return genChildren(el, state) || 'void 0'
	  } else if (el.tag === 'slot') {
	    return genSlot(el, state)
	  } else {
	    // component or element
	    var code;
	    if (el.component) {
	      code = genComponent(el.component, el, state);
	    } else {
	      var data = el.plain ? undefined : genData$2(el, state);
	
	      var children = el.inlineTemplate ? null : genChildren(el, state, true);
	      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
	    }
	    // module transforms
	    for (var i = 0; i < state.transforms.length; i++) {
	      code = state.transforms[i](el, code);
	    }
	    return code
	  }
	}
	
	// hoist static sub-trees out
	function genStatic (el, state) {
	  el.staticProcessed = true;
	  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
	  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
	}
	
	// v-once
	function genOnce (el, state) {
	  el.onceProcessed = true;
	  if (el.if && !el.ifProcessed) {
	    return genIf(el, state)
	  } else if (el.staticInFor) {
	    var key = '';
	    var parent = el.parent;
	    while (parent) {
	      if (parent.for) {
	        key = parent.key;
	        break
	      }
	      parent = parent.parent;
	    }
	    if (!key) {
	      ("production") !== 'production' && state.warn(
	        "v-once can only be used inside v-for that is keyed. "
	      );
	      return genElement(el, state)
	    }
	    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
	  } else {
	    return genStatic(el, state)
	  }
	}
	
	function genIf (
	  el,
	  state,
	  altGen,
	  altEmpty
	) {
	  el.ifProcessed = true; // avoid recursion
	  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
	}
	
	function genIfConditions (
	  conditions,
	  state,
	  altGen,
	  altEmpty
	) {
	  if (!conditions.length) {
	    return altEmpty || '_e()'
	  }
	
	  var condition = conditions.shift();
	  if (condition.exp) {
	    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
	  } else {
	    return ("" + (genTernaryExp(condition.block)))
	  }
	
	  // v-if with v-once should generate code like (a)?_m(0):_m(1)
	  function genTernaryExp (el) {
	    return altGen
	      ? altGen(el, state)
	      : el.once
	        ? genOnce(el, state)
	        : genElement(el, state)
	  }
	}
	
	function genFor (
	  el,
	  state,
	  altGen,
	  altHelper
	) {
	  var exp = el.for;
	  var alias = el.alias;
	  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
	  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
	
	  if (false
	  ) {
	    state.warn(
	      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
	      "v-for should have explicit keys. " +
	      "See https://vuejs.org/guide/list.html#key for more info.",
	      true /* tip */
	    );
	  }
	
	  el.forProcessed = true; // avoid recursion
	  return (altHelper || '_l') + "((" + exp + ")," +
	    "function(" + alias + iterator1 + iterator2 + "){" +
	      "return " + ((altGen || genElement)(el, state)) +
	    '})'
	}
	
	function genData$2 (el, state) {
	  var data = '{';
	
	  // directives first.
	  // directives may mutate the el's other properties before they are generated.
	  var dirs = genDirectives(el, state);
	  if (dirs) { data += dirs + ','; }
	
	  // key
	  if (el.key) {
	    data += "key:" + (el.key) + ",";
	  }
	  // ref
	  if (el.ref) {
	    data += "ref:" + (el.ref) + ",";
	  }
	  if (el.refInFor) {
	    data += "refInFor:true,";
	  }
	  // pre
	  if (el.pre) {
	    data += "pre:true,";
	  }
	  // record original tag name for components using "is" attribute
	  if (el.component) {
	    data += "tag:\"" + (el.tag) + "\",";
	  }
	  // module data generation functions
	  for (var i = 0; i < state.dataGenFns.length; i++) {
	    data += state.dataGenFns[i](el);
	  }
	  // attributes
	  if (el.attrs) {
	    data += "attrs:{" + (genProps(el.attrs)) + "},";
	  }
	  // DOM props
	  if (el.props) {
	    data += "domProps:{" + (genProps(el.props)) + "},";
	  }
	  // event handlers
	  if (el.events) {
	    data += (genHandlers(el.events, false, state.warn)) + ",";
	  }
	  if (el.nativeEvents) {
	    data += (genHandlers(el.nativeEvents, true, state.warn)) + ",";
	  }
	  // slot target
	  // only for non-scoped slots
	  if (el.slotTarget && !el.slotScope) {
	    data += "slot:" + (el.slotTarget) + ",";
	  }
	  // scoped slots
	  if (el.scopedSlots) {
	    data += (genScopedSlots(el.scopedSlots, state)) + ",";
	  }
	  // component v-model
	  if (el.model) {
	    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
	  }
	  // inline-template
	  if (el.inlineTemplate) {
	    var inlineTemplate = genInlineTemplate(el, state);
	    if (inlineTemplate) {
	      data += inlineTemplate + ",";
	    }
	  }
	  data = data.replace(/,$/, '') + '}';
	  // v-bind data wrap
	  if (el.wrapData) {
	    data = el.wrapData(data);
	  }
	  // v-on data wrap
	  if (el.wrapListeners) {
	    data = el.wrapListeners(data);
	  }
	  return data
	}
	
	function genDirectives (el, state) {
	  var dirs = el.directives;
	  if (!dirs) { return }
	  var res = 'directives:[';
	  var hasRuntime = false;
	  var i, l, dir, needRuntime;
	  for (i = 0, l = dirs.length; i < l; i++) {
	    dir = dirs[i];
	    needRuntime = true;
	    var gen = state.directives[dir.name];
	    if (gen) {
	      // compile-time directive that manipulates AST.
	      // returns true if it also needs a runtime counterpart.
	      needRuntime = !!gen(el, dir, state.warn);
	    }
	    if (needRuntime) {
	      hasRuntime = true;
	      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:\"" + (dir.arg) + "\"") : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
	    }
	  }
	  if (hasRuntime) {
	    return res.slice(0, -1) + ']'
	  }
	}
	
	function genInlineTemplate (el, state) {
	  var ast = el.children[0];
	  if (false) {
	    state.warn('Inline-template components must have exactly one child element.');
	  }
	  if (ast.type === 1) {
	    var inlineRenderFns = generate(ast, state.options);
	    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
	  }
	}
	
	function genScopedSlots (
	  slots,
	  state
	) {
	  return ("scopedSlots:_u([" + (Object.keys(slots).map(function (key) {
	      return genScopedSlot(key, slots[key], state)
	    }).join(',')) + "])")
	}
	
	function genScopedSlot (
	  key,
	  el,
	  state
	) {
	  if (el.for && !el.forProcessed) {
	    return genForScopedSlot(key, el, state)
	  }
	  var fn = "function(" + (String(el.slotScope)) + "){" +
	    "return " + (el.tag === 'template'
	      ? el.if
	        ? ((el.if) + "?" + (genChildren(el, state) || 'undefined') + ":undefined")
	        : genChildren(el, state) || 'undefined'
	      : genElement(el, state)) + "}";
	  return ("{key:" + key + ",fn:" + fn + "}")
	}
	
	function genForScopedSlot (
	  key,
	  el,
	  state
	) {
	  var exp = el.for;
	  var alias = el.alias;
	  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
	  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
	  el.forProcessed = true; // avoid recursion
	  return "_l((" + exp + ")," +
	    "function(" + alias + iterator1 + iterator2 + "){" +
	      "return " + (genScopedSlot(key, el, state)) +
	    '})'
	}
	
	function genChildren (
	  el,
	  state,
	  checkSkip,
	  altGenElement,
	  altGenNode
	) {
	  var children = el.children;
	  if (children.length) {
	    var el$1 = children[0];
	    // optimize single v-for
	    if (children.length === 1 &&
	      el$1.for &&
	      el$1.tag !== 'template' &&
	      el$1.tag !== 'slot'
	    ) {
	      return (altGenElement || genElement)(el$1, state)
	    }
	    var normalizationType = checkSkip
	      ? getNormalizationType(children, state.maybeComponent)
	      : 0;
	    var gen = altGenNode || genNode;
	    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType ? ("," + normalizationType) : ''))
	  }
	}
	
	// determine the normalization needed for the children array.
	// 0: no normalization needed
	// 1: simple normalization needed (possible 1-level deep nested array)
	// 2: full normalization needed
	function getNormalizationType (
	  children,
	  maybeComponent
	) {
	  var res = 0;
	  for (var i = 0; i < children.length; i++) {
	    var el = children[i];
	    if (el.type !== 1) {
	      continue
	    }
	    if (needsNormalization(el) ||
	        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
	      res = 2;
	      break
	    }
	    if (maybeComponent(el) ||
	        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
	      res = 1;
	    }
	  }
	  return res
	}
	
	function needsNormalization (el) {
	  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
	}
	
	function genNode (node, state) {
	  if (node.type === 1) {
	    return genElement(node, state)
	  } if (node.type === 3 && node.isComment) {
	    return genComment(node)
	  } else {
	    return genText(node)
	  }
	}
	
	function genText (text) {
	  return ("_v(" + (text.type === 2
	    ? text.expression // no need for () because already wrapped in _s()
	    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
	}
	
	function genComment (comment) {
	  return ("_e(" + (JSON.stringify(comment.text)) + ")")
	}
	
	function genSlot (el, state) {
	  var slotName = el.slotName || '"default"';
	  var children = genChildren(el, state);
	  var res = "_t(" + slotName + (children ? ("," + children) : '');
	  var attrs = el.attrs && ("{" + (el.attrs.map(function (a) { return ((camelize(a.name)) + ":" + (a.value)); }).join(',')) + "}");
	  var bind$$1 = el.attrsMap['v-bind'];
	  if ((attrs || bind$$1) && !children) {
	    res += ",null";
	  }
	  if (attrs) {
	    res += "," + attrs;
	  }
	  if (bind$$1) {
	    res += (attrs ? '' : ',null') + "," + bind$$1;
	  }
	  return res + ')'
	}
	
	// componentName is el.component, take it as argument to shun flow's pessimistic refinement
	function genComponent (
	  componentName,
	  el,
	  state
	) {
	  var children = el.inlineTemplate ? null : genChildren(el, state, true);
	  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
	}
	
	function genProps (props) {
	  var res = '';
	  for (var i = 0; i < props.length; i++) {
	    var prop = props[i];
	    res += "\"" + (prop.name) + "\":" + (transformSpecialNewlines(prop.value)) + ",";
	  }
	  return res.slice(0, -1)
	}
	
	// #3895, #4268
	function transformSpecialNewlines (text) {
	  return text
	    .replace(/\u2028/g, '\\u2028')
	    .replace(/\u2029/g, '\\u2029')
	}
	
	/*  */
	
	// these keywords should not appear inside expressions, but operators like
	// typeof, instanceof and in are allowed
	var prohibitedKeywordRE = new RegExp('\\b' + (
	  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
	  'super,throw,while,yield,delete,export,import,return,switch,default,' +
	  'extends,finally,continue,debugger,function,arguments'
	).split(',').join('\\b|\\b') + '\\b');
	
	// these unary operators should not be used as property/method names
	var unaryOperatorsRE = new RegExp('\\b' + (
	  'delete,typeof,void'
	).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');
	
	// check valid identifier for v-for
	var identRE = /[A-Za-z_$][\w$]*/;
	
	// strip strings in expressions
	var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
	
	// detect problematic expressions in a template
	function detectErrors (ast) {
	  var errors = [];
	  if (ast) {
	    checkNode(ast, errors);
	  }
	  return errors
	}
	
	function checkNode (node, errors) {
	  if (node.type === 1) {
	    for (var name in node.attrsMap) {
	      if (dirRE.test(name)) {
	        var value = node.attrsMap[name];
	        if (value) {
	          if (name === 'v-for') {
	            checkFor(node, ("v-for=\"" + value + "\""), errors);
	          } else if (onRE.test(name)) {
	            checkEvent(value, (name + "=\"" + value + "\""), errors);
	          } else {
	            checkExpression(value, (name + "=\"" + value + "\""), errors);
	          }
	        }
	      }
	    }
	    if (node.children) {
	      for (var i = 0; i < node.children.length; i++) {
	        checkNode(node.children[i], errors);
	      }
	    }
	  } else if (node.type === 2) {
	    checkExpression(node.expression, node.text, errors);
	  }
	}
	
	function checkEvent (exp, text, errors) {
	  var stipped = exp.replace(stripStringRE, '');
	  var keywordMatch = stipped.match(unaryOperatorsRE);
	  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
	    errors.push(
	      "avoid using JavaScript unary operator as property name: " +
	      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
	    );
	  }
	  checkExpression(exp, text, errors);
	}
	
	function checkFor (node, text, errors) {
	  checkExpression(node.for || '', text, errors);
	  checkIdentifier(node.alias, 'v-for alias', text, errors);
	  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
	  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
	}
	
	function checkIdentifier (ident, type, text, errors) {
	  if (typeof ident === 'string' && !identRE.test(ident)) {
	    errors.push(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())));
	  }
	}
	
	function checkExpression (exp, text, errors) {
	  try {
	    new Function(("return " + exp));
	  } catch (e) {
	    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
	    if (keywordMatch) {
	      errors.push(
	        "avoid using JavaScript keyword as property name: " +
	        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim())
	      );
	    } else {
	      errors.push(
	        "invalid expression: " + (e.message) + " in\n\n" +
	        "    " + exp + "\n\n" +
	        "  Raw expression: " + (text.trim()) + "\n"
	      );
	    }
	  }
	}
	
	/*  */
	
	function createFunction (code, errors) {
	  try {
	    return new Function(code)
	  } catch (err) {
	    errors.push({ err: err, code: code });
	    return noop
	  }
	}
	
	function createCompileToFunctionFn (compile) {
	  var cache = Object.create(null);
	
	  return function compileToFunctions (
	    template,
	    options,
	    vm
	  ) {
	    options = extend({}, options);
	    var warn$$1 = options.warn || warn;
	    delete options.warn;
	
	    /* istanbul ignore if */
	    if (false) {
	      // detect possible CSP restriction
	      try {
	        new Function('return 1');
	      } catch (e) {
	        if (e.toString().match(/unsafe-eval|CSP/)) {
	          warn$$1(
	            'It seems you are using the standalone build of Vue.js in an ' +
	            'environment with Content Security Policy that prohibits unsafe-eval. ' +
	            'The template compiler cannot work in this environment. Consider ' +
	            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
	            'templates into render functions.'
	          );
	        }
	      }
	    }
	
	    // check cache
	    var key = options.delimiters
	      ? String(options.delimiters) + template
	      : template;
	    if (cache[key]) {
	      return cache[key]
	    }
	
	    // compile
	    var compiled = compile(template, options);
	
	    // check compilation errors/tips
	    if (false) {
	      if (compiled.errors && compiled.errors.length) {
	        warn$$1(
	          "Error compiling template:\n\n" + template + "\n\n" +
	          compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
	          vm
	        );
	      }
	      if (compiled.tips && compiled.tips.length) {
	        compiled.tips.forEach(function (msg) { return tip(msg, vm); });
	      }
	    }
	
	    // turn code into functions
	    var res = {};
	    var fnGenErrors = [];
	    res.render = createFunction(compiled.render, fnGenErrors);
	    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
	      return createFunction(code, fnGenErrors)
	    });
	
	    // check function generation errors.
	    // this should only happen if there is a bug in the compiler itself.
	    // mostly for codegen development use
	    /* istanbul ignore if */
	    if (false) {
	      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
	        warn$$1(
	          "Failed to generate render function:\n\n" +
	          fnGenErrors.map(function (ref) {
	            var err = ref.err;
	            var code = ref.code;
	
	            return ((err.toString()) + " in\n\n" + code + "\n");
	        }).join('\n'),
	          vm
	        );
	      }
	    }
	
	    return (cache[key] = res)
	  }
	}
	
	/*  */
	
	function createCompilerCreator (baseCompile) {
	  return function createCompiler (baseOptions) {
	    function compile (
	      template,
	      options
	    ) {
	      var finalOptions = Object.create(baseOptions);
	      var errors = [];
	      var tips = [];
	      finalOptions.warn = function (msg, tip) {
	        (tip ? tips : errors).push(msg);
	      };
	
	      if (options) {
	        // merge custom modules
	        if (options.modules) {
	          finalOptions.modules =
	            (baseOptions.modules || []).concat(options.modules);
	        }
	        // merge custom directives
	        if (options.directives) {
	          finalOptions.directives = extend(
	            Object.create(baseOptions.directives),
	            options.directives
	          );
	        }
	        // copy other options
	        for (var key in options) {
	          if (key !== 'modules' && key !== 'directives') {
	            finalOptions[key] = options[key];
	          }
	        }
	      }
	
	      var compiled = baseCompile(template, finalOptions);
	      if (false) {
	        errors.push.apply(errors, detectErrors(compiled.ast));
	      }
	      compiled.errors = errors;
	      compiled.tips = tips;
	      return compiled
	    }
	
	    return {
	      compile: compile,
	      compileToFunctions: createCompileToFunctionFn(compile)
	    }
	  }
	}
	
	/*  */
	
	// `createCompilerCreator` allows creating compilers that use alternative
	// parser/optimizer/codegen, e.g the SSR optimizing compiler.
	// Here we just export a default compiler using the default parts.
	var createCompiler = createCompilerCreator(function baseCompile (
	  template,
	  options
	) {
	  var ast = parse(template.trim(), options);
	  optimize(ast, options);
	  var code = generate(ast, options);
	  return {
	    ast: ast,
	    render: code.render,
	    staticRenderFns: code.staticRenderFns
	  }
	});
	
	/*  */
	
	var ref$1 = createCompiler(baseOptions);
	var compileToFunctions = ref$1.compileToFunctions;
	
	/*  */
	
	var idToTemplate = cached(function (id) {
	  var el = query(id);
	  return el && el.innerHTML
	});
	
	var mount = Vue$3.prototype.$mount;
	Vue$3.prototype.$mount = function (
	  el,
	  hydrating
	) {
	  el = el && query(el);
	
	  /* istanbul ignore if */
	  if (el === document.body || el === document.documentElement) {
	    ("production") !== 'production' && warn(
	      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
	    );
	    return this
	  }
	
	  var options = this.$options;
	  // resolve template/el and convert to render function
	  if (!options.render) {
	    var template = options.template;
	    if (template) {
	      if (typeof template === 'string') {
	        if (template.charAt(0) === '#') {
	          template = idToTemplate(template);
	          /* istanbul ignore if */
	          if (false) {
	            warn(
	              ("Template element not found or is empty: " + (options.template)),
	              this
	            );
	          }
	        }
	      } else if (template.nodeType) {
	        template = template.innerHTML;
	      } else {
	        if (false) {
	          warn('invalid template option:' + template, this);
	        }
	        return this
	      }
	    } else if (el) {
	      template = getOuterHTML(el);
	    }
	    if (template) {
	      /* istanbul ignore if */
	      if (false) {
	        mark('compile');
	      }
	
	      var ref = compileToFunctions(template, {
	        shouldDecodeNewlines: shouldDecodeNewlines,
	        delimiters: options.delimiters,
	        comments: options.comments
	      }, this);
	      var render = ref.render;
	      var staticRenderFns = ref.staticRenderFns;
	      options.render = render;
	      options.staticRenderFns = staticRenderFns;
	
	      /* istanbul ignore if */
	      if (false) {
	        mark('compile end');
	        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
	      }
	    }
	  }
	  return mount.call(this, el, hydrating)
	};
	
	/**
	 * Get outerHTML of elements, taking care
	 * of SVG elements in IE as well.
	 */
	function getOuterHTML (el) {
	  if (el.outerHTML) {
	    return el.outerHTML
	  } else {
	    var container = document.createElement('div');
	    container.appendChild(el.cloneNode(true));
	    return container.innerHTML
	  }
	}
	
	Vue$3.compile = compileToFunctions;
	
	module.exports = Vue$3;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(621).setImmediate))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if (media) {
			styleElement.setAttribute("media", media);
		}
	
		if (sourceMap) {
			// https://developer.chrome.com/devtools/docs/javascript-debugging
			// this makes source maps inside style tags work properly in Chrome
			css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */';
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(212);

/***/ }),
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 97);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 97:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/button.vue?vue&type=template&id=ca859fb4&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "button",
	    {
	      staticClass: "el-button",
	      class: [
	        _vm.type ? "el-button--" + _vm.type : "",
	        _vm.buttonSize ? "el-button--" + _vm.buttonSize : "",
	        {
	          "is-disabled": _vm.buttonDisabled,
	          "is-loading": _vm.loading,
	          "is-plain": _vm.plain,
	          "is-round": _vm.round,
	          "is-circle": _vm.circle
	        }
	      ],
	      attrs: {
	        disabled: _vm.buttonDisabled || _vm.loading,
	        autofocus: _vm.autofocus,
	        type: _vm.nativeType
	      },
	      on: { click: _vm.handleClick }
	    },
	    [
	      _vm.loading ? _c("i", { staticClass: "el-icon-loading" }) : _vm._e(),
	      _vm.icon && !_vm.loading ? _c("i", { class: _vm.icon }) : _vm._e(),
	      _vm.$slots.default ? _c("span", [_vm._t("default")], 2) : _vm._e()
	    ]
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/button/src/button.vue?vue&type=template&id=ca859fb4&
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/button.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	/* harmony default export */ var buttonvue_type_script_lang_js_ = ({
	  name: 'ElButton',
	
	  inject: {
	    elForm: {
	      default: ''
	    },
	    elFormItem: {
	      default: ''
	    }
	  },
	
	  props: {
	    type: {
	      type: String,
	      default: 'default'
	    },
	    size: String,
	    icon: {
	      type: String,
	      default: ''
	    },
	    nativeType: {
	      type: String,
	      default: 'button'
	    },
	    loading: Boolean,
	    disabled: Boolean,
	    plain: Boolean,
	    autofocus: Boolean,
	    round: Boolean,
	    circle: Boolean
	  },
	
	  computed: {
	    _elFormItemSize: function _elFormItemSize() {
	      return (this.elFormItem || {}).elFormItemSize;
	    },
	    buttonSize: function buttonSize() {
	      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
	    },
	    buttonDisabled: function buttonDisabled() {
	      return this.disabled || (this.elForm || {}).disabled;
	    }
	  },
	
	  methods: {
	    handleClick: function handleClick(evt) {
	      this.$emit('click', evt);
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/button/src/button.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_buttonvue_type_script_lang_js_ = (buttonvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/button/src/button.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_buttonvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/button/src/button.vue"
	/* harmony default export */ var src_button = (component.exports);
	// CONCATENATED MODULE: ./packages/button/index.js
	
	
	/* istanbul ignore next */
	src_button.install = function (Vue) {
	  Vue.component(src_button.name, src_button);
	};
	
	/* harmony default export */ var packages_button = __webpack_exports__["default"] = (src_button);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 9 */,
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(382), __esModule: true };

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 53);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 3:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	
	/***/ 33:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=template&id=7a44c642&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "li",
	    {
	      directives: [
	        {
	          name: "show",
	          rawName: "v-show",
	          value: _vm.visible,
	          expression: "visible"
	        }
	      ],
	      staticClass: "el-select-dropdown__item",
	      class: {
	        selected: _vm.itemSelected,
	        "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
	        hover: _vm.hover
	      },
	      on: {
	        mouseenter: _vm.hoverItem,
	        click: function($event) {
	          $event.stopPropagation()
	          return _vm.selectOptionClick($event)
	        }
	      }
	    },
	    [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])],
	    2
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=template&id=7a44c642&
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=script&lang=js&
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	/* harmony default export */ var optionvue_type_script_lang_js_ = ({
	  mixins: [emitter_default.a],
	
	  name: 'ElOption',
	
	  componentName: 'ElOption',
	
	  inject: ['select'],
	
	  props: {
	    value: {
	      required: true
	    },
	    label: [String, Number],
	    created: Boolean,
	    disabled: {
	      type: Boolean,
	      default: false
	    }
	  },
	
	  data: function data() {
	    return {
	      index: -1,
	      groupDisabled: false,
	      visible: true,
	      hitState: false,
	      hover: false
	    };
	  },
	
	
	  computed: {
	    isObject: function isObject() {
	      return Object.prototype.toString.call(this.value).toLowerCase() === '[object object]';
	    },
	    currentLabel: function currentLabel() {
	      return this.label || (this.isObject ? '' : this.value);
	    },
	    currentValue: function currentValue() {
	      return this.value || this.label || '';
	    },
	    itemSelected: function itemSelected() {
	      if (!this.select.multiple) {
	        return this.isEqual(this.value, this.select.value);
	      } else {
	        return this.contains(this.select.value, this.value);
	      }
	    },
	    limitReached: function limitReached() {
	      if (this.select.multiple) {
	        return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
	      } else {
	        return false;
	      }
	    }
	  },
	
	  watch: {
	    currentLabel: function currentLabel() {
	      if (!this.created && !this.select.remote) this.dispatch('ElSelect', 'setSelected');
	    },
	    value: function value(val, oldVal) {
	      var _select = this.select,
	          remote = _select.remote,
	          valueKey = _select.valueKey;
	
	      if (!this.created && !remote) {
	        if (valueKey && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && (typeof oldVal === 'undefined' ? 'undefined' : _typeof(oldVal)) === 'object' && val[valueKey] === oldVal[valueKey]) {
	          return;
	        }
	        this.dispatch('ElSelect', 'setSelected');
	      }
	    }
	  },
	
	  methods: {
	    isEqual: function isEqual(a, b) {
	      if (!this.isObject) {
	        return a === b;
	      } else {
	        var valueKey = this.select.valueKey;
	        return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
	      }
	    },
	    contains: function contains() {
	      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	      var target = arguments[1];
	
	      if (!this.isObject) {
	        return arr && arr.indexOf(target) > -1;
	      } else {
	        var valueKey = this.select.valueKey;
	        return arr && arr.some(function (item) {
	          return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target, valueKey);
	        });
	      }
	    },
	    handleGroupDisabled: function handleGroupDisabled(val) {
	      this.groupDisabled = val;
	    },
	    hoverItem: function hoverItem() {
	      if (!this.disabled && !this.groupDisabled) {
	        this.select.hoverIndex = this.select.options.indexOf(this);
	      }
	    },
	    selectOptionClick: function selectOptionClick() {
	      if (this.disabled !== true && this.groupDisabled !== true) {
	        this.dispatch('ElSelect', 'handleOptionClick', [this, true]);
	      }
	    },
	    queryChange: function queryChange(query) {
	      this.visible = new RegExp(Object(util_["escapeRegexpString"])(query), 'i').test(this.currentLabel) || this.created;
	      if (!this.visible) {
	        this.select.filteredOptionsCount--;
	      }
	    }
	  },
	
	  created: function created() {
	    this.select.options.push(this);
	    this.select.cachedOptions.push(this);
	    this.select.optionsCount++;
	    this.select.filteredOptionsCount++;
	
	    this.$on('queryChange', this.queryChange);
	    this.$on('handleGroupDisabled', this.handleGroupDisabled);
	  },
	  beforeDestroy: function beforeDestroy() {
	    var _select2 = this.select,
	        selected = _select2.selected,
	        multiple = _select2.multiple;
	
	    var selectedOptions = multiple ? selected : [selected];
	    var index = this.select.cachedOptions.indexOf(this);
	    var selectedIndex = selectedOptions.indexOf(this);
	
	    // if option is not selected, remove it from cache
	    if (index > -1 && selectedIndex < 0) {
	      this.select.cachedOptions.splice(index, 1);
	    }
	    this.select.onOptionDestroy(this.select.options.indexOf(this));
	  }
	});
	// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_optionvue_type_script_lang_js_ = (optionvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/select/src/option.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_optionvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/select/src/option.vue"
	/* harmony default export */ var src_option = __webpack_exports__["a"] = (component.exports);
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 53:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	/* harmony import */ var _select_src_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33);
	
	
	/* istanbul ignore next */
	_select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].install = function (Vue) {
	  Vue.component(_select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].name, _select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);
	};
	
	/* harmony default export */ __webpack_exports__["default"] = (_select_src_option__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 61);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 10:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(21);
	
	/***/ }),
	
	/***/ 12:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(132);
	
	/***/ }),
	
	/***/ 14:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(128);
	
	/***/ }),
	
	/***/ 16:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(81);
	
	/***/ }),
	
	/***/ 17:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(95);
	
	/***/ }),
	
	/***/ 21:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(179);
	
	/***/ }),
	
	/***/ 22:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(176);
	
	/***/ }),
	
	/***/ 3:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	
	/***/ 31:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(493);
	
	/***/ }),
	
	/***/ 33:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=template&id=7a44c642&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "li",
	    {
	      directives: [
	        {
	          name: "show",
	          rawName: "v-show",
	          value: _vm.visible,
	          expression: "visible"
	        }
	      ],
	      staticClass: "el-select-dropdown__item",
	      class: {
	        selected: _vm.itemSelected,
	        "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
	        hover: _vm.hover
	      },
	      on: {
	        mouseenter: _vm.hoverItem,
	        click: function($event) {
	          $event.stopPropagation()
	          return _vm.selectOptionClick($event)
	        }
	      }
	    },
	    [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])],
	    2
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=template&id=7a44c642&
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/option.vue?vue&type=script&lang=js&
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	/* harmony default export */ var optionvue_type_script_lang_js_ = ({
	  mixins: [emitter_default.a],
	
	  name: 'ElOption',
	
	  componentName: 'ElOption',
	
	  inject: ['select'],
	
	  props: {
	    value: {
	      required: true
	    },
	    label: [String, Number],
	    created: Boolean,
	    disabled: {
	      type: Boolean,
	      default: false
	    }
	  },
	
	  data: function data() {
	    return {
	      index: -1,
	      groupDisabled: false,
	      visible: true,
	      hitState: false,
	      hover: false
	    };
	  },
	
	
	  computed: {
	    isObject: function isObject() {
	      return Object.prototype.toString.call(this.value).toLowerCase() === '[object object]';
	    },
	    currentLabel: function currentLabel() {
	      return this.label || (this.isObject ? '' : this.value);
	    },
	    currentValue: function currentValue() {
	      return this.value || this.label || '';
	    },
	    itemSelected: function itemSelected() {
	      if (!this.select.multiple) {
	        return this.isEqual(this.value, this.select.value);
	      } else {
	        return this.contains(this.select.value, this.value);
	      }
	    },
	    limitReached: function limitReached() {
	      if (this.select.multiple) {
	        return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
	      } else {
	        return false;
	      }
	    }
	  },
	
	  watch: {
	    currentLabel: function currentLabel() {
	      if (!this.created && !this.select.remote) this.dispatch('ElSelect', 'setSelected');
	    },
	    value: function value(val, oldVal) {
	      var _select = this.select,
	          remote = _select.remote,
	          valueKey = _select.valueKey;
	
	      if (!this.created && !remote) {
	        if (valueKey && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && (typeof oldVal === 'undefined' ? 'undefined' : _typeof(oldVal)) === 'object' && val[valueKey] === oldVal[valueKey]) {
	          return;
	        }
	        this.dispatch('ElSelect', 'setSelected');
	      }
	    }
	  },
	
	  methods: {
	    isEqual: function isEqual(a, b) {
	      if (!this.isObject) {
	        return a === b;
	      } else {
	        var valueKey = this.select.valueKey;
	        return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
	      }
	    },
	    contains: function contains() {
	      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	      var target = arguments[1];
	
	      if (!this.isObject) {
	        return arr && arr.indexOf(target) > -1;
	      } else {
	        var valueKey = this.select.valueKey;
	        return arr && arr.some(function (item) {
	          return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target, valueKey);
	        });
	      }
	    },
	    handleGroupDisabled: function handleGroupDisabled(val) {
	      this.groupDisabled = val;
	    },
	    hoverItem: function hoverItem() {
	      if (!this.disabled && !this.groupDisabled) {
	        this.select.hoverIndex = this.select.options.indexOf(this);
	      }
	    },
	    selectOptionClick: function selectOptionClick() {
	      if (this.disabled !== true && this.groupDisabled !== true) {
	        this.dispatch('ElSelect', 'handleOptionClick', [this, true]);
	      }
	    },
	    queryChange: function queryChange(query) {
	      this.visible = new RegExp(Object(util_["escapeRegexpString"])(query), 'i').test(this.currentLabel) || this.created;
	      if (!this.visible) {
	        this.select.filteredOptionsCount--;
	      }
	    }
	  },
	
	  created: function created() {
	    this.select.options.push(this);
	    this.select.cachedOptions.push(this);
	    this.select.optionsCount++;
	    this.select.filteredOptionsCount++;
	
	    this.$on('queryChange', this.queryChange);
	    this.$on('handleGroupDisabled', this.handleGroupDisabled);
	  },
	  beforeDestroy: function beforeDestroy() {
	    var _select2 = this.select,
	        selected = _select2.selected,
	        multiple = _select2.multiple;
	
	    var selectedOptions = multiple ? selected : [selected];
	    var index = this.select.cachedOptions.indexOf(this);
	    var selectedIndex = selectedOptions.indexOf(this);
	
	    // if option is not selected, remove it from cache
	    if (index > -1 && selectedIndex < 0) {
	      this.select.cachedOptions.splice(index, 1);
	    }
	    this.select.onOptionDestroy(this.select.options.indexOf(this));
	  }
	});
	// CONCATENATED MODULE: ./packages/select/src/option.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_optionvue_type_script_lang_js_ = (optionvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/select/src/option.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_optionvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/select/src/option.vue"
	/* harmony default export */ var src_option = __webpack_exports__["a"] = (component.exports);
	
	/***/ }),
	
	/***/ 37:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(486);
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 5:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(82);
	
	/***/ }),
	
	/***/ 6:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(59);
	
	/***/ }),
	
	/***/ 61:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=template&id=0e4aade6&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      directives: [
	        {
	          name: "clickoutside",
	          rawName: "v-clickoutside",
	          value: _vm.handleClose,
	          expression: "handleClose"
	        }
	      ],
	      staticClass: "el-select",
	      class: [_vm.selectSize ? "el-select--" + _vm.selectSize : ""],
	      on: {
	        click: function($event) {
	          $event.stopPropagation()
	          return _vm.toggleMenu($event)
	        }
	      }
	    },
	    [
	      _vm.multiple
	        ? _c(
	            "div",
	            {
	              ref: "tags",
	              staticClass: "el-select__tags",
	              style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
	            },
	            [
	              _vm.collapseTags && _vm.selected.length
	                ? _c(
	                    "span",
	                    [
	                      _c(
	                        "el-tag",
	                        {
	                          attrs: {
	                            closable: !_vm.selectDisabled,
	                            size: _vm.collapseTagSize,
	                            hit: _vm.selected[0].hitState,
	                            type: "info",
	                            "disable-transitions": ""
	                          },
	                          on: {
	                            close: function($event) {
	                              _vm.deleteTag($event, _vm.selected[0])
	                            }
	                          }
	                        },
	                        [
	                          _c("span", { staticClass: "el-select__tags-text" }, [
	                            _vm._v(_vm._s(_vm.selected[0].currentLabel))
	                          ])
	                        ]
	                      ),
	                      _vm.selected.length > 1
	                        ? _c(
	                            "el-tag",
	                            {
	                              attrs: {
	                                closable: false,
	                                size: _vm.collapseTagSize,
	                                type: "info",
	                                "disable-transitions": ""
	                              }
	                            },
	                            [
	                              _c(
	                                "span",
	                                { staticClass: "el-select__tags-text" },
	                                [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
	                              )
	                            ]
	                          )
	                        : _vm._e()
	                    ],
	                    1
	                  )
	                : _vm._e(),
	              !_vm.collapseTags
	                ? _c(
	                    "transition-group",
	                    { on: { "after-leave": _vm.resetInputHeight } },
	                    _vm._l(_vm.selected, function(item) {
	                      return _c(
	                        "el-tag",
	                        {
	                          key: _vm.getValueKey(item),
	                          attrs: {
	                            closable: !_vm.selectDisabled,
	                            size: _vm.collapseTagSize,
	                            hit: item.hitState,
	                            type: "info",
	                            "disable-transitions": ""
	                          },
	                          on: {
	                            close: function($event) {
	                              _vm.deleteTag($event, item)
	                            }
	                          }
	                        },
	                        [
	                          _c("span", { staticClass: "el-select__tags-text" }, [
	                            _vm._v(_vm._s(item.currentLabel))
	                          ])
	                        ]
	                      )
	                    }),
	                    1
	                  )
	                : _vm._e(),
	              _vm.filterable
	                ? _c("input", {
	                    directives: [
	                      {
	                        name: "model",
	                        rawName: "v-model",
	                        value: _vm.query,
	                        expression: "query"
	                      }
	                    ],
	                    ref: "input",
	                    staticClass: "el-select__input",
	                    class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
	                    style: {
	                      "flex-grow": "1",
	                      width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
	                      "max-width": _vm.inputWidth - 42 + "px"
	                    },
	                    attrs: {
	                      type: "text",
	                      disabled: _vm.selectDisabled,
	                      autocomplete: _vm.autoComplete || _vm.autocomplete
	                    },
	                    domProps: { value: _vm.query },
	                    on: {
	                      focus: _vm.handleFocus,
	                      blur: function($event) {
	                        _vm.softFocus = false
	                      },
	                      keyup: _vm.managePlaceholder,
	                      keydown: [
	                        _vm.resetInputState,
	                        function($event) {
	                          if (
	                            !("button" in $event) &&
	                            _vm._k($event.keyCode, "down", 40, $event.key, [
	                              "Down",
	                              "ArrowDown"
	                            ])
	                          ) {
	                            return null
	                          }
	                          $event.preventDefault()
	                          _vm.navigateOptions("next")
	                        },
	                        function($event) {
	                          if (
	                            !("button" in $event) &&
	                            _vm._k($event.keyCode, "up", 38, $event.key, [
	                              "Up",
	                              "ArrowUp"
	                            ])
	                          ) {
	                            return null
	                          }
	                          $event.preventDefault()
	                          _vm.navigateOptions("prev")
	                        },
	                        function($event) {
	                          if (
	                            !("button" in $event) &&
	                            _vm._k(
	                              $event.keyCode,
	                              "enter",
	                              13,
	                              $event.key,
	                              "Enter"
	                            )
	                          ) {
	                            return null
	                          }
	                          $event.preventDefault()
	                          return _vm.selectOption($event)
	                        },
	                        function($event) {
	                          if (
	                            !("button" in $event) &&
	                            _vm._k($event.keyCode, "esc", 27, $event.key, [
	                              "Esc",
	                              "Escape"
	                            ])
	                          ) {
	                            return null
	                          }
	                          $event.stopPropagation()
	                          $event.preventDefault()
	                          _vm.visible = false
	                        },
	                        function($event) {
	                          if (
	                            !("button" in $event) &&
	                            _vm._k(
	                              $event.keyCode,
	                              "delete",
	                              [8, 46],
	                              $event.key,
	                              ["Backspace", "Delete", "Del"]
	                            )
	                          ) {
	                            return null
	                          }
	                          return _vm.deletePrevTag($event)
	                        },
	                        function($event) {
	                          if (
	                            !("button" in $event) &&
	                            _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")
	                          ) {
	                            return null
	                          }
	                          _vm.visible = false
	                        }
	                      ],
	                      compositionstart: _vm.handleComposition,
	                      compositionupdate: _vm.handleComposition,
	                      compositionend: _vm.handleComposition,
	                      input: [
	                        function($event) {
	                          if ($event.target.composing) {
	                            return
	                          }
	                          _vm.query = $event.target.value
	                        },
	                        _vm.debouncedQueryChange
	                      ]
	                    }
	                  })
	                : _vm._e()
	            ],
	            1
	          )
	        : _vm._e(),
	      _c(
	        "el-input",
	        {
	          ref: "reference",
	          class: { "is-focus": _vm.visible },
	          attrs: {
	            type: "text",
	            placeholder: _vm.currentPlaceholder,
	            name: _vm.name,
	            id: _vm.id,
	            autocomplete: _vm.autoComplete || _vm.autocomplete,
	            size: _vm.selectSize,
	            disabled: _vm.selectDisabled,
	            readonly: _vm.readonly,
	            "validate-event": false,
	            tabindex: _vm.multiple && _vm.filterable ? "-1" : null
	          },
	          on: { focus: _vm.handleFocus, blur: _vm.handleBlur },
	          nativeOn: {
	            keyup: function($event) {
	              return _vm.debouncedOnInputChange($event)
	            },
	            keydown: [
	              function($event) {
	                if (
	                  !("button" in $event) &&
	                  _vm._k($event.keyCode, "down", 40, $event.key, [
	                    "Down",
	                    "ArrowDown"
	                  ])
	                ) {
	                  return null
	                }
	                $event.stopPropagation()
	                $event.preventDefault()
	                _vm.navigateOptions("next")
	              },
	              function($event) {
	                if (
	                  !("button" in $event) &&
	                  _vm._k($event.keyCode, "up", 38, $event.key, [
	                    "Up",
	                    "ArrowUp"
	                  ])
	                ) {
	                  return null
	                }
	                $event.stopPropagation()
	                $event.preventDefault()
	                _vm.navigateOptions("prev")
	              },
	              function($event) {
	                if (
	                  !("button" in $event) &&
	                  _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
	                ) {
	                  return null
	                }
	                $event.preventDefault()
	                return _vm.selectOption($event)
	              },
	              function($event) {
	                if (
	                  !("button" in $event) &&
	                  _vm._k($event.keyCode, "esc", 27, $event.key, [
	                    "Esc",
	                    "Escape"
	                  ])
	                ) {
	                  return null
	                }
	                $event.stopPropagation()
	                $event.preventDefault()
	                _vm.visible = false
	              },
	              function($event) {
	                if (
	                  !("button" in $event) &&
	                  _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")
	                ) {
	                  return null
	                }
	                _vm.visible = false
	              }
	            ],
	            paste: function($event) {
	              return _vm.debouncedOnInputChange($event)
	            },
	            mouseenter: function($event) {
	              _vm.inputHovering = true
	            },
	            mouseleave: function($event) {
	              _vm.inputHovering = false
	            }
	          },
	          model: {
	            value: _vm.selectedLabel,
	            callback: function($$v) {
	              _vm.selectedLabel = $$v
	            },
	            expression: "selectedLabel"
	          }
	        },
	        [
	          _vm.$slots.prefix
	            ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2)
	            : _vm._e(),
	          _c("template", { slot: "suffix" }, [
	            _c("i", {
	              directives: [
	                {
	                  name: "show",
	                  rawName: "v-show",
	                  value: !_vm.showClose,
	                  expression: "!showClose"
	                }
	              ],
	              class: [
	                "el-select__caret",
	                "el-input__icon",
	                "el-icon-" + _vm.iconClass
	              ]
	            }),
	            _vm.showClose
	              ? _c("i", {
	                  staticClass:
	                    "el-select__caret el-input__icon el-icon-circle-close",
	                  on: { click: _vm.handleClearClick }
	                })
	              : _vm._e()
	          ])
	        ],
	        2
	      ),
	      _c(
	        "transition",
	        {
	          attrs: { name: "el-zoom-in-top" },
	          on: {
	            "before-enter": _vm.handleMenuEnter,
	            "after-leave": _vm.doDestroy
	          }
	        },
	        [
	          _c(
	            "el-select-menu",
	            {
	              directives: [
	                {
	                  name: "show",
	                  rawName: "v-show",
	                  value: _vm.visible && _vm.emptyText !== false,
	                  expression: "visible && emptyText !== false"
	                }
	              ],
	              ref: "popper",
	              attrs: { "append-to-body": _vm.popperAppendToBody }
	            },
	            [
	              _c(
	                "el-scrollbar",
	                {
	                  directives: [
	                    {
	                      name: "show",
	                      rawName: "v-show",
	                      value: _vm.options.length > 0 && !_vm.loading,
	                      expression: "options.length > 0 && !loading"
	                    }
	                  ],
	                  ref: "scrollbar",
	                  class: {
	                    "is-empty":
	                      !_vm.allowCreate &&
	                      _vm.query &&
	                      _vm.filteredOptionsCount === 0
	                  },
	                  attrs: {
	                    tag: "ul",
	                    "wrap-class": "el-select-dropdown__wrap",
	                    "view-class": "el-select-dropdown__list"
	                  }
	                },
	                [
	                  _vm.showNewOption
	                    ? _c("el-option", {
	                        attrs: { value: _vm.query, created: "" }
	                      })
	                    : _vm._e(),
	                  _vm._t("default")
	                ],
	                2
	              ),
	              _vm.emptyText &&
	              (!_vm.allowCreate ||
	                _vm.loading ||
	                (_vm.allowCreate && _vm.options.length === 0))
	                ? [
	                    _vm.$slots.empty
	                      ? _vm._t("empty")
	                      : _c("p", { staticClass: "el-select-dropdown__empty" }, [
	                          _vm._v(
	                            "\n          " +
	                              _vm._s(_vm.emptyText) +
	                              "\n        "
	                          )
	                        ])
	                  ]
	                : _vm._e()
	            ],
	            2
	          )
	        ],
	        1
	      )
	    ],
	    1
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=template&id=0e4aade6&
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/focus"
	var focus_ = __webpack_require__(22);
	var focus_default = /*#__PURE__*/__webpack_require__.n(focus_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/locale"
	var locale_ = __webpack_require__(6);
	var locale_default = /*#__PURE__*/__webpack_require__.n(locale_);
	
	// EXTERNAL MODULE: external "element-ui/lib/input"
	var input_ = __webpack_require__(10);
	var input_default = /*#__PURE__*/__webpack_require__.n(input_);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select-dropdown.vue?vue&type=template&id=06828748&
	var select_dropdownvue_type_template_id_06828748_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      staticClass: "el-select-dropdown el-popper",
	      class: [{ "is-multiple": _vm.$parent.multiple }, _vm.popperClass],
	      style: { minWidth: _vm.minWidth }
	    },
	    [_vm._t("default")],
	    2
	  )
	}
	var select_dropdownvue_type_template_id_06828748_staticRenderFns = []
	select_dropdownvue_type_template_id_06828748_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue?vue&type=template&id=06828748&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/vue-popper"
	var vue_popper_ = __webpack_require__(5);
	var vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select-dropdown.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	/* harmony default export */ var select_dropdownvue_type_script_lang_js_ = ({
	  name: 'ElSelectDropdown',
	
	  componentName: 'ElSelectDropdown',
	
	  mixins: [vue_popper_default.a],
	
	  props: {
	    placement: {
	      default: 'bottom-start'
	    },
	
	    boundariesPadding: {
	      default: 0
	    },
	
	    popperOptions: {
	      default: function _default() {
	        return {
	          gpuAcceleration: false
	        };
	      }
	    },
	
	    visibleArrow: {
	      default: true
	    },
	
	    appendToBody: {
	      type: Boolean,
	      default: true
	    }
	  },
	
	  data: function data() {
	    return {
	      minWidth: ''
	    };
	  },
	
	
	  computed: {
	    popperClass: function popperClass() {
	      return this.$parent.popperClass;
	    }
	  },
	
	  watch: {
	    '$parent.inputWidth': function $parentInputWidth() {
	      this.minWidth = this.$parent.$el.getBoundingClientRect().width + 'px';
	    }
	  },
	
	  mounted: function mounted() {
	    var _this = this;
	
	    this.referenceElm = this.$parent.$refs.reference.$el;
	    this.$parent.popperElm = this.popperElm = this.$el;
	    this.$on('updatePopper', function () {
	      if (_this.$parent.visible) _this.updatePopper();
	    });
	    this.$on('destroyPopper', this.destroyPopper);
	  }
	});
	// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_select_dropdownvue_type_script_lang_js_ = (select_dropdownvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/select/src/select-dropdown.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_select_dropdownvue_type_script_lang_js_,
	  select_dropdownvue_type_template_id_06828748_render,
	  select_dropdownvue_type_template_id_06828748_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/select/src/select-dropdown.vue"
	/* harmony default export */ var select_dropdown = (component.exports);
	// EXTERNAL MODULE: ./packages/select/src/option.vue + 4 modules
	var src_option = __webpack_require__(33);
	
	// EXTERNAL MODULE: external "element-ui/lib/tag"
	var tag_ = __webpack_require__(37);
	var tag_default = /*#__PURE__*/__webpack_require__.n(tag_);
	
	// EXTERNAL MODULE: external "element-ui/lib/scrollbar"
	var scrollbar_ = __webpack_require__(14);
	var scrollbar_default = /*#__PURE__*/__webpack_require__.n(scrollbar_);
	
	// EXTERNAL MODULE: external "throttle-debounce/debounce"
	var debounce_ = __webpack_require__(17);
	var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/clickoutside"
	var clickoutside_ = __webpack_require__(12);
	var clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/resize-event"
	var resize_event_ = __webpack_require__(16);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/scroll-into-view"
	var scroll_into_view_ = __webpack_require__(31);
	var scroll_into_view_default = /*#__PURE__*/__webpack_require__.n(scroll_into_view_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./packages/select/src/navigation-mixin.js
	/* harmony default export */ var navigation_mixin = ({
	  data: function data() {
	    return {
	      hoverOption: -1
	    };
	  },
	
	
	  computed: {
	    optionsAllDisabled: function optionsAllDisabled() {
	      return this.options.filter(function (option) {
	        return option.visible;
	      }).every(function (option) {
	        return option.disabled;
	      });
	    }
	  },
	
	  watch: {
	    hoverIndex: function hoverIndex(val) {
	      var _this = this;
	
	      if (typeof val === 'number' && val > -1) {
	        this.hoverOption = this.options[val] || {};
	      }
	      this.options.forEach(function (option) {
	        option.hover = _this.hoverOption === option;
	      });
	    }
	  },
	
	  methods: {
	    navigateOptions: function navigateOptions(direction) {
	      var _this2 = this;
	
	      if (!this.visible) {
	        this.visible = true;
	        return;
	      }
	      if (this.options.length === 0 || this.filteredOptionsCount === 0) return;
	      if (!this.optionsAllDisabled) {
	        if (direction === 'next') {
	          this.hoverIndex++;
	          if (this.hoverIndex === this.options.length) {
	            this.hoverIndex = 0;
	          }
	        } else if (direction === 'prev') {
	          this.hoverIndex--;
	          if (this.hoverIndex < 0) {
	            this.hoverIndex = this.options.length - 1;
	          }
	        }
	        var option = this.options[this.hoverIndex];
	        if (option.disabled === true || option.groupDisabled === true || !option.visible) {
	          this.navigateOptions(direction);
	        }
	        this.$nextTick(function () {
	          return _this2.scrollToOption(_this2.hoverOption);
	        });
	      }
	    }
	  }
	});
	// EXTERNAL MODULE: external "element-ui/lib/utils/shared"
	var shared_ = __webpack_require__(21);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/* harmony default export */ var selectvue_type_script_lang_js_ = ({
	  mixins: [emitter_default.a, locale_default.a, focus_default()('reference'), navigation_mixin],
	
	  name: 'ElSelect',
	
	  componentName: 'ElSelect',
	
	  inject: {
	    elForm: {
	      default: ''
	    },
	
	    elFormItem: {
	      default: ''
	    }
	  },
	
	  provide: function provide() {
	    return {
	      'select': this
	    };
	  },
	
	
	  computed: {
	    _elFormItemSize: function _elFormItemSize() {
	      return (this.elFormItem || {}).elFormItemSize;
	    },
	    readonly: function readonly() {
	      return !this.filterable || this.multiple || !Object(util_["isIE"])() && !Object(util_["isEdge"])() && !this.visible;
	    },
	    showClose: function showClose() {
	      var hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== undefined && this.value !== null && this.value !== '';
	      var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
	      return criteria;
	    },
	    iconClass: function iconClass() {
	      return this.remote && this.filterable ? '' : this.visible ? 'arrow-up is-reverse' : 'arrow-up';
	    },
	    debounce: function debounce() {
	      return this.remote ? 300 : 0;
	    },
	    emptyText: function emptyText() {
	      if (this.loading) {
	        return this.loadingText || this.t('el.select.loading');
	      } else {
	        if (this.remote && this.query === '' && this.options.length === 0) return false;
	        if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {
	          return this.noMatchText || this.t('el.select.noMatch');
	        }
	        if (this.options.length === 0) {
	          return this.noDataText || this.t('el.select.noData');
	        }
	      }
	      return null;
	    },
	    showNewOption: function showNewOption() {
	      var _this = this;
	
	      var hasExistingOption = this.options.filter(function (option) {
	        return !option.created;
	      }).some(function (option) {
	        return option.currentLabel === _this.query;
	      });
	      return this.filterable && this.allowCreate && this.query !== '' && !hasExistingOption;
	    },
	    selectSize: function selectSize() {
	      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
	    },
	    selectDisabled: function selectDisabled() {
	      return this.disabled || (this.elForm || {}).disabled;
	    },
	    collapseTagSize: function collapseTagSize() {
	      return ['small', 'mini'].indexOf(this.selectSize) > -1 ? 'mini' : 'small';
	    },
	    propPlaceholder: function propPlaceholder() {
	      return typeof this.placeholder !== 'undefined' ? this.placeholder : this.t('el.select.placeholder');
	    }
	  },
	
	  components: {
	    ElInput: input_default.a,
	    ElSelectMenu: select_dropdown,
	    ElOption: src_option["a" /* default */],
	    ElTag: tag_default.a,
	    ElScrollbar: scrollbar_default.a
	  },
	
	  directives: { Clickoutside: clickoutside_default.a },
	
	  props: {
	    name: String,
	    id: String,
	    value: {
	      required: true
	    },
	    autocomplete: {
	      type: String,
	      default: 'off'
	    },
	    /** @Deprecated in next major version */
	    autoComplete: {
	      type: String,
	      validator: function validator(val) {
	         false && false;
	        return true;
	      }
	    },
	    automaticDropdown: Boolean,
	    size: String,
	    disabled: Boolean,
	    clearable: Boolean,
	    filterable: Boolean,
	    allowCreate: Boolean,
	    loading: Boolean,
	    popperClass: String,
	    remote: Boolean,
	    loadingText: String,
	    noMatchText: String,
	    noDataText: String,
	    remoteMethod: Function,
	    filterMethod: Function,
	    multiple: Boolean,
	    multipleLimit: {
	      type: Number,
	      default: 0
	    },
	    placeholder: {
	      type: String,
	      required: false
	    },
	    defaultFirstOption: Boolean,
	    reserveKeyword: Boolean,
	    valueKey: {
	      type: String,
	      default: 'value'
	    },
	    collapseTags: Boolean,
	    popperAppendToBody: {
	      type: Boolean,
	      default: true
	    }
	  },
	
	  data: function data() {
	    return {
	      options: [],
	      cachedOptions: [],
	      createdLabel: null,
	      createdSelected: false,
	      selected: this.multiple ? [] : {},
	      inputLength: 20,
	      inputWidth: 0,
	      initialInputHeight: 0,
	      cachedPlaceHolder: '',
	      optionsCount: 0,
	      filteredOptionsCount: 0,
	      visible: false,
	      softFocus: false,
	      selectedLabel: '',
	      hoverIndex: -1,
	      query: '',
	      previousQuery: null,
	      inputHovering: false,
	      currentPlaceholder: '',
	      menuVisibleOnFocus: false,
	      isOnComposition: false,
	      isSilentBlur: false
	    };
	  },
	
	
	  watch: {
	    selectDisabled: function selectDisabled() {
	      var _this2 = this;
	
	      this.$nextTick(function () {
	        _this2.resetInputHeight();
	      });
	    },
	    propPlaceholder: function propPlaceholder(val) {
	      this.cachedPlaceHolder = this.currentPlaceholder = val;
	    },
	    value: function value(val, oldVal) {
	      if (this.multiple) {
	        this.resetInputHeight();
	        if (val && val.length > 0 || this.$refs.input && this.query !== '') {
	          this.currentPlaceholder = '';
	        } else {
	          this.currentPlaceholder = this.cachedPlaceHolder;
	        }
	        if (this.filterable && !this.reserveKeyword) {
	          this.query = '';
	          this.handleQueryChange(this.query);
	        }
	      }
	      this.setSelected();
	      if (this.filterable && !this.multiple) {
	        this.inputLength = 20;
	      }
	      if (!Object(util_["valueEquals"])(val, oldVal)) {
	        this.dispatch('ElFormItem', 'el.form.change', val);
	      }
	    },
	    visible: function visible(val) {
	      var _this3 = this;
	
	      if (!val) {
	        this.broadcast('ElSelectDropdown', 'destroyPopper');
	        if (this.$refs.input) {
	          this.$refs.input.blur();
	        }
	        this.query = '';
	        this.previousQuery = null;
	        this.selectedLabel = '';
	        this.inputLength = 20;
	        this.menuVisibleOnFocus = false;
	        this.resetHoverIndex();
	        this.$nextTick(function () {
	          if (_this3.$refs.input && _this3.$refs.input.value === '' && _this3.selected.length === 0) {
	            _this3.currentPlaceholder = _this3.cachedPlaceHolder;
	          }
	        });
	        if (!this.multiple) {
	          if (this.selected) {
	            if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
	              this.selectedLabel = this.createdLabel;
	            } else {
	              this.selectedLabel = this.selected.currentLabel;
	            }
	            if (this.filterable) this.query = this.selectedLabel;
	          }
	
	          if (this.filterable) {
	            this.currentPlaceholder = this.cachedPlaceHolder;
	          }
	        }
	      } else {
	        this.broadcast('ElSelectDropdown', 'updatePopper');
	        if (this.filterable) {
	          this.query = this.remote ? '' : this.selectedLabel;
	          this.handleQueryChange(this.query);
	          if (this.multiple) {
	            this.$refs.input.focus();
	          } else {
	            if (!this.remote) {
	              this.broadcast('ElOption', 'queryChange', '');
	              this.broadcast('ElOptionGroup', 'queryChange');
	            }
	
	            if (this.selectedLabel) {
	              this.currentPlaceholder = this.selectedLabel;
	              this.selectedLabel = '';
	            }
	          }
	        }
	      }
	      this.$emit('visible-change', val);
	    },
	    options: function options() {
	      var _this4 = this;
	
	      if (this.$isServer) return;
	      this.$nextTick(function () {
	        _this4.broadcast('ElSelectDropdown', 'updatePopper');
	      });
	      if (this.multiple) {
	        this.resetInputHeight();
	      }
	      var inputs = this.$el.querySelectorAll('input');
	      if ([].indexOf.call(inputs, document.activeElement) === -1) {
	        this.setSelected();
	      }
	      if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
	        this.checkDefaultFirstOption();
	      }
	    }
	  },
	
	  methods: {
	    handleComposition: function handleComposition(event) {
	      var _this5 = this;
	
	      var text = event.target.value;
	      if (event.type === 'compositionend') {
	        this.isOnComposition = false;
	        this.$nextTick(function (_) {
	          return _this5.handleQueryChange(text);
	        });
	      } else {
	        var lastCharacter = text[text.length - 1] || '';
	        this.isOnComposition = !Object(shared_["isKorean"])(lastCharacter);
	      }
	    },
	    handleQueryChange: function handleQueryChange(val) {
	      var _this6 = this;
	
	      if (this.previousQuery === val || this.isOnComposition) return;
	      if (this.previousQuery === null && (typeof this.filterMethod === 'function' || typeof this.remoteMethod === 'function')) {
	        this.previousQuery = val;
	        return;
	      }
	      this.previousQuery = val;
	      this.$nextTick(function () {
	        if (_this6.visible) _this6.broadcast('ElSelectDropdown', 'updatePopper');
	      });
	      this.hoverIndex = -1;
	      if (this.multiple && this.filterable) {
	        this.$nextTick(function () {
	          var length = _this6.$refs.input.value.length * 15 + 20;
	          _this6.inputLength = _this6.collapseTags ? Math.min(50, length) : length;
	          _this6.managePlaceholder();
	          _this6.resetInputHeight();
	        });
	      }
	      if (this.remote && typeof this.remoteMethod === 'function') {
	        this.hoverIndex = -1;
	        this.remoteMethod(val);
	      } else if (typeof this.filterMethod === 'function') {
	        this.filterMethod(val);
	        this.broadcast('ElOptionGroup', 'queryChange');
	      } else {
	        this.filteredOptionsCount = this.optionsCount;
	        this.broadcast('ElOption', 'queryChange', val);
	        this.broadcast('ElOptionGroup', 'queryChange');
	      }
	      if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
	        this.checkDefaultFirstOption();
	      }
	    },
	    scrollToOption: function scrollToOption(option) {
	      var target = Array.isArray(option) && option[0] ? option[0].$el : option.$el;
	      if (this.$refs.popper && target) {
	        var menu = this.$refs.popper.$el.querySelector('.el-select-dropdown__wrap');
	        scroll_into_view_default()(menu, target);
	      }
	      this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();
	    },
	    handleMenuEnter: function handleMenuEnter() {
	      var _this7 = this;
	
	      this.$nextTick(function () {
	        return _this7.scrollToOption(_this7.selected);
	      });
	    },
	    emitChange: function emitChange(val) {
	      if (!Object(util_["valueEquals"])(this.value, val)) {
	        this.$emit('change', val);
	      }
	    },
	    getOption: function getOption(value) {
	      var option = void 0;
	      var isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';
	      var isNull = Object.prototype.toString.call(value).toLowerCase() === '[object null]';
	      var isUndefined = Object.prototype.toString.call(value).toLowerCase() === '[object undefined]';
	
	      for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
	        var cachedOption = this.cachedOptions[i];
	        var isEqual = isObject ? Object(util_["getValueByPath"])(cachedOption.value, this.valueKey) === Object(util_["getValueByPath"])(value, this.valueKey) : cachedOption.value === value;
	        if (isEqual) {
	          option = cachedOption;
	          break;
	        }
	      }
	      if (option) return option;
	      var label = !isObject && !isNull && !isUndefined ? value : '';
	      var newOption = {
	        value: value,
	        currentLabel: label
	      };
	      if (this.multiple) {
	        newOption.hitState = false;
	      }
	      return newOption;
	    },
	    setSelected: function setSelected() {
	      var _this8 = this;
	
	      if (!this.multiple) {
	        var option = this.getOption(this.value);
	        if (option.created) {
	          this.createdLabel = option.currentLabel;
	          this.createdSelected = true;
	        } else {
	          this.createdSelected = false;
	        }
	        this.selectedLabel = option.currentLabel;
	        this.selected = option;
	        if (this.filterable) this.query = this.selectedLabel;
	        return;
	      }
	      var result = [];
	      if (Array.isArray(this.value)) {
	        this.value.forEach(function (value) {
	          result.push(_this8.getOption(value));
	        });
	      }
	      this.selected = result;
	      this.$nextTick(function () {
	        _this8.resetInputHeight();
	      });
	    },
	    handleFocus: function handleFocus(event) {
	      if (!this.softFocus) {
	        if (this.automaticDropdown || this.filterable) {
	          this.visible = true;
	          if (this.filterable) {
	            this.menuVisibleOnFocus = true;
	          }
	        }
	        this.$emit('focus', event);
	      } else {
	        this.softFocus = false;
	      }
	    },
	    blur: function blur() {
	      this.visible = false;
	      this.$refs.reference.blur();
	    },
	    handleBlur: function handleBlur(event) {
	      var _this9 = this;
	
	      setTimeout(function () {
	        if (_this9.isSilentBlur) {
	          _this9.isSilentBlur = false;
	        } else {
	          _this9.$emit('blur', event);
	        }
	      }, 50);
	      this.softFocus = false;
	    },
	    handleClearClick: function handleClearClick(event) {
	      this.deleteSelected(event);
	    },
	    doDestroy: function doDestroy() {
	      this.$refs.popper && this.$refs.popper.doDestroy();
	    },
	    handleClose: function handleClose() {
	      this.visible = false;
	    },
	    toggleLastOptionHitState: function toggleLastOptionHitState(hit) {
	      if (!Array.isArray(this.selected)) return;
	      var option = this.selected[this.selected.length - 1];
	      if (!option) return;
	
	      if (hit === true || hit === false) {
	        option.hitState = hit;
	        return hit;
	      }
	
	      option.hitState = !option.hitState;
	      return option.hitState;
	    },
	    deletePrevTag: function deletePrevTag(e) {
	      if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
	        var value = this.value.slice();
	        value.pop();
	        this.$emit('input', value);
	        this.emitChange(value);
	      }
	    },
	    managePlaceholder: function managePlaceholder() {
	      if (this.currentPlaceholder !== '') {
	        this.currentPlaceholder = this.$refs.input.value ? '' : this.cachedPlaceHolder;
	      }
	    },
	    resetInputState: function resetInputState(e) {
	      if (e.keyCode !== 8) this.toggleLastOptionHitState(false);
	      this.inputLength = this.$refs.input.value.length * 15 + 20;
	      this.resetInputHeight();
	    },
	    resetInputHeight: function resetInputHeight() {
	      var _this10 = this;
	
	      if (this.collapseTags && !this.filterable) return;
	      this.$nextTick(function () {
	        if (!_this10.$refs.reference) return;
	        var inputChildNodes = _this10.$refs.reference.$el.childNodes;
	        var input = [].filter.call(inputChildNodes, function (item) {
	          return item.tagName === 'INPUT';
	        })[0];
	        var tags = _this10.$refs.tags;
	        var sizeInMap = _this10.initialInputHeight || 40;
	        input.style.height = _this10.selected.length === 0 ? sizeInMap + 'px' : Math.max(tags ? tags.clientHeight + (tags.clientHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + 'px';
	        if (_this10.visible && _this10.emptyText !== false) {
	          _this10.broadcast('ElSelectDropdown', 'updatePopper');
	        }
	      });
	    },
	    resetHoverIndex: function resetHoverIndex() {
	      var _this11 = this;
	
	      setTimeout(function () {
	        if (!_this11.multiple) {
	          _this11.hoverIndex = _this11.options.indexOf(_this11.selected);
	        } else {
	          if (_this11.selected.length > 0) {
	            _this11.hoverIndex = Math.min.apply(null, _this11.selected.map(function (item) {
	              return _this11.options.indexOf(item);
	            }));
	          } else {
	            _this11.hoverIndex = -1;
	          }
	        }
	      }, 300);
	    },
	    handleOptionSelect: function handleOptionSelect(option, byClick) {
	      var _this12 = this;
	
	      if (this.multiple) {
	        var value = (this.value || []).slice();
	        var optionIndex = this.getValueIndex(value, option.value);
	        if (optionIndex > -1) {
	          value.splice(optionIndex, 1);
	        } else if (this.multipleLimit <= 0 || value.length < this.multipleLimit) {
	          value.push(option.value);
	        }
	        this.$emit('input', value);
	        this.emitChange(value);
	        if (option.created) {
	          this.query = '';
	          this.handleQueryChange('');
	          this.inputLength = 20;
	        }
	        if (this.filterable) this.$refs.input.focus();
	      } else {
	        this.$emit('input', option.value);
	        this.emitChange(option.value);
	        this.visible = false;
	      }
	      this.isSilentBlur = byClick;
	      this.setSoftFocus();
	      if (this.visible) return;
	      this.$nextTick(function () {
	        _this12.scrollToOption(option);
	      });
	    },
	    setSoftFocus: function setSoftFocus() {
	      this.softFocus = true;
	      var input = this.$refs.input || this.$refs.reference;
	      if (input) {
	        input.focus();
	      }
	    },
	    getValueIndex: function getValueIndex() {
	      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	      var value = arguments[1];
	
	      var isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';
	      if (!isObject) {
	        return arr.indexOf(value);
	      } else {
	        var valueKey = this.valueKey;
	        var index = -1;
	        arr.some(function (item, i) {
	          if (Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(value, valueKey)) {
	            index = i;
	            return true;
	          }
	          return false;
	        });
	        return index;
	      }
	    },
	    toggleMenu: function toggleMenu() {
	      if (!this.selectDisabled) {
	        if (this.menuVisibleOnFocus) {
	          this.menuVisibleOnFocus = false;
	        } else {
	          this.visible = !this.visible;
	        }
	        if (this.visible) {
	          (this.$refs.input || this.$refs.reference).focus();
	        }
	      }
	    },
	    selectOption: function selectOption() {
	      if (!this.visible) {
	        this.toggleMenu();
	      } else {
	        if (this.options[this.hoverIndex]) {
	          this.handleOptionSelect(this.options[this.hoverIndex]);
	        }
	      }
	    },
	    deleteSelected: function deleteSelected(event) {
	      event.stopPropagation();
	      var value = this.multiple ? [] : '';
	      this.$emit('input', value);
	      this.emitChange(value);
	      this.visible = false;
	      this.$emit('clear');
	    },
	    deleteTag: function deleteTag(event, tag) {
	      var index = this.selected.indexOf(tag);
	      if (index > -1 && !this.selectDisabled) {
	        var value = this.value.slice();
	        value.splice(index, 1);
	        this.$emit('input', value);
	        this.emitChange(value);
	        this.$emit('remove-tag', tag.value);
	      }
	      event.stopPropagation();
	    },
	    onInputChange: function onInputChange() {
	      if (this.filterable && this.query !== this.selectedLabel) {
	        this.query = this.selectedLabel;
	        this.handleQueryChange(this.query);
	      }
	    },
	    onOptionDestroy: function onOptionDestroy(index) {
	      if (index > -1) {
	        this.optionsCount--;
	        this.filteredOptionsCount--;
	        this.options.splice(index, 1);
	      }
	    },
	    resetInputWidth: function resetInputWidth() {
	      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
	    },
	    handleResize: function handleResize() {
	      this.resetInputWidth();
	      if (this.multiple) this.resetInputHeight();
	    },
	    checkDefaultFirstOption: function checkDefaultFirstOption() {
	      this.hoverIndex = -1;
	      // highlight the created option
	      var hasCreated = false;
	      for (var i = this.options.length - 1; i >= 0; i--) {
	        if (this.options[i].created) {
	          hasCreated = true;
	          this.hoverIndex = i;
	          break;
	        }
	      }
	      if (hasCreated) return;
	      for (var _i = 0; _i !== this.options.length; ++_i) {
	        var option = this.options[_i];
	        if (this.query) {
	          // highlight first options that passes the filter
	          if (!option.disabled && !option.groupDisabled && option.visible) {
	            this.hoverIndex = _i;
	            break;
	          }
	        } else {
	          // highlight currently selected option
	          if (option.itemSelected) {
	            this.hoverIndex = _i;
	            break;
	          }
	        }
	      }
	    },
	    getValueKey: function getValueKey(item) {
	      if (Object.prototype.toString.call(item.value).toLowerCase() !== '[object object]') {
	        return item.value;
	      } else {
	        return Object(util_["getValueByPath"])(item.value, this.valueKey);
	      }
	    }
	  },
	
	  created: function created() {
	    var _this13 = this;
	
	    this.cachedPlaceHolder = this.currentPlaceholder = this.propPlaceholder;
	    if (this.multiple && !Array.isArray(this.value)) {
	      this.$emit('input', []);
	    }
	    if (!this.multiple && Array.isArray(this.value)) {
	      this.$emit('input', '');
	    }
	
	    this.debouncedOnInputChange = debounce_default()(this.debounce, function () {
	      _this13.onInputChange();
	    });
	
	    this.debouncedQueryChange = debounce_default()(this.debounce, function (e) {
	      _this13.handleQueryChange(e.target.value);
	    });
	
	    this.$on('handleOptionClick', this.handleOptionSelect);
	    this.$on('setSelected', this.setSelected);
	  },
	  mounted: function mounted() {
	    var _this14 = this;
	
	    if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
	      this.currentPlaceholder = '';
	    }
	    Object(resize_event_["addResizeListener"])(this.$el, this.handleResize);
	
	    var reference = this.$refs.reference;
	    if (reference && reference.$el) {
	      var sizeMap = {
	        medium: 36,
	        small: 32,
	        mini: 28
	      };
	      var input = reference.$el.querySelector('input');
	      this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];
	    }
	    if (this.remote && this.multiple) {
	      this.resetInputHeight();
	    }
	    this.$nextTick(function () {
	      if (reference && reference.$el) {
	        _this14.inputWidth = reference.$el.getBoundingClientRect().width;
	      }
	    });
	    this.setSelected();
	  },
	  beforeDestroy: function beforeDestroy() {
	    if (this.$el && this.handleResize) Object(resize_event_["removeResizeListener"])(this.$el, this.handleResize);
	  }
	});
	// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_selectvue_type_script_lang_js_ = (selectvue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/select/src/select.vue
	
	
	
	
	
	/* normalize component */
	
	var select_component = Object(componentNormalizer["a" /* default */])(
	  src_selectvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var select_api; }
	select_component.options.__file = "packages/select/src/select.vue"
	/* harmony default export */ var src_select = (select_component.exports);
	// CONCATENATED MODULE: ./packages/select/index.js
	
	
	/* istanbul ignore next */
	src_select.install = function (Vue) {
	  Vue.component(src_select.name, src_select);
	};
	
	/* harmony default export */ var packages_select = __webpack_exports__["default"] = (src_select);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.i18n = exports.use = exports.t = undefined;
	
	var _zhCN = __webpack_require__(484);
	
	var _zhCN2 = _interopRequireDefault(_zhCN);
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _deepmerge = __webpack_require__(479);
	
	var _deepmerge2 = _interopRequireDefault(_deepmerge);
	
	var _format = __webpack_require__(483);
	
	var _format2 = _interopRequireDefault(_format);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var format = (0, _format2.default)(_vue2.default);
	var lang = _zhCN2.default;
	var merged = false;
	var i18nHandler = function i18nHandler() {
	  var vuei18n = Object.getPrototypeOf(this || _vue2.default).$t;
	  if (typeof vuei18n === 'function' && !!_vue2.default.locale) {
	    if (!merged) {
	      merged = true;
	      _vue2.default.locale(_vue2.default.config.lang, (0, _deepmerge2.default)(lang, _vue2.default.locale(_vue2.default.config.lang) || {}, { clone: true }));
	    }
	    return vuei18n.apply(this, arguments);
	  }
	};
	
	var t = exports.t = function t(path, options) {
	  var value = i18nHandler.apply(this, arguments);
	  if (value !== null && value !== undefined) return value;
	
	  var array = path.split('.');
	  var current = lang;
	
	  for (var i = 0, j = array.length; i < j; i++) {
	    var property = array[i];
	    value = current[property];
	    if (i === j - 1) return format(value, options);
	    if (!value) return '';
	    current = value;
	  }
	  return '';
	};
	
	var use = exports.use = function use(l) {
	  lang = l || lang;
	};
	
	var i18n = exports.i18n = function i18n(fn) {
	  i18nHandler = fn || i18nHandler;
	};
	
	exports.default = { use: use, t: t, i18n: i18n };

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.warning = undefined;
	
	var _extends2 = __webpack_require__(161);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _typeof2 = __webpack_require__(69);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	exports.format = format;
	exports.isEmptyValue = isEmptyValue;
	exports.isEmptyObject = isEmptyObject;
	exports.asyncMap = asyncMap;
	exports.complementError = complementError;
	exports.deepMerge = deepMerge;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var formatRegExp = /%[sdj%]/g;
	
	var warning = exports.warning = function warning() {};
	
	// don't print warning message when in production env or node runtime
	if (false) {
	  exports.warning = warning = function warning(type, errors) {
	    if (typeof console !== 'undefined' && console.warn) {
	      if (errors.every(function (e) {
	        return typeof e === 'string';
	      })) {
	        console.warn(type, errors);
	      }
	    }
	  };
	}
	
	function format() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  var i = 1;
	  var f = args[0];
	  var len = args.length;
	  if (typeof f === 'function') {
	    return f.apply(null, args.slice(1));
	  }
	  if (typeof f === 'string') {
	    var str = String(f).replace(formatRegExp, function (x) {
	      if (x === '%%') {
	        return '%';
	      }
	      if (i >= len) {
	        return x;
	      }
	      switch (x) {
	        case '%s':
	          return String(args[i++]);
	        case '%d':
	          return Number(args[i++]);
	        case '%j':
	          try {
	            return JSON.stringify(args[i++]);
	          } catch (_) {
	            return '[Circular]';
	          }
	          break;
	        default:
	          return x;
	      }
	    });
	    for (var arg = args[i]; i < len; arg = args[++i]) {
	      str += ' ' + arg;
	    }
	    return str;
	  }
	  return f;
	}
	
	function isNativeStringType(type) {
	  return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'pattern';
	}
	
	function isEmptyValue(value, type) {
	  if (value === undefined || value === null) {
	    return true;
	  }
	  if (type === 'array' && Array.isArray(value) && !value.length) {
	    return true;
	  }
	  if (isNativeStringType(type) && typeof value === 'string' && !value) {
	    return true;
	  }
	  return false;
	}
	
	function isEmptyObject(obj) {
	  return Object.keys(obj).length === 0;
	}
	
	function asyncParallelArray(arr, func, callback) {
	  var results = [];
	  var total = 0;
	  var arrLength = arr.length;
	
	  function count(errors) {
	    results.push.apply(results, errors);
	    total++;
	    if (total === arrLength) {
	      callback(results);
	    }
	  }
	
	  arr.forEach(function (a) {
	    func(a, count);
	  });
	}
	
	function asyncSerialArray(arr, func, callback) {
	  var index = 0;
	  var arrLength = arr.length;
	
	  function next(errors) {
	    if (errors && errors.length) {
	      callback(errors);
	      return;
	    }
	    var original = index;
	    index = index + 1;
	    if (original < arrLength) {
	      func(arr[original], next);
	    } else {
	      callback([]);
	    }
	  }
	
	  next([]);
	}
	
	function flattenObjArr(objArr) {
	  var ret = [];
	  Object.keys(objArr).forEach(function (k) {
	    ret.push.apply(ret, objArr[k]);
	  });
	  return ret;
	}
	
	function asyncMap(objArr, option, func, callback) {
	  if (option.first) {
	    var flattenArr = flattenObjArr(objArr);
	    return asyncSerialArray(flattenArr, func, callback);
	  }
	  var firstFields = option.firstFields || [];
	  if (firstFields === true) {
	    firstFields = Object.keys(objArr);
	  }
	  var objArrKeys = Object.keys(objArr);
	  var objArrLength = objArrKeys.length;
	  var total = 0;
	  var results = [];
	  var next = function next(errors) {
	    results.push.apply(results, errors);
	    total++;
	    if (total === objArrLength) {
	      callback(results);
	    }
	  };
	  objArrKeys.forEach(function (key) {
	    var arr = objArr[key];
	    if (firstFields.indexOf(key) !== -1) {
	      asyncSerialArray(arr, func, next);
	    } else {
	      asyncParallelArray(arr, func, next);
	    }
	  });
	}
	
	function complementError(rule) {
	  return function (oe) {
	    if (oe && oe.message) {
	      oe.field = oe.field || rule.fullField;
	      return oe;
	    }
	    return {
	      message: oe,
	      field: oe.field || rule.fullField
	    };
	  };
	}
	
	function deepMerge(target, source) {
	  if (source) {
	    for (var s in source) {
	      if (source.hasOwnProperty(s)) {
	        var value = source[s];
	        if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3['default'])(value)) === 'object' && (0, _typeof3['default'])(target[s]) === 'object') {
	          target[s] = (0, _extends3['default'])({}, target[s], value);
	        } else {
	          target[s] = value;
	        }
	      }
	    }
	  }
	  return target;
	}

/***/ }),
/* 19 */,
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.isEmpty = exports.isEqual = exports.arrayEquals = exports.looseEqual = exports.capitalize = exports.kebabCase = exports.autoprefixer = exports.isFirefox = exports.isEdge = exports.isIE = exports.coerceTruthyValueToArray = exports.arrayFind = exports.arrayFindIndex = exports.escapeRegexpString = exports.valueEquals = exports.generateId = exports.getValueByPath = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.noop = noop;
	exports.hasOwn = hasOwn;
	exports.toObject = toObject;
	exports.getPropByPath = getPropByPath;
	exports.rafThrottle = rafThrottle;
	exports.objToArray = objToArray;
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _types = __webpack_require__(494);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function noop() {};
	
	function hasOwn(obj, key) {
	  return hasOwnProperty.call(obj, key);
	};
	
	function extend(to, _from) {
	  for (var key in _from) {
	    to[key] = _from[key];
	  }
	  return to;
	};
	
	function toObject(arr) {
	  var res = {};
	  for (var i = 0; i < arr.length; i++) {
	    if (arr[i]) {
	      extend(res, arr[i]);
	    }
	  }
	  return res;
	};
	
	var getValueByPath = exports.getValueByPath = function getValueByPath(object, prop) {
	  prop = prop || '';
	  var paths = prop.split('.');
	  var current = object;
	  var result = null;
	  for (var i = 0, j = paths.length; i < j; i++) {
	    var path = paths[i];
	    if (!current) break;
	
	    if (i === j - 1) {
	      result = current[path];
	      break;
	    }
	    current = current[path];
	  }
	  return result;
	};
	
	function getPropByPath(obj, path, strict) {
	  var tempObj = obj;
	  path = path.replace(/\[(\w+)\]/g, '.$1');
	  path = path.replace(/^\./, '');
	
	  var keyArr = path.split('.');
	  var i = 0;
	  for (var len = keyArr.length; i < len - 1; ++i) {
	    if (!tempObj && !strict) break;
	    var key = keyArr[i];
	    if (key in tempObj) {
	      tempObj = tempObj[key];
	    } else {
	      if (strict) {
	        throw new Error('please transfer a valid prop path to form item!');
	      }
	      break;
	    }
	  }
	  return {
	    o: tempObj,
	    k: keyArr[i],
	    v: tempObj ? tempObj[keyArr[i]] : null
	  };
	};
	
	var generateId = exports.generateId = function generateId() {
	  return Math.floor(Math.random() * 10000);
	};
	
	var valueEquals = exports.valueEquals = function valueEquals(a, b) {
	  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
	  if (a === b) return true;
	  if (!(a instanceof Array)) return false;
	  if (!(b instanceof Array)) return false;
	  if (a.length !== b.length) return false;
	  for (var i = 0; i !== a.length; ++i) {
	    if (a[i] !== b[i]) return false;
	  }
	  return true;
	};
	
	var escapeRegexpString = exports.escapeRegexpString = function escapeRegexpString() {
	  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
	};
	
	// TODO: use native Array.find, Array.findIndex when IE support is dropped
	var arrayFindIndex = exports.arrayFindIndex = function arrayFindIndex(arr, pred) {
	  for (var i = 0; i !== arr.length; ++i) {
	    if (pred(arr[i])) {
	      return i;
	    }
	  }
	  return -1;
	};
	
	var arrayFind = exports.arrayFind = function arrayFind(arr, pred) {
	  var idx = arrayFindIndex(arr, pred);
	  return idx !== -1 ? arr[idx] : undefined;
	};
	
	// coerce truthy value to array
	var coerceTruthyValueToArray = exports.coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
	  if (Array.isArray(val)) {
	    return val;
	  } else if (val) {
	    return [val];
	  } else {
	    return [];
	  }
	};
	
	var isIE = exports.isIE = function isIE() {
	  return !_vue2.default.prototype.$isServer && !isNaN(Number(document.documentMode));
	};
	
	var isEdge = exports.isEdge = function isEdge() {
	  return !_vue2.default.prototype.$isServer && navigator.userAgent.indexOf('Edge') > -1;
	};
	
	var isFirefox = exports.isFirefox = function isFirefox() {
	  return !_vue2.default.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
	};
	
	var autoprefixer = exports.autoprefixer = function autoprefixer(style) {
	  if ((typeof style === 'undefined' ? 'undefined' : _typeof(style)) !== 'object') return style;
	  var rules = ['transform', 'transition', 'animation'];
	  var prefixes = ['ms-', 'webkit-'];
	  rules.forEach(function (rule) {
	    var value = style[rule];
	    if (rule && value) {
	      prefixes.forEach(function (prefix) {
	        style[prefix + rule] = value;
	      });
	    }
	  });
	  return style;
	};
	
	var kebabCase = exports.kebabCase = function kebabCase(str) {
	  var hyphenateRE = /([^-])([A-Z])/g;
	  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
	};
	
	var capitalize = exports.capitalize = function capitalize(str) {
	  if (!(0, _types.isString)(str)) return str;
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};
	
	var looseEqual = exports.looseEqual = function looseEqual(a, b) {
	  var isObjectA = (0, _types.isObject)(a);
	  var isObjectB = (0, _types.isObject)(b);
	  if (isObjectA && isObjectB) {
	    return JSON.stringify(a) === JSON.stringify(b);
	  } else if (!isObjectA && !isObjectB) {
	    return String(a) === String(b);
	  } else {
	    return false;
	  }
	};
	
	var arrayEquals = exports.arrayEquals = function arrayEquals(arrayA, arrayB) {
	  arrayA = arrayA || [];
	  arrayB = arrayB || [];
	
	  if (arrayA.length !== arrayB.length) {
	    return false;
	  }
	
	  for (var i = 0; i < arrayA.length; i++) {
	    if (!looseEqual(arrayA[i], arrayB[i])) {
	      return false;
	    }
	  }
	
	  return true;
	};
	
	var isEqual = exports.isEqual = function isEqual(value1, value2) {
	  if (Array.isArray(value1) && Array.isArray(value2)) {
	    return arrayEquals(value1, value2);
	  }
	  return looseEqual(value1, value2);
	};
	
	var isEmpty = exports.isEmpty = function isEmpty(val) {
	  // null or undefined
	  if (val == null) return true;
	
	  if (typeof val === 'boolean') return false;
	
	  if (typeof val === 'number') return !val;
	
	  if (val instanceof Error) return val.message === '';
	
	  switch (Object.prototype.toString.call(val)) {
	    // String or Array
	    case '[object String]':
	    case '[object Array]':
	      return !val.length;
	
	    // Map or Set or File
	    case '[object File]':
	    case '[object Map]':
	    case '[object Set]':
	      {
	        return !val.size;
	      }
	    // Plain Object
	    case '[object Object]':
	      {
	        return !Object.keys(val).length;
	      }
	  }
	
	  return false;
	};
	
	function rafThrottle(fn) {
	  var locked = false;
	  return function () {
	    var _this = this;
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    if (locked) return;
	    locked = true;
	    window.requestAnimationFrame(function (_) {
	      fn.apply(_this, args);
	      locked = false;
	    });
	  };
	}
	
	function objToArray(obj) {
	  if (Array.isArray(obj)) {
	    return obj;
	  }
	  return isEmpty(obj) ? [] : [obj];
	}

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 76);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 11:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(93);
	
	/***/ }),
	
	/***/ 21:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(179);
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 76:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/input/src/input.vue?vue&type=template&id=343dd774&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      class: [
	        _vm.type === "textarea" ? "el-textarea" : "el-input",
	        _vm.inputSize ? "el-input--" + _vm.inputSize : "",
	        {
	          "is-disabled": _vm.inputDisabled,
	          "is-exceed": _vm.inputExceed,
	          "el-input-group": _vm.$slots.prepend || _vm.$slots.append,
	          "el-input-group--append": _vm.$slots.append,
	          "el-input-group--prepend": _vm.$slots.prepend,
	          "el-input--prefix": _vm.$slots.prefix || _vm.prefixIcon,
	          "el-input--suffix":
	            _vm.$slots.suffix ||
	            _vm.suffixIcon ||
	            _vm.clearable ||
	            _vm.showPassword
	        }
	      ],
	      on: {
	        mouseenter: function($event) {
	          _vm.hovering = true
	        },
	        mouseleave: function($event) {
	          _vm.hovering = false
	        }
	      }
	    },
	    [
	      _vm.type !== "textarea"
	        ? [
	            _vm.$slots.prepend
	              ? _c(
	                  "div",
	                  { staticClass: "el-input-group__prepend" },
	                  [_vm._t("prepend")],
	                  2
	                )
	              : _vm._e(),
	            _vm.type !== "textarea"
	              ? _c(
	                  "input",
	                  _vm._b(
	                    {
	                      ref: "input",
	                      staticClass: "el-input__inner",
	                      attrs: {
	                        tabindex: _vm.tabindex,
	                        type: _vm.showPassword
	                          ? _vm.passwordVisible
	                            ? "text"
	                            : "password"
	                          : _vm.type,
	                        disabled: _vm.inputDisabled,
	                        readonly: _vm.readonly,
	                        autocomplete: _vm.autoComplete || _vm.autocomplete,
	                        "aria-label": _vm.label
	                      },
	                      on: {
	                        compositionstart: _vm.handleCompositionStart,
	                        compositionupdate: _vm.handleCompositionUpdate,
	                        compositionend: _vm.handleCompositionEnd,
	                        input: _vm.handleInput,
	                        focus: _vm.handleFocus,
	                        blur: _vm.handleBlur,
	                        change: _vm.handleChange
	                      }
	                    },
	                    "input",
	                    _vm.$attrs,
	                    false
	                  )
	                )
	              : _vm._e(),
	            _vm.$slots.prefix || _vm.prefixIcon
	              ? _c(
	                  "span",
	                  { staticClass: "el-input__prefix" },
	                  [
	                    _vm._t("prefix"),
	                    _vm.prefixIcon
	                      ? _c("i", {
	                          staticClass: "el-input__icon",
	                          class: _vm.prefixIcon
	                        })
	                      : _vm._e()
	                  ],
	                  2
	                )
	              : _vm._e(),
	            _vm.getSuffixVisible()
	              ? _c("span", { staticClass: "el-input__suffix" }, [
	                  _c(
	                    "span",
	                    { staticClass: "el-input__suffix-inner" },
	                    [
	                      !_vm.showClear ||
	                      !_vm.showPwdVisible ||
	                      !_vm.isWordLimitVisible
	                        ? [
	                            _vm._t("suffix"),
	                            _vm.suffixIcon
	                              ? _c("i", {
	                                  staticClass: "el-input__icon",
	                                  class: _vm.suffixIcon
	                                })
	                              : _vm._e()
	                          ]
	                        : _vm._e(),
	                      _vm.showClear
	                        ? _c("i", {
	                            staticClass:
	                              "el-input__icon el-icon-circle-close el-input__clear",
	                            on: {
	                              mousedown: function($event) {
	                                $event.preventDefault()
	                              },
	                              click: _vm.clear
	                            }
	                          })
	                        : _vm._e(),
	                      _vm.showPwdVisible
	                        ? _c("i", {
	                            staticClass:
	                              "el-input__icon el-icon-view el-input__clear",
	                            on: { click: _vm.handlePasswordVisible }
	                          })
	                        : _vm._e(),
	                      _vm.isWordLimitVisible
	                        ? _c("span", { staticClass: "el-input__count" }, [
	                            _c(
	                              "span",
	                              { staticClass: "el-input__count-inner" },
	                              [
	                                _vm._v(
	                                  "\n            " +
	                                    _vm._s(_vm.textLength) +
	                                    "/" +
	                                    _vm._s(_vm.upperLimit) +
	                                    "\n          "
	                                )
	                              ]
	                            )
	                          ])
	                        : _vm._e()
	                    ],
	                    2
	                  ),
	                  _vm.validateState
	                    ? _c("i", {
	                        staticClass: "el-input__icon",
	                        class: ["el-input__validateIcon", _vm.validateIcon]
	                      })
	                    : _vm._e()
	                ])
	              : _vm._e(),
	            _vm.$slots.append
	              ? _c(
	                  "div",
	                  { staticClass: "el-input-group__append" },
	                  [_vm._t("append")],
	                  2
	                )
	              : _vm._e()
	          ]
	        : _c(
	            "textarea",
	            _vm._b(
	              {
	                ref: "textarea",
	                staticClass: "el-textarea__inner",
	                style: _vm.textareaStyle,
	                attrs: {
	                  tabindex: _vm.tabindex,
	                  disabled: _vm.inputDisabled,
	                  readonly: _vm.readonly,
	                  autocomplete: _vm.autoComplete || _vm.autocomplete,
	                  "aria-label": _vm.label
	                },
	                on: {
	                  compositionstart: _vm.handleCompositionStart,
	                  compositionupdate: _vm.handleCompositionUpdate,
	                  compositionend: _vm.handleCompositionEnd,
	                  input: _vm.handleInput,
	                  focus: _vm.handleFocus,
	                  blur: _vm.handleBlur,
	                  change: _vm.handleChange
	                }
	              },
	              "textarea",
	              _vm.$attrs,
	              false
	            )
	          ),
	      _vm.isWordLimitVisible && _vm.type === "textarea"
	        ? _c("span", { staticClass: "el-input__count" }, [
	            _vm._v(_vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit))
	          ])
	        : _vm._e()
	    ],
	    2
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/input/src/input.vue?vue&type=template&id=343dd774&
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/migrating"
	var migrating_ = __webpack_require__(11);
	var migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);
	
	// CONCATENATED MODULE: ./packages/input/src/calcTextareaHeight.js
	var hiddenTextarea = void 0;
	
	var HIDDEN_STYLE = '\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n';
	
	var CONTEXT_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];
	
	function calculateNodeStyling(targetElement) {
	  var style = window.getComputedStyle(targetElement);
	
	  var boxSizing = style.getPropertyValue('box-sizing');
	
	  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));
	
	  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));
	
	  var contextStyle = CONTEXT_STYLE.map(function (name) {
	    return name + ':' + style.getPropertyValue(name);
	  }).join(';');
	
	  return { contextStyle: contextStyle, paddingSize: paddingSize, borderSize: borderSize, boxSizing: boxSizing };
	}
	
	function calcTextareaHeight(targetElement) {
	  var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	
	  if (!hiddenTextarea) {
	    hiddenTextarea = document.createElement('textarea');
	    document.body.appendChild(hiddenTextarea);
	  }
	
	  var _calculateNodeStyling = calculateNodeStyling(targetElement),
	      paddingSize = _calculateNodeStyling.paddingSize,
	      borderSize = _calculateNodeStyling.borderSize,
	      boxSizing = _calculateNodeStyling.boxSizing,
	      contextStyle = _calculateNodeStyling.contextStyle;
	
	  hiddenTextarea.setAttribute('style', contextStyle + ';' + HIDDEN_STYLE);
	  hiddenTextarea.value = targetElement.value || targetElement.placeholder || '';
	
	  var height = hiddenTextarea.scrollHeight;
	  var result = {};
	
	  if (boxSizing === 'border-box') {
	    height = height + borderSize;
	  } else if (boxSizing === 'content-box') {
	    height = height - paddingSize;
	  }
	
	  hiddenTextarea.value = '';
	  var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
	
	  if (minRows !== null) {
	    var minHeight = singleRowHeight * minRows;
	    if (boxSizing === 'border-box') {
	      minHeight = minHeight + paddingSize + borderSize;
	    }
	    height = Math.max(minHeight, height);
	    result.minHeight = minHeight + 'px';
	  }
	  if (maxRows !== null) {
	    var maxHeight = singleRowHeight * maxRows;
	    if (boxSizing === 'border-box') {
	      maxHeight = maxHeight + paddingSize + borderSize;
	    }
	    height = Math.min(maxHeight, height);
	  }
	  result.height = height + 'px';
	  hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
	  hiddenTextarea = null;
	  return result;
	};
	// EXTERNAL MODULE: external "element-ui/lib/utils/merge"
	var merge_ = __webpack_require__(9);
	var merge_default = /*#__PURE__*/__webpack_require__.n(merge_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/shared"
	var shared_ = __webpack_require__(21);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/input/src/input.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	/* harmony default export */ var inputvue_type_script_lang_js_ = ({
	  name: 'ElInput',
	
	  componentName: 'ElInput',
	
	  mixins: [emitter_default.a, migrating_default.a],
	
	  inheritAttrs: false,
	
	  inject: {
	    elForm: {
	      default: ''
	    },
	    elFormItem: {
	      default: ''
	    }
	  },
	
	  data: function data() {
	    return {
	      textareaCalcStyle: {},
	      hovering: false,
	      focused: false,
	      isComposing: false,
	      passwordVisible: false
	    };
	  },
	
	
	  props: {
	    value: [String, Number],
	    size: String,
	    resize: String,
	    form: String,
	    disabled: Boolean,
	    readonly: Boolean,
	    type: {
	      type: String,
	      default: 'text'
	    },
	    autosize: {
	      type: [Boolean, Object],
	      default: false
	    },
	    autocomplete: {
	      type: String,
	      default: 'off'
	    },
	    /** @Deprecated in next major version */
	    autoComplete: {
	      type: String,
	      validator: function validator(val) {
	         false && false;
	        return true;
	      }
	    },
	    validateEvent: {
	      type: Boolean,
	      default: true
	    },
	    suffixIcon: String,
	    prefixIcon: String,
	    label: String,
	    clearable: {
	      type: Boolean,
	      default: false
	    },
	    showPassword: {
	      type: Boolean,
	      default: false
	    },
	    showWordLimit: {
	      type: Boolean,
	      default: false
	    },
	    tabindex: String
	  },
	
	  computed: {
	    _elFormItemSize: function _elFormItemSize() {
	      return (this.elFormItem || {}).elFormItemSize;
	    },
	    validateState: function validateState() {
	      return this.elFormItem ? this.elFormItem.validateState : '';
	    },
	    needStatusIcon: function needStatusIcon() {
	      return this.elForm ? this.elForm.statusIcon : false;
	    },
	    validateIcon: function validateIcon() {
	      return {
	        validating: 'el-icon-loading',
	        success: 'el-icon-circle-check',
	        error: 'el-icon-circle-close'
	      }[this.validateState];
	    },
	    textareaStyle: function textareaStyle() {
	      return merge_default()({}, this.textareaCalcStyle, { resize: this.resize });
	    },
	    inputSize: function inputSize() {
	      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
	    },
	    inputDisabled: function inputDisabled() {
	      return this.disabled || (this.elForm || {}).disabled;
	    },
	    nativeInputValue: function nativeInputValue() {
	      return this.value === null || this.value === undefined ? '' : String(this.value);
	    },
	    showClear: function showClear() {
	      return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);
	    },
	    showPwdVisible: function showPwdVisible() {
	      return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);
	    },
	    isWordLimitVisible: function isWordLimitVisible() {
	      return this.showWordLimit && this.$attrs.maxlength && (this.type === 'text' || this.type === 'textarea') && !this.inputDisabled && !this.readonly && !this.showPassword;
	    },
	    upperLimit: function upperLimit() {
	      return this.$attrs.maxlength;
	    },
	    textLength: function textLength() {
	      if (typeof this.value === 'number') {
	        return String(this.value).length;
	      }
	
	      return (this.value || '').length;
	    },
	    inputExceed: function inputExceed() {
	      // show exceed style if length of initial value greater then maxlength
	      return this.isWordLimitVisible && this.textLength > this.upperLimit;
	    }
	  },
	
	  watch: {
	    value: function value(val) {
	      this.$nextTick(this.resizeTextarea);
	      if (this.validateEvent) {
	        this.dispatch('ElFormItem', 'el.form.change', [val]);
	      }
	    },
	
	    // native input value is set explicitly
	    // do not use v-model / :value in template
	    // see: https://github.com/ElemeFE/element/issues/14521
	    nativeInputValue: function nativeInputValue() {
	      this.setNativeInputValue();
	    },
	
	    // when change between <input> and <textarea>,
	    // update DOM dependent value and styles
	    // https://github.com/ElemeFE/element/issues/14857
	    type: function type() {
	      var _this = this;
	
	      this.$nextTick(function () {
	        _this.setNativeInputValue();
	        _this.resizeTextarea();
	        _this.updateIconOffset();
	      });
	    }
	  },
	
	  methods: {
	    focus: function focus() {
	      this.getInput().focus();
	    },
	    blur: function blur() {
	      this.getInput().blur();
	    },
	    getMigratingConfig: function getMigratingConfig() {
	      return {
	        props: {
	          'icon': 'icon is removed, use suffix-icon / prefix-icon instead.',
	          'on-icon-click': 'on-icon-click is removed.'
	        },
	        events: {
	          'click': 'click is removed.'
	        }
	      };
	    },
	    handleBlur: function handleBlur(event) {
	      this.focused = false;
	      this.$emit('blur', event);
	      if (this.validateEvent) {
	        this.dispatch('ElFormItem', 'el.form.blur', [this.value]);
	      }
	    },
	    select: function select() {
	      this.getInput().select();
	    },
	    resizeTextarea: function resizeTextarea() {
	      if (this.$isServer) return;
	      var autosize = this.autosize,
	          type = this.type;
	
	      if (type !== 'textarea') return;
	      if (!autosize) {
	        this.textareaCalcStyle = {
	          minHeight: calcTextareaHeight(this.$refs.textarea).minHeight
	        };
	        return;
	      }
	      var minRows = autosize.minRows;
	      var maxRows = autosize.maxRows;
	
	      this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);
	    },
	    setNativeInputValue: function setNativeInputValue() {
	      var input = this.getInput();
	      if (!input) return;
	      if (input.value === this.nativeInputValue) return;
	      input.value = this.nativeInputValue;
	    },
	    handleFocus: function handleFocus(event) {
	      this.focused = true;
	      this.$emit('focus', event);
	    },
	    handleCompositionStart: function handleCompositionStart() {
	      this.isComposing = true;
	    },
	    handleCompositionUpdate: function handleCompositionUpdate(event) {
	      var text = event.target.value;
	      var lastCharacter = text[text.length - 1] || '';
	      this.isComposing = !Object(shared_["isKorean"])(lastCharacter);
	    },
	    handleCompositionEnd: function handleCompositionEnd(event) {
	      if (this.isComposing) {
	        this.isComposing = false;
	        this.handleInput(event);
	      }
	    },
	    handleInput: function handleInput(event) {
	      // should not emit input during composition
	      // see: https://github.com/ElemeFE/element/issues/10516
	      if (this.isComposing) return;
	
	      // hack for https://github.com/ElemeFE/element/issues/8548
	      // should remove the following line when we don't support IE
	      if (event.target.value === this.nativeInputValue) return;
	
	      this.$emit('input', event.target.value);
	
	      // ensure native input value is controlled
	      // see: https://github.com/ElemeFE/element/issues/12850
	      this.$nextTick(this.setNativeInputValue);
	    },
	    handleChange: function handleChange(event) {
	      this.$emit('change', event.target.value);
	    },
	    calcIconOffset: function calcIconOffset(place) {
	      var elList = [].slice.call(this.$el.querySelectorAll('.el-input__' + place) || []);
	      if (!elList.length) return;
	      var el = null;
	      for (var i = 0; i < elList.length; i++) {
	        if (elList[i].parentNode === this.$el) {
	          el = elList[i];
	          break;
	        }
	      }
	      if (!el) return;
	      var pendantMap = {
	        suffix: 'append',
	        prefix: 'prepend'
	      };
	
	      var pendant = pendantMap[place];
	      if (this.$slots[pendant]) {
	        el.style.transform = 'translateX(' + (place === 'suffix' ? '-' : '') + this.$el.querySelector('.el-input-group__' + pendant).offsetWidth + 'px)';
	      } else {
	        el.removeAttribute('style');
	      }
	    },
	    updateIconOffset: function updateIconOffset() {
	      this.calcIconOffset('prefix');
	      this.calcIconOffset('suffix');
	    },
	    clear: function clear() {
	      this.$emit('input', '');
	      this.$emit('change', '');
	      this.$emit('clear');
	    },
	    handlePasswordVisible: function handlePasswordVisible() {
	      this.passwordVisible = !this.passwordVisible;
	      this.focus();
	    },
	    getInput: function getInput() {
	      return this.$refs.input || this.$refs.textarea;
	    },
	    getSuffixVisible: function getSuffixVisible() {
	      return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;
	    }
	  },
	
	  created: function created() {
	    this.$on('inputSelect', this.select);
	  },
	  mounted: function mounted() {
	    this.setNativeInputValue();
	    this.resizeTextarea();
	    this.updateIconOffset();
	  },
	  updated: function updated() {
	    this.$nextTick(this.updateIconOffset);
	  }
	});
	// CONCATENATED MODULE: ./packages/input/src/input.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_inputvue_type_script_lang_js_ = (inputvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/input/src/input.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_inputvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/input/src/input.vue"
	/* harmony default export */ var input = (component.exports);
	// CONCATENATED MODULE: ./packages/input/index.js
	
	
	/* istanbul ignore next */
	input.install = function (Vue) {
	  Vue.component(input.name, input);
	};
	
	/* harmony default export */ var packages_input = __webpack_exports__["default"] = (input);
	
	/***/ }),
	
	/***/ 9:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(38);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = {
	  el: {
	    colorpicker: {
	      confirm: 'OK',
	      clear: 'Pulisci'
	    },
	    datepicker: {
	      now: 'Ora',
	      today: 'Oggi',
	      cancel: 'Cancella',
	      clear: 'Pulisci',
	      confirm: 'OK',
	      selectDate: 'Seleziona data',
	      selectTime: 'Seleziona ora',
	      startDate: 'Data inizio',
	      startTime: 'Ora inizio',
	      endDate: 'Data fine',
	      endTime: 'Ora fine',
	      prevYear: 'Anno precedente',
	      nextYear: 'Anno successivo',
	      prevMonth: 'Mese precedente',
	      nextMonth: 'Mese successivo',
	      year: '',
	      month1: 'Gennaio',
	      month2: 'Febbraio',
	      month3: 'Marzo',
	      month4: 'Aprile',
	      month5: 'Maggio',
	      month6: 'Giugno',
	      month7: 'Luglio',
	      month8: 'Agosto',
	      month9: 'Settembre',
	      month10: 'Ottobre',
	      month11: 'Novembre',
	      month12: 'Dicembre',
	      // week: 'settimana',
	      weeks: {
	        sun: 'Dom',
	        mon: 'Lun',
	        tue: 'Mar',
	        wed: 'Mer',
	        thu: 'Gio',
	        fri: 'Ven',
	        sat: 'Sab'
	      },
	      months: {
	        jan: 'Gen',
	        feb: 'Feb',
	        mar: 'Mar',
	        apr: 'Apr',
	        may: 'Mag',
	        jun: 'Giu',
	        jul: 'Lug',
	        aug: 'Ago',
	        sep: 'Set',
	        oct: 'Ott',
	        nov: 'Nov',
	        dec: 'Dic'
	      }
	    },
	    select: {
	      loading: 'Caricamento',
	      noMatch: 'Nessuna corrispondenza',
	      noData: 'Nessun dato',
	      placeholder: 'Seleziona'
	    },
	    cascader: {
	      noMatch: 'Nessuna corrispondenza',
	      loading: 'Caricamento',
	      placeholder: 'Seleziona',
	      noData: 'Nessun dato'
	    },
	    pagination: {
	      goto: 'Vai a',
	      pagesize: '/page',
	      total: 'Totale {total}',
	      pageClassifier: ''
	    },
	    messagebox: {
	      confirm: 'OK',
	      cancel: 'Cancella',
	      error: 'Input non valido'
	    },
	    upload: {
	      deleteTip: 'Premi cancella per rimuovere',
	      delete: 'Cancella',
	      preview: 'Anteprima',
	      continue: 'Continua'
	    },
	    table: {
	      emptyText: 'Nessun dato',
	      confirmFilter: 'Conferma',
	      resetFilter: 'Reset',
	      clearFilter: 'Tutti',
	      sumText: 'Somma'
	    },
	    tree: {
	      emptyText: 'Nessun dato'
	    },
	    transfer: {
	      noMatch: 'Nessuna corrispondenza',
	      noData: 'Nessun dato',
	      titles: ['Lista 1', 'Lista 2'],
	      filterPlaceholder: 'Inserisci filtro',
	      noCheckedFormat: '{total} elementi',
	      hasCheckedFormat: '{checked}/{total} selezionati'
	    },
	    image: {
	      error: 'FAILED' // to be translated
	    },
	    pageHeader: {
	      title: 'Back' // to be translated
	    },
	    popconfirm: {
	      confirmButtonText: 'Yes', // to be translated
	      cancelButtonText: 'No' // to be translated
	    }
	  }
	};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.isInContainer = exports.getScrollContainer = exports.isScroll = exports.getStyle = exports.once = exports.off = exports.on = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* istanbul ignore next */
	
	exports.hasClass = hasClass;
	exports.addClass = addClass;
	exports.removeClass = removeClass;
	exports.setStyle = setStyle;
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isServer = _vue2.default.prototype.$isServer;
	var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	var ieVersion = isServer ? 0 : Number(document.documentMode);
	
	/* istanbul ignore next */
	var trim = function trim(string) {
	  return (string || '').replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, '');
	};
	/* istanbul ignore next */
	var camelCase = function camelCase(name) {
	  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
	    return offset ? letter.toUpperCase() : letter;
	  }).replace(MOZ_HACK_REGEXP, 'Moz$1');
	};
	
	/* istanbul ignore next */
	var on = exports.on = function () {
	  if (!isServer && document.addEventListener) {
	    return function (element, event, handler) {
	      if (element && event && handler) {
	        element.addEventListener(event, handler, false);
	      }
	    };
	  } else {
	    return function (element, event, handler) {
	      if (element && event && handler) {
	        element.attachEvent('on' + event, handler);
	      }
	    };
	  }
	}();
	
	/* istanbul ignore next */
	var off = exports.off = function () {
	  if (!isServer && document.removeEventListener) {
	    return function (element, event, handler) {
	      if (element && event) {
	        element.removeEventListener(event, handler, false);
	      }
	    };
	  } else {
	    return function (element, event, handler) {
	      if (element && event) {
	        element.detachEvent('on' + event, handler);
	      }
	    };
	  }
	}();
	
	/* istanbul ignore next */
	var once = exports.once = function once(el, event, fn) {
	  var listener = function listener() {
	    if (fn) {
	      fn.apply(this, arguments);
	    }
	    off(el, event, listener);
	  };
	  on(el, event, listener);
	};
	
	/* istanbul ignore next */
	function hasClass(el, cls) {
	  if (!el || !cls) return false;
	  if (cls.indexOf(' ') !== -1) throw new Error('className should not contain space.');
	  if (el.classList) {
	    return el.classList.contains(cls);
	  } else {
	    return (' ' + el.className + ' ').indexOf(' ' + cls + ' ') > -1;
	  }
	};
	
	/* istanbul ignore next */
	function addClass(el, cls) {
	  if (!el) return;
	  var curClass = el.className;
	  var classes = (cls || '').split(' ');
	
	  for (var i = 0, j = classes.length; i < j; i++) {
	    var clsName = classes[i];
	    if (!clsName) continue;
	
	    if (el.classList) {
	      el.classList.add(clsName);
	    } else if (!hasClass(el, clsName)) {
	      curClass += ' ' + clsName;
	    }
	  }
	  if (!el.classList) {
	    el.className = curClass;
	  }
	};
	
	/* istanbul ignore next */
	function removeClass(el, cls) {
	  if (!el || !cls) return;
	  var classes = cls.split(' ');
	  var curClass = ' ' + el.className + ' ';
	
	  for (var i = 0, j = classes.length; i < j; i++) {
	    var clsName = classes[i];
	    if (!clsName) continue;
	
	    if (el.classList) {
	      el.classList.remove(clsName);
	    } else if (hasClass(el, clsName)) {
	      curClass = curClass.replace(' ' + clsName + ' ', ' ');
	    }
	  }
	  if (!el.classList) {
	    el.className = trim(curClass);
	  }
	};
	
	/* istanbul ignore next */
	var getStyle = exports.getStyle = ieVersion < 9 ? function (element, styleName) {
	  if (isServer) return;
	  if (!element || !styleName) return null;
	  styleName = camelCase(styleName);
	  if (styleName === 'float') {
	    styleName = 'styleFloat';
	  }
	  try {
	    switch (styleName) {
	      case 'opacity':
	        try {
	          return element.filters.item('alpha').opacity / 100;
	        } catch (e) {
	          return 1.0;
	        }
	      default:
	        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
	    }
	  } catch (e) {
	    return element.style[styleName];
	  }
	} : function (element, styleName) {
	  if (isServer) return;
	  if (!element || !styleName) return null;
	  styleName = camelCase(styleName);
	  if (styleName === 'float') {
	    styleName = 'cssFloat';
	  }
	  try {
	    var computed = document.defaultView.getComputedStyle(element, '');
	    return element.style[styleName] || computed ? computed[styleName] : null;
	  } catch (e) {
	    return element.style[styleName];
	  }
	};
	
	/* istanbul ignore next */
	function setStyle(element, styleName, value) {
	  if (!element || !styleName) return;
	
	  if ((typeof styleName === 'undefined' ? 'undefined' : _typeof(styleName)) === 'object') {
	    for (var prop in styleName) {
	      if (styleName.hasOwnProperty(prop)) {
	        setStyle(element, prop, styleName[prop]);
	      }
	    }
	  } else {
	    styleName = camelCase(styleName);
	    if (styleName === 'opacity' && ieVersion < 9) {
	      element.style.filter = isNaN(value) ? '' : 'alpha(opacity=' + value * 100 + ')';
	    } else {
	      element.style[styleName] = value;
	    }
	  }
	};
	
	var isScroll = exports.isScroll = function isScroll(el, vertical) {
	  if (isServer) return;
	
	  var determinedDirection = vertical !== null || vertical !== undefined;
	  var overflow = determinedDirection ? vertical ? getStyle(el, 'overflow-y') : getStyle(el, 'overflow-x') : getStyle(el, 'overflow');
	
	  return overflow.match(/(scroll|auto)/);
	};
	
	var getScrollContainer = exports.getScrollContainer = function getScrollContainer(el, vertical) {
	  if (isServer) return;
	
	  var parent = el;
	  while (parent) {
	    if ([window, document, document.documentElement].includes(parent)) {
	      return window;
	    }
	    if (isScroll(parent, vertical)) {
	      return parent;
	    }
	    parent = parent.parentNode;
	  }
	
	  return parent;
	};
	
	var isInContainer = exports.isInContainer = function isInContainer(el, container) {
	  if (isServer || !el || !container) return false;
	
	  var elRect = el.getBoundingClientRect();
	  var containerRect = void 0;
	
	  if ([window, document, document.documentElement, null, undefined].includes(container)) {
	    containerRect = {
	      top: 0,
	      right: window.innerWidth,
	      bottom: window.innerHeight,
	      left: 0
	    };
	  } else {
	    containerRect = container.getBoundingClientRect();
	  }
	
	  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
	};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _required = __webpack_require__(139);
	
	var _required2 = _interopRequireDefault(_required);
	
	var _whitespace = __webpack_require__(196);
	
	var _whitespace2 = _interopRequireDefault(_whitespace);
	
	var _type = __webpack_require__(195);
	
	var _type2 = _interopRequireDefault(_type);
	
	var _range = __webpack_require__(194);
	
	var _range2 = _interopRequireDefault(_range);
	
	var _enum = __webpack_require__(192);
	
	var _enum2 = _interopRequireDefault(_enum);
	
	var _pattern = __webpack_require__(193);
	
	var _pattern2 = _interopRequireDefault(_pattern);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = {
	  required: _required2['default'],
	  whitespace: _whitespace2['default'],
	  type: _type2['default'],
	  range: _range2['default'],
	  'enum': _enum2['default'],
	  pattern: _pattern2['default']
	};
	module.exports = exports['default'];

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(117)('wks')
	  , uid        = __webpack_require__(91)
	  , Symbol     = __webpack_require__(29).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var bind = __webpack_require__(144);
	
	/*global toString:true*/
	
	// utils is a library of generic helper functions non-specific to axios
	
	var toString = Object.prototype.toString;
	
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}
	
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}
	
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}
	
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}
	
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}
	
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}
	
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}
	
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }
	
	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }
	
	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }
	
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}
	
	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}
	
	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim
	};


/***/ }),
/* 28 */,
/* 29 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 121);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 121:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form.vue?vue&type=template&id=a1b5ff34&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "form",
	    {
	      staticClass: "el-form",
	      class: [
	        _vm.labelPosition ? "el-form--label-" + _vm.labelPosition : "",
	        { "el-form--inline": _vm.inline }
	      ]
	    },
	    [_vm._t("default")],
	    2
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/form/src/form.vue?vue&type=template&id=a1b5ff34&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/merge"
	var merge_ = __webpack_require__(9);
	var merge_default = /*#__PURE__*/__webpack_require__.n(merge_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	/* harmony default export */ var formvue_type_script_lang_js_ = ({
	  name: 'ElForm',
	
	  componentName: 'ElForm',
	
	  provide: function provide() {
	    return {
	      elForm: this
	    };
	  },
	
	
	  props: {
	    model: Object,
	    rules: Object,
	    labelPosition: String,
	    labelWidth: String,
	    labelSuffix: {
	      type: String,
	      default: ''
	    },
	    inline: Boolean,
	    inlineMessage: Boolean,
	    statusIcon: Boolean,
	    showMessage: {
	      type: Boolean,
	      default: true
	    },
	    size: String,
	    disabled: Boolean,
	    validateOnRuleChange: {
	      type: Boolean,
	      default: true
	    },
	    hideRequiredAsterisk: {
	      type: Boolean,
	      default: false
	    }
	  },
	  watch: {
	    rules: function rules() {
	      // remove then add event listeners on form-item after form rules change
	      this.fields.forEach(function (field) {
	        field.removeValidateEvents();
	        field.addValidateEvents();
	      });
	
	      if (this.validateOnRuleChange) {
	        this.validate(function () {});
	      }
	    }
	  },
	  computed: {
	    autoLabelWidth: function autoLabelWidth() {
	      if (!this.potentialLabelWidthArr.length) return 0;
	      var max = Math.max.apply(Math, this.potentialLabelWidthArr);
	      return max ? max + 'px' : '';
	    }
	  },
	  data: function data() {
	    return {
	      fields: [],
	      potentialLabelWidthArr: [] // use this array to calculate auto width
	    };
	  },
	  created: function created() {
	    var _this = this;
	
	    this.$on('el.form.addField', function (field) {
	      if (field) {
	        _this.fields.push(field);
	      }
	    });
	    /* istanbul ignore next */
	    this.$on('el.form.removeField', function (field) {
	      if (field.prop) {
	        _this.fields.splice(_this.fields.indexOf(field), 1);
	      }
	    });
	  },
	
	  methods: {
	    resetFields: function resetFields() {
	      if (!this.model) {
	        console.warn('[Element Warn][Form]model is required for resetFields to work.');
	        return;
	      }
	      this.fields.forEach(function (field) {
	        field.resetField();
	      });
	    },
	    clearValidate: function clearValidate() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	      var fields = props.length ? typeof props === 'string' ? this.fields.filter(function (field) {
	        return props === field.prop;
	      }) : this.fields.filter(function (field) {
	        return props.indexOf(field.prop) > -1;
	      }) : this.fields;
	      fields.forEach(function (field) {
	        field.clearValidate();
	      });
	    },
	    validate: function validate(callback) {
	      var _this2 = this;
	
	      if (!this.model) {
	        console.warn('[Element Warn][Form]model is required for validate to work!');
	        return;
	      }
	
	      var promise = void 0;
	      // if no callback, return promise
	      if (typeof callback !== 'function' && window.Promise) {
	        promise = new window.Promise(function (resolve, reject) {
	          callback = function callback(valid) {
	            valid ? resolve(valid) : reject(valid);
	          };
	        });
	      }
	
	      var valid = true;
	      var count = 0;
	      // 如果需要验证的fields为空，调用验证时立刻返回callback
	      if (this.fields.length === 0 && callback) {
	        callback(true);
	      }
	      var invalidFields = {};
	      this.fields.forEach(function (field) {
	        field.validate('', function (message, field) {
	          if (message) {
	            valid = false;
	          }
	          invalidFields = merge_default()({}, invalidFields, field);
	          if (typeof callback === 'function' && ++count === _this2.fields.length) {
	            callback(valid, invalidFields);
	          }
	        });
	      });
	
	      if (promise) {
	        return promise;
	      }
	    },
	    validateField: function validateField(props, cb) {
	      props = [].concat(props);
	      var fields = this.fields.filter(function (field) {
	        return props.indexOf(field.prop) !== -1;
	      });
	      if (!fields.length) {
	        console.warn('[Element Warn]please pass correct props!');
	        return;
	      }
	
	      fields.forEach(function (field) {
	        field.validate('', cb);
	      });
	    },
	    getLabelWidthIndex: function getLabelWidthIndex(width) {
	      var index = this.potentialLabelWidthArr.indexOf(width);
	      // it's impossible
	      if (index === -1) {
	        throw new Error('[ElementForm]unpected width ', width);
	      }
	      return index;
	    },
	    registerLabelWidth: function registerLabelWidth(val, oldVal) {
	      if (val && oldVal) {
	        var index = this.getLabelWidthIndex(oldVal);
	        this.potentialLabelWidthArr.splice(index, 1, val);
	      } else if (val) {
	        this.potentialLabelWidthArr.push(val);
	      }
	    },
	    deregisterLabelWidth: function deregisterLabelWidth(val) {
	      var index = this.getLabelWidthIndex(val);
	      this.potentialLabelWidthArr.splice(index, 1);
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/form/src/form.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_formvue_type_script_lang_js_ = (formvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/form/src/form.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_formvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/form/src/form.vue"
	/* harmony default export */ var src_form = (component.exports);
	// CONCATENATED MODULE: ./packages/form/index.js
	
	
	/* istanbul ignore next */
	src_form.install = function (Vue) {
	  Vue.component(src_form.name, src_form);
	};
	
	/* harmony default export */ var packages_form = __webpack_exports__["default"] = (src_form);
	
	/***/ }),
	
	/***/ 9:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(38);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 68);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 15:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(80);
	
	/***/ }),
	
	/***/ 2:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(23);
	
	/***/ }),
	
	/***/ 41:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(488);
	
	/***/ }),
	
	/***/ 68:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// EXTERNAL MODULE: external "vue"
	var external_vue_ = __webpack_require__(7);
	var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/loading/src/loading.vue?vue&type=template&id=eee0a7ac&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "transition",
	    {
	      attrs: { name: "el-loading-fade" },
	      on: { "after-leave": _vm.handleAfterLeave }
	    },
	    [
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.visible,
	              expression: "visible"
	            }
	          ],
	          staticClass: "el-loading-mask",
	          class: [_vm.customClass, { "is-fullscreen": _vm.fullscreen }],
	          style: { backgroundColor: _vm.background || "" }
	        },
	        [
	          _c("div", { staticClass: "el-loading-spinner" }, [
	            !_vm.spinner
	              ? _c(
	                  "svg",
	                  {
	                    staticClass: "circular",
	                    attrs: { viewBox: "25 25 50 50" }
	                  },
	                  [
	                    _c("circle", {
	                      staticClass: "path",
	                      attrs: { cx: "50", cy: "50", r: "20", fill: "none" }
	                    })
	                  ]
	                )
	              : _c("i", { class: _vm.spinner }),
	            _vm.text
	              ? _c("p", { staticClass: "el-loading-text" }, [
	                  _vm._v(_vm._s(_vm.text))
	                ])
	              : _vm._e()
	          ])
	        ]
	      )
	    ]
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/loading/src/loading.vue?vue&type=template&id=eee0a7ac&
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/loading/src/loading.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	/* harmony default export */ var loadingvue_type_script_lang_js_ = ({
	  data: function data() {
	    return {
	      text: null,
	      spinner: null,
	      background: null,
	      fullscreen: true,
	      visible: false,
	      customClass: ''
	    };
	  },
	
	
	  methods: {
	    handleAfterLeave: function handleAfterLeave() {
	      this.$emit('after-leave');
	    },
	    setText: function setText(text) {
	      this.text = text;
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/loading/src/loading.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_loadingvue_type_script_lang_js_ = (loadingvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/loading/src/loading.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_loadingvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/loading/src/loading.vue"
	/* harmony default export */ var loading = (component.exports);
	// EXTERNAL MODULE: external "element-ui/lib/utils/dom"
	var dom_ = __webpack_require__(2);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/popup"
	var popup_ = __webpack_require__(15);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/after-leave"
	var after_leave_ = __webpack_require__(41);
	var after_leave_default = /*#__PURE__*/__webpack_require__.n(after_leave_);
	
	// CONCATENATED MODULE: ./packages/loading/src/directive.js
	
	
	
	
	
	var Mask = external_vue_default.a.extend(loading);
	
	var loadingDirective = {};
	loadingDirective.install = function (Vue) {
	  if (Vue.prototype.$isServer) return;
	  var toggleLoading = function toggleLoading(el, binding) {
	    if (binding.value) {
	      Vue.nextTick(function () {
	        if (binding.modifiers.fullscreen) {
	          el.originalPosition = Object(dom_["getStyle"])(document.body, 'position');
	          el.originalOverflow = Object(dom_["getStyle"])(document.body, 'overflow');
	          el.maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
	
	          Object(dom_["addClass"])(el.mask, 'is-fullscreen');
	          insertDom(document.body, el, binding);
	        } else {
	          Object(dom_["removeClass"])(el.mask, 'is-fullscreen');
	
	          if (binding.modifiers.body) {
	            el.originalPosition = Object(dom_["getStyle"])(document.body, 'position');
	
	            ['top', 'left'].forEach(function (property) {
	              var scroll = property === 'top' ? 'scrollTop' : 'scrollLeft';
	              el.maskStyle[property] = el.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] - parseInt(Object(dom_["getStyle"])(document.body, 'margin-' + property), 10) + 'px';
	            });
	            ['height', 'width'].forEach(function (property) {
	              el.maskStyle[property] = el.getBoundingClientRect()[property] + 'px';
	            });
	
	            insertDom(document.body, el, binding);
	          } else {
	            el.originalPosition = Object(dom_["getStyle"])(el, 'position');
	            insertDom(el, el, binding);
	          }
	        }
	      });
	    } else {
	      after_leave_default()(el.instance, function (_) {
	        if (!el.instance.hiding) return;
	        el.domVisible = false;
	        var target = binding.modifiers.fullscreen || binding.modifiers.body ? document.body : el;
	        Object(dom_["removeClass"])(target, 'el-loading-parent--relative');
	        Object(dom_["removeClass"])(target, 'el-loading-parent--hidden');
	        el.instance.hiding = false;
	      }, 300, true);
	      el.instance.visible = false;
	      el.instance.hiding = true;
	    }
	  };
	  var insertDom = function insertDom(parent, el, binding) {
	    if (!el.domVisible && Object(dom_["getStyle"])(el, 'display') !== 'none' && Object(dom_["getStyle"])(el, 'visibility') !== 'hidden') {
	      Object.keys(el.maskStyle).forEach(function (property) {
	        el.mask.style[property] = el.maskStyle[property];
	      });
	
	      if (el.originalPosition !== 'absolute' && el.originalPosition !== 'fixed') {
	        Object(dom_["addClass"])(parent, 'el-loading-parent--relative');
	      }
	      if (binding.modifiers.fullscreen && binding.modifiers.lock) {
	        Object(dom_["addClass"])(parent, 'el-loading-parent--hidden');
	      }
	      el.domVisible = true;
	
	      parent.appendChild(el.mask);
	      Vue.nextTick(function () {
	        if (el.instance.hiding) {
	          el.instance.$emit('after-leave');
	        } else {
	          el.instance.visible = true;
	        }
	      });
	      el.domInserted = true;
	    } else if (el.domVisible && el.instance.hiding === true) {
	      el.instance.visible = true;
	      el.instance.hiding = false;
	    }
	  };
	
	  Vue.directive('loading', {
	    bind: function bind(el, binding, vnode) {
	      var textExr = el.getAttribute('element-loading-text');
	      var spinnerExr = el.getAttribute('element-loading-spinner');
	      var backgroundExr = el.getAttribute('element-loading-background');
	      var customClassExr = el.getAttribute('element-loading-custom-class');
	      var vm = vnode.context;
	      var mask = new Mask({
	        el: document.createElement('div'),
	        data: {
	          text: vm && vm[textExr] || textExr,
	          spinner: vm && vm[spinnerExr] || spinnerExr,
	          background: vm && vm[backgroundExr] || backgroundExr,
	          customClass: vm && vm[customClassExr] || customClassExr,
	          fullscreen: !!binding.modifiers.fullscreen
	        }
	      });
	      el.instance = mask;
	      el.mask = mask.$el;
	      el.maskStyle = {};
	
	      binding.value && toggleLoading(el, binding);
	    },
	
	    update: function update(el, binding) {
	      el.instance.setText(el.getAttribute('element-loading-text'));
	      if (binding.oldValue !== binding.value) {
	        toggleLoading(el, binding);
	      }
	    },
	
	    unbind: function unbind(el, binding) {
	      if (el.domInserted) {
	        el.mask && el.mask.parentNode && el.mask.parentNode.removeChild(el.mask);
	        toggleLoading(el, { value: false, modifiers: binding.modifiers });
	      }
	      el.instance && el.instance.$destroy();
	    }
	  });
	};
	
	/* harmony default export */ var directive = (loadingDirective);
	// EXTERNAL MODULE: external "element-ui/lib/utils/merge"
	var merge_ = __webpack_require__(9);
	var merge_default = /*#__PURE__*/__webpack_require__.n(merge_);
	
	// CONCATENATED MODULE: ./packages/loading/src/index.js
	
	
	
	
	
	
	
	var LoadingConstructor = external_vue_default.a.extend(loading);
	
	var defaults = {
	  text: null,
	  fullscreen: true,
	  body: false,
	  lock: false,
	  customClass: ''
	};
	
	var fullscreenLoading = void 0;
	
	LoadingConstructor.prototype.originalPosition = '';
	LoadingConstructor.prototype.originalOverflow = '';
	
	LoadingConstructor.prototype.close = function () {
	  var _this = this;
	
	  if (this.fullscreen) {
	    fullscreenLoading = undefined;
	  }
	  after_leave_default()(this, function (_) {
	    var target = _this.fullscreen || _this.body ? document.body : _this.target;
	    Object(dom_["removeClass"])(target, 'el-loading-parent--relative');
	    Object(dom_["removeClass"])(target, 'el-loading-parent--hidden');
	    if (_this.$el && _this.$el.parentNode) {
	      _this.$el.parentNode.removeChild(_this.$el);
	    }
	    _this.$destroy();
	  }, 300);
	  this.visible = false;
	};
	
	var src_addStyle = function addStyle(options, parent, instance) {
	  var maskStyle = {};
	  if (options.fullscreen) {
	    instance.originalPosition = Object(dom_["getStyle"])(document.body, 'position');
	    instance.originalOverflow = Object(dom_["getStyle"])(document.body, 'overflow');
	    maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
	  } else if (options.body) {
	    instance.originalPosition = Object(dom_["getStyle"])(document.body, 'position');
	    ['top', 'left'].forEach(function (property) {
	      var scroll = property === 'top' ? 'scrollTop' : 'scrollLeft';
	      maskStyle[property] = options.target.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] + 'px';
	    });
	    ['height', 'width'].forEach(function (property) {
	      maskStyle[property] = options.target.getBoundingClientRect()[property] + 'px';
	    });
	  } else {
	    instance.originalPosition = Object(dom_["getStyle"])(parent, 'position');
	  }
	  Object.keys(maskStyle).forEach(function (property) {
	    instance.$el.style[property] = maskStyle[property];
	  });
	};
	
	var src_Loading = function Loading() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	  if (external_vue_default.a.prototype.$isServer) return;
	  options = merge_default()({}, defaults, options);
	  if (typeof options.target === 'string') {
	    options.target = document.querySelector(options.target);
	  }
	  options.target = options.target || document.body;
	  if (options.target !== document.body) {
	    options.fullscreen = false;
	  } else {
	    options.body = true;
	  }
	  if (options.fullscreen && fullscreenLoading) {
	    return fullscreenLoading;
	  }
	
	  var parent = options.body ? document.body : options.target;
	  var instance = new LoadingConstructor({
	    el: document.createElement('div'),
	    data: options
	  });
	
	  src_addStyle(options, parent, instance);
	  if (instance.originalPosition !== 'absolute' && instance.originalPosition !== 'fixed') {
	    Object(dom_["addClass"])(parent, 'el-loading-parent--relative');
	  }
	  if (options.fullscreen && options.lock) {
	    Object(dom_["addClass"])(parent, 'el-loading-parent--hidden');
	  }
	  parent.appendChild(instance.$el);
	  external_vue_default.a.nextTick(function () {
	    instance.visible = true;
	  });
	  if (options.fullscreen) {
	    fullscreenLoading = instance;
	  }
	  return instance;
	};
	
	/* harmony default export */ var src = (src_Loading);
	// CONCATENATED MODULE: ./packages/loading/index.js
	
	
	
	/* harmony default export */ var packages_loading = __webpack_exports__["default"] = ({
	  install: function install(Vue) {
	    Vue.use(directive);
	    Vue.prototype.$loading = src;
	  },
	
	  directive: directive,
	  service: src
	});
	
	/***/ }),
	
	/***/ 7:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(1);
	
	/***/ }),
	
	/***/ 9:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(38);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	function _broadcast(componentName, eventName, params) {
	  this.$children.forEach(function (child) {
	    var name = child.$options.componentName;
	
	    if (name === componentName) {
	      child.$emit.apply(child, [eventName].concat(params));
	    } else {
	      _broadcast.apply(child, [componentName, eventName].concat([params]));
	    }
	  });
	}
	exports.default = {
	  methods: {
	    dispatch: function dispatch(componentName, eventName, params) {
	      var parent = this.$parent || this.$root;
	      var name = parent.$options.componentName;
	
	      while (parent && (!name || name !== componentName)) {
	        parent = parent.$parent;
	
	        if (parent) {
	          name = parent.$options.componentName;
	        }
	      }
	      if (parent) {
	        parent.$emit.apply(parent, [eventName].concat(params));
	      }
	    },
	    broadcast: function broadcast(componentName, eventName, params) {
	      _broadcast.call(this, componentName, eventName, params);
	    }
	  }
	};

/***/ }),
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 67);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 3:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 48:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(190);
	
	/***/ }),
	
	/***/ 67:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form-item.vue?vue&type=template&id=b6f3db6c&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      staticClass: "el-form-item",
	      class: [
	        {
	          "el-form-item--feedback": _vm.elForm && _vm.elForm.statusIcon,
	          "is-error": _vm.validateState === "error",
	          "is-validating": _vm.validateState === "validating",
	          "is-success": _vm.validateState === "success",
	          "is-required": _vm.isRequired || _vm.required,
	          "is-no-asterisk": _vm.elForm && _vm.elForm.hideRequiredAsterisk
	        },
	        _vm.sizeClass ? "el-form-item--" + _vm.sizeClass : ""
	      ]
	    },
	    [
	      _c(
	        "label-wrap",
	        {
	          attrs: {
	            "is-auto-width": _vm.labelStyle && _vm.labelStyle.width === "auto",
	            "update-all": _vm.form.labelWidth === "auto"
	          }
	        },
	        [
	          _vm.label || _vm.$slots.label
	            ? _c(
	                "label",
	                {
	                  staticClass: "el-form-item__label",
	                  style: _vm.labelStyle,
	                  attrs: { for: _vm.labelFor }
	                },
	                [
	                  _vm._t("label", [
	                    _vm._v(_vm._s(_vm.label + _vm.form.labelSuffix))
	                  ])
	                ],
	                2
	              )
	            : _vm._e()
	        ]
	      ),
	      _c(
	        "div",
	        { staticClass: "el-form-item__content", style: _vm.contentStyle },
	        [
	          _vm._t("default"),
	          _c(
	            "transition",
	            { attrs: { name: "el-zoom-in-top" } },
	            [
	              _vm.validateState === "error" &&
	              _vm.showMessage &&
	              _vm.form.showMessage
	                ? _vm._t(
	                    "error",
	                    [
	                      _c(
	                        "div",
	                        {
	                          staticClass: "el-form-item__error",
	                          class: {
	                            "el-form-item__error--inline":
	                              typeof _vm.inlineMessage === "boolean"
	                                ? _vm.inlineMessage
	                                : (_vm.elForm && _vm.elForm.inlineMessage) ||
	                                  false
	                          }
	                        },
	                        [
	                          _vm._v(
	                            "\n          " +
	                              _vm._s(_vm.validateMessage) +
	                              "\n        "
	                          )
	                        ]
	                      )
	                    ],
	                    { error: _vm.validateMessage }
	                  )
	                : _vm._e()
	            ],
	            2
	          )
	        ],
	        2
	      )
	    ],
	    1
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/form/src/form-item.vue?vue&type=template&id=b6f3db6c&
	
	// EXTERNAL MODULE: external "async-validator"
	var external_async_validator_ = __webpack_require__(48);
	var external_async_validator_default = /*#__PURE__*/__webpack_require__.n(external_async_validator_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/merge"
	var merge_ = __webpack_require__(9);
	var merge_default = /*#__PURE__*/__webpack_require__.n(merge_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/label-wrap.vue?vue&type=script&lang=js&
	
	
	/* harmony default export */ var label_wrapvue_type_script_lang_js_ = ({
	  props: {
	    isAutoWidth: Boolean,
	    updateAll: Boolean
	  },
	
	  inject: ['elForm', 'elFormItem'],
	
	  render: function render() {
	    var h = arguments[0];
	
	    var slots = this.$slots.default;
	    if (!slots) return null;
	    if (this.isAutoWidth) {
	      var autoLabelWidth = this.elForm.autoLabelWidth;
	      var style = {};
	      if (autoLabelWidth && autoLabelWidth !== 'auto') {
	        var marginLeft = parseInt(autoLabelWidth, 10) - this.computedWidth;
	        if (marginLeft) {
	          style.marginLeft = marginLeft + 'px';
	        }
	      }
	      return h(
	        'div',
	        { 'class': 'el-form-item__label-wrap', style: style },
	        [slots]
	      );
	    } else {
	      return slots[0];
	    }
	  },
	
	
	  methods: {
	    getLabelWidth: function getLabelWidth() {
	      if (this.$el && this.$el.firstElementChild) {
	        var computedWidth = window.getComputedStyle(this.$el.firstElementChild).width;
	        return Math.ceil(parseFloat(computedWidth));
	      } else {
	        return 0;
	      }
	    },
	    updateLabelWidth: function updateLabelWidth() {
	      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'update';
	
	      if (this.$slots.default && this.isAutoWidth && this.$el.firstElementChild) {
	        if (action === 'update') {
	          this.computedWidth = this.getLabelWidth();
	        } else if (action === 'remove') {
	          this.elForm.deregisterLabelWidth(this.computedWidth);
	        }
	      }
	    }
	  },
	
	  watch: {
	    computedWidth: function computedWidth(val, oldVal) {
	      if (this.updateAll) {
	        this.elForm.registerLabelWidth(val, oldVal);
	        this.elFormItem.updateComputedLabelWidth(val);
	      }
	    }
	  },
	
	  data: function data() {
	    return {
	      computedWidth: 0
	    };
	  },
	  mounted: function mounted() {
	    this.updateLabelWidth('update');
	  },
	  updated: function updated() {
	    this.updateLabelWidth('update');
	  },
	  beforeDestroy: function beforeDestroy() {
	    this.updateLabelWidth('remove');
	  }
	});
	// CONCATENATED MODULE: ./packages/form/src/label-wrap.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_label_wrapvue_type_script_lang_js_ = (label_wrapvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/form/src/label-wrap.vue
	var label_wrap_render, label_wrap_staticRenderFns
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_label_wrapvue_type_script_lang_js_,
	  label_wrap_render,
	  label_wrap_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/form/src/label-wrap.vue"
	/* harmony default export */ var label_wrap = (component.exports);
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form/src/form-item.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	/* harmony default export */ var form_itemvue_type_script_lang_js_ = ({
	  name: 'ElFormItem',
	
	  componentName: 'ElFormItem',
	
	  mixins: [emitter_default.a],
	
	  provide: function provide() {
	    return {
	      elFormItem: this
	    };
	  },
	
	
	  inject: ['elForm'],
	
	  props: {
	    label: String,
	    labelWidth: String,
	    prop: String,
	    required: {
	      type: Boolean,
	      default: undefined
	    },
	    rules: [Object, Array],
	    error: String,
	    validateStatus: String,
	    for: String,
	    inlineMessage: {
	      type: [String, Boolean],
	      default: ''
	    },
	    showMessage: {
	      type: Boolean,
	      default: true
	    },
	    size: String
	  },
	  components: {
	    // use this component to calculate auto width
	    LabelWrap: label_wrap
	  },
	  watch: {
	    error: {
	      immediate: true,
	      handler: function handler(value) {
	        this.validateMessage = value;
	        this.validateState = value ? 'error' : '';
	      }
	    },
	    validateStatus: function validateStatus(value) {
	      this.validateState = value;
	    }
	  },
	  computed: {
	    labelFor: function labelFor() {
	      return this.for || this.prop;
	    },
	    labelStyle: function labelStyle() {
	      var ret = {};
	      if (this.form.labelPosition === 'top') return ret;
	      var labelWidth = this.labelWidth || this.form.labelWidth;
	      if (labelWidth) {
	        ret.width = labelWidth;
	      }
	      return ret;
	    },
	    contentStyle: function contentStyle() {
	      var ret = {};
	      var label = this.label;
	      if (this.form.labelPosition === 'top' || this.form.inline) return ret;
	      if (!label && !this.labelWidth && this.isNested) return ret;
	      var labelWidth = this.labelWidth || this.form.labelWidth;
	      if (labelWidth === 'auto') {
	        if (this.labelWidth === 'auto') {
	          ret.marginLeft = this.computedLabelWidth;
	        } else if (this.form.labelWidth === 'auto') {
	          ret.marginLeft = this.elForm.autoLabelWidth;
	        }
	      } else {
	        ret.marginLeft = labelWidth;
	      }
	      return ret;
	    },
	    form: function form() {
	      var parent = this.$parent;
	      var parentName = parent.$options.componentName;
	      while (parentName !== 'ElForm') {
	        if (parentName === 'ElFormItem') {
	          this.isNested = true;
	        }
	        parent = parent.$parent;
	        parentName = parent.$options.componentName;
	      }
	      return parent;
	    },
	    fieldValue: function fieldValue() {
	      var model = this.form.model;
	      if (!model || !this.prop) {
	        return;
	      }
	
	      var path = this.prop;
	      if (path.indexOf(':') !== -1) {
	        path = path.replace(/:/, '.');
	      }
	
	      return Object(util_["getPropByPath"])(model, path, true).v;
	    },
	    isRequired: function isRequired() {
	      var rules = this.getRules();
	      var isRequired = false;
	
	      if (rules && rules.length) {
	        rules.every(function (rule) {
	          if (rule.required) {
	            isRequired = true;
	            return false;
	          }
	          return true;
	        });
	      }
	      return isRequired;
	    },
	    _formSize: function _formSize() {
	      return this.elForm.size;
	    },
	    elFormItemSize: function elFormItemSize() {
	      return this.size || this._formSize;
	    },
	    sizeClass: function sizeClass() {
	      return this.elFormItemSize || (this.$ELEMENT || {}).size;
	    }
	  },
	  data: function data() {
	    return {
	      validateState: '',
	      validateMessage: '',
	      validateDisabled: false,
	      validator: {},
	      isNested: false,
	      computedLabelWidth: ''
	    };
	  },
	
	  methods: {
	    validate: function validate(trigger) {
	      var _this = this;
	
	      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : util_["noop"];
	
	      this.validateDisabled = false;
	      var rules = this.getFilteredRule(trigger);
	      if ((!rules || rules.length === 0) && this.required === undefined) {
	        callback();
	        return true;
	      }
	
	      this.validateState = 'validating';
	
	      var descriptor = {};
	      if (rules && rules.length > 0) {
	        rules.forEach(function (rule) {
	          delete rule.trigger;
	        });
	      }
	      descriptor[this.prop] = rules;
	
	      var validator = new external_async_validator_default.a(descriptor);
	      var model = {};
	
	      model[this.prop] = this.fieldValue;
	
	      validator.validate(model, { firstFields: true }, function (errors, invalidFields) {
	        _this.validateState = !errors ? 'success' : 'error';
	        _this.validateMessage = errors ? errors[0].message : '';
	
	        callback(_this.validateMessage, invalidFields);
	        _this.elForm && _this.elForm.$emit('validate', _this.prop, !errors, _this.validateMessage || null);
	      });
	    },
	    clearValidate: function clearValidate() {
	      this.validateState = '';
	      this.validateMessage = '';
	      this.validateDisabled = false;
	    },
	    resetField: function resetField() {
	      var _this2 = this;
	
	      this.validateState = '';
	      this.validateMessage = '';
	
	      var model = this.form.model;
	      var value = this.fieldValue;
	      var path = this.prop;
	      if (path.indexOf(':') !== -1) {
	        path = path.replace(/:/, '.');
	      }
	
	      var prop = Object(util_["getPropByPath"])(model, path, true);
	
	      this.validateDisabled = true;
	      if (Array.isArray(value)) {
	        prop.o[prop.k] = [].concat(this.initialValue);
	      } else {
	        prop.o[prop.k] = this.initialValue;
	      }
	
	      // reset validateDisabled after onFieldChange triggered
	      this.$nextTick(function () {
	        _this2.validateDisabled = false;
	      });
	
	      this.broadcast('ElTimeSelect', 'fieldReset', this.initialValue);
	    },
	    getRules: function getRules() {
	      var formRules = this.form.rules;
	      var selfRules = this.rules;
	      var requiredRule = this.required !== undefined ? { required: !!this.required } : [];
	
	      var prop = Object(util_["getPropByPath"])(formRules, this.prop || '');
	      formRules = formRules ? prop.o[this.prop || ''] || prop.v : [];
	
	      return [].concat(selfRules || formRules || []).concat(requiredRule);
	    },
	    getFilteredRule: function getFilteredRule(trigger) {
	      var rules = this.getRules();
	
	      return rules.filter(function (rule) {
	        if (!rule.trigger || trigger === '') return true;
	        if (Array.isArray(rule.trigger)) {
	          return rule.trigger.indexOf(trigger) > -1;
	        } else {
	          return rule.trigger === trigger;
	        }
	      }).map(function (rule) {
	        return merge_default()({}, rule);
	      });
	    },
	    onFieldBlur: function onFieldBlur() {
	      this.validate('blur');
	    },
	    onFieldChange: function onFieldChange() {
	      if (this.validateDisabled) {
	        this.validateDisabled = false;
	        return;
	      }
	
	      this.validate('change');
	    },
	    updateComputedLabelWidth: function updateComputedLabelWidth(width) {
	      this.computedLabelWidth = width ? width + 'px' : '';
	    },
	    addValidateEvents: function addValidateEvents() {
	      var rules = this.getRules();
	
	      if (rules.length || this.required !== undefined) {
	        this.$on('el.form.blur', this.onFieldBlur);
	        this.$on('el.form.change', this.onFieldChange);
	      }
	    },
	    removeValidateEvents: function removeValidateEvents() {
	      this.$off();
	    }
	  },
	  mounted: function mounted() {
	    if (this.prop) {
	      this.dispatch('ElForm', 'el.form.addField', [this]);
	
	      var initialValue = this.fieldValue;
	      if (Array.isArray(initialValue)) {
	        initialValue = [].concat(initialValue);
	      }
	      Object.defineProperty(this, 'initialValue', {
	        value: initialValue
	      });
	
	      this.addValidateEvents();
	    }
	  },
	  beforeDestroy: function beforeDestroy() {
	    this.dispatch('ElForm', 'el.form.removeField', [this]);
	  }
	});
	// CONCATENATED MODULE: ./packages/form/src/form-item.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_form_itemvue_type_script_lang_js_ = (form_itemvue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/form/src/form-item.vue
	
	
	
	
	
	/* normalize component */
	
	var form_item_component = Object(componentNormalizer["a" /* default */])(
	  src_form_itemvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var form_item_api; }
	form_item_component.options.__file = "packages/form/src/form-item.vue"
	/* harmony default export */ var form_item = (form_item_component.exports);
	// CONCATENATED MODULE: ./packages/form-item/index.js
	
	
	/* istanbul ignore next */
	form_item.install = function (Vue) {
	  Vue.component(form_item.name, form_item);
	};
	
	/* harmony default export */ var packages_form_item = __webpack_exports__["default"] = (form_item);
	
	/***/ }),
	
	/***/ 9:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(38);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 132);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 132:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./packages/row/src/row.js
	/* harmony default export */ var row = ({
	  name: 'ElRow',
	
	  componentName: 'ElRow',
	
	  props: {
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    gutter: Number,
	    type: String,
	    justify: {
	      type: String,
	      default: 'start'
	    },
	    align: {
	      type: String,
	      default: 'top'
	    }
	  },
	
	  computed: {
	    style: function style() {
	      var ret = {};
	
	      if (this.gutter) {
	        ret.marginLeft = '-' + this.gutter / 2 + 'px';
	        ret.marginRight = ret.marginLeft;
	      }
	
	      return ret;
	    }
	  },
	
	  render: function render(h) {
	    return h(this.tag, {
	      class: ['el-row', this.justify !== 'start' ? 'is-justify-' + this.justify : '', this.align !== 'top' ? 'is-align-' + this.align : '', { 'el-row--flex': this.type === 'flex' }],
	      style: this.style
	    }, this.$slots.default);
	  }
	});
	// CONCATENATED MODULE: ./packages/row/index.js
	
	
	/* istanbul ignore next */
	row.install = function (Vue) {
	  Vue.component(row.name, row);
	};
	
	/* harmony default export */ var packages_row = __webpack_exports__["default"] = (row);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (target) {
	  for (var i = 1, j = arguments.length; i < j; i++) {
	    var source = arguments[i] || {};
	    for (var prop in source) {
	      if (source.hasOwnProperty(prop)) {
	        var value = source[prop];
	        if (value !== undefined) {
	          target[prop] = value;
	        }
	      }
	    }
	  }
	
	  return target;
	};
	
	;

/***/ }),
/* 39 */,
/* 40 */,
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _promise = __webpack_require__(10);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (fn) {
	  return function () {
	    var gen = fn.apply(this, arguments);
	    return new _promise2.default(function (resolve, reject) {
	      function step(key, arg) {
	        try {
	          var info = gen[key](arg);
	          var value = info.value;
	        } catch (error) {
	          reject(error);
	          return;
	        }
	
	        if (info.done) {
	          resolve(value);
	        } else {
	          return _promise2.default.resolve(value).then(function (value) {
	            step("next", value);
	          }, function (err) {
	            step("throw", err);
	          });
	        }
	      }
	
	      return step("next");
	    });
	  };
	};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(615);


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 56);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	/* 1 */,
	/* 2 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(23);
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	/* 4 */,
	/* 5 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(82);
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(59);
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(1);
	
	/***/ }),
	/* 8 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getCell; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return orderBy; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getColumnById; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getColumnByKey; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getColumnByCell; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getRowIdentity; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getKeysMap; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return mergeOptions; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return parseWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return parseMinWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return parseHeight; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return compose; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return toggleRowStatus; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return walkTreeNode; });
	/* harmony import */ var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
	/* harmony import */ var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__);
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	
	
	var getCell = function getCell(event) {
	  var cell = event.target;
	
	  while (cell && cell.tagName.toUpperCase() !== 'HTML') {
	    if (cell.tagName.toUpperCase() === 'TD') {
	      return cell;
	    }
	    cell = cell.parentNode;
	  }
	
	  return null;
	};
	
	var isObject = function isObject(obj) {
	  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
	};
	
	var orderBy = function orderBy(array, sortKey, reverse, sortMethod, sortBy) {
	  if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
	    return array;
	  }
	  if (typeof reverse === 'string') {
	    reverse = reverse === 'descending' ? -1 : 1;
	  } else {
	    reverse = reverse && reverse < 0 ? -1 : 1;
	  }
	  var getKey = sortMethod ? null : function (value, index) {
	    if (sortBy) {
	      if (!Array.isArray(sortBy)) {
	        sortBy = [sortBy];
	      }
	      return sortBy.map(function (by) {
	        if (typeof by === 'string') {
	          return Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, by);
	        } else {
	          return by(value, index, array);
	        }
	      });
	    }
	    if (sortKey !== '$key') {
	      if (isObject(value) && '$value' in value) value = value.$value;
	    }
	    return [isObject(value) ? Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, sortKey) : value];
	  };
	  var compare = function compare(a, b) {
	    if (sortMethod) {
	      return sortMethod(a.value, b.value);
	    }
	    for (var i = 0, len = a.key.length; i < len; i++) {
	      if (a.key[i] < b.key[i]) {
	        return -1;
	      }
	      if (a.key[i] > b.key[i]) {
	        return 1;
	      }
	    }
	    return 0;
	  };
	  return array.map(function (value, index) {
	    return {
	      value: value,
	      index: index,
	      key: getKey ? getKey(value, index) : null
	    };
	  }).sort(function (a, b) {
	    var order = compare(a, b);
	    if (!order) {
	      // make stable https://en.wikipedia.org/wiki/Sorting_algorithm#Stability
	      order = a.index - b.index;
	    }
	    return order * reverse;
	  }).map(function (item) {
	    return item.value;
	  });
	};
	
	var getColumnById = function getColumnById(table, columnId) {
	  var column = null;
	  table.columns.forEach(function (item) {
	    if (item.id === columnId) {
	      column = item;
	    }
	  });
	  return column;
	};
	
	var getColumnByKey = function getColumnByKey(table, columnKey) {
	  var column = null;
	  for (var i = 0; i < table.columns.length; i++) {
	    var item = table.columns[i];
	    if (item.columnKey === columnKey) {
	      column = item;
	      break;
	    }
	  }
	  return column;
	};
	
	var getColumnByCell = function getColumnByCell(table, cell) {
	  var matches = (cell.className || '').match(/el-table_[^\s]+/gm);
	  if (matches) {
	    return getColumnById(table, matches[0]);
	  }
	  return null;
	};
	
	var getRowIdentity = function getRowIdentity(row, rowKey) {
	  if (!row) throw new Error('row is required when get row identity');
	  if (typeof rowKey === 'string') {
	    if (rowKey.indexOf('.') < 0) {
	      return row[rowKey];
	    }
	    var key = rowKey.split('.');
	    var current = row;
	    for (var i = 0; i < key.length; i++) {
	      current = current[key[i]];
	    }
	    return current;
	  } else if (typeof rowKey === 'function') {
	    return rowKey.call(null, row);
	  }
	};
	
	var getKeysMap = function getKeysMap(array, rowKey) {
	  var arrayMap = {};
	  (array || []).forEach(function (row, index) {
	    arrayMap[getRowIdentity(row, rowKey)] = { row: row, index: index };
	  });
	  return arrayMap;
	};
	
	function hasOwn(obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key);
	}
	
	function mergeOptions(defaults, config) {
	  var options = {};
	  var key = void 0;
	  for (key in defaults) {
	    options[key] = defaults[key];
	  }
	  for (key in config) {
	    if (hasOwn(config, key)) {
	      var value = config[key];
	      if (typeof value !== 'undefined') {
	        options[key] = value;
	      }
	    }
	  }
	  return options;
	}
	
	function parseWidth(width) {
	  if (width !== undefined) {
	    width = parseInt(width, 10);
	    if (isNaN(width)) {
	      width = null;
	    }
	  }
	  return width;
	}
	
	function parseMinWidth(minWidth) {
	  if (typeof minWidth !== 'undefined') {
	    minWidth = parseWidth(minWidth);
	    if (isNaN(minWidth)) {
	      minWidth = 80;
	    }
	  }
	  return minWidth;
	};
	
	function parseHeight(height) {
	  if (typeof height === 'number') {
	    return height;
	  }
	  if (typeof height === 'string') {
	    if (/^\d+(?:px)?$/.test(height)) {
	      return parseInt(height, 10);
	    } else {
	      return height;
	    }
	  }
	  return null;
	}
	
	// https://github.com/reduxjs/redux/blob/master/src/compose.js
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }
	  if (funcs.length === 1) {
	    return funcs[0];
	  }
	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}
	
	function toggleRowStatus(statusArr, row, newVal) {
	  var changed = false;
	  var index = statusArr.indexOf(row);
	  var included = index !== -1;
	
	  var addRow = function addRow() {
	    statusArr.push(row);
	    changed = true;
	  };
	  var removeRow = function removeRow() {
	    statusArr.splice(index, 1);
	    changed = true;
	  };
	
	  if (typeof newVal === 'boolean') {
	    if (newVal && !included) {
	      addRow();
	    } else if (!newVal && included) {
	      removeRow();
	    }
	  } else {
	    if (included) {
	      removeRow();
	    } else {
	      addRow();
	    }
	  }
	  return changed;
	}
	
	function walkTreeNode(root, cb) {
	  var childrenKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';
	  var lazyKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hasChildren';
	
	  var isNil = function isNil(array) {
	    return !(Array.isArray(array) && array.length);
	  };
	
	  function _walker(parent, children, level) {
	    cb(parent, children, level);
	    children.forEach(function (item) {
	      if (item[lazyKey]) {
	        cb(item, null, level + 1);
	        return;
	      }
	      var children = item[childrenKey];
	      if (!isNil(children)) {
	        _walker(item, children, level + 1);
	      }
	    });
	  }
	
	  root.forEach(function (item) {
	    if (item[lazyKey]) {
	      cb(item, null, 0);
	      return;
	    }
	    var children = item[childrenKey];
	    if (!isNil(children)) {
	      _walker(item, children, 0);
	    }
	  });
	}
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(38);
	
	/***/ }),
	/* 10 */,
	/* 11 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(93);
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(132);
	
	/***/ }),
	/* 13 */,
	/* 14 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(128);
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(80);
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(81);
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(95);
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(58);
	
	/***/ }),
	/* 19 */,
	/* 20 */,
	/* 21 */,
	/* 22 */,
	/* 23 */,
	/* 24 */,
	/* 25 */,
	/* 26 */,
	/* 27 */,
	/* 28 */,
	/* 29 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(131);
	
	/***/ }),
	/* 30 */,
	/* 31 */,
	/* 32 */,
	/* 33 */,
	/* 34 */,
	/* 35 */,
	/* 36 */,
	/* 37 */,
	/* 38 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(133);
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(480);
	
	/***/ }),
	/* 40 */,
	/* 41 */,
	/* 42 */,
	/* 43 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(620);
	
	/***/ }),
	/* 44 */,
	/* 45 */,
	/* 46 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(607);
	
	/***/ }),
	/* 47 */,
	/* 48 */,
	/* 49 */,
	/* 50 */,
	/* 51 */,
	/* 52 */,
	/* 53 */,
	/* 54 */,
	/* 55 */,
	/* 56 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/table.vue?vue&type=template&id=493fe34e&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      staticClass: "el-table",
	      class: [
	        {
	          "el-table--fit": _vm.fit,
	          "el-table--striped": _vm.stripe,
	          "el-table--border": _vm.border || _vm.isGroup,
	          "el-table--hidden": _vm.isHidden,
	          "el-table--group": _vm.isGroup,
	          "el-table--fluid-height": _vm.maxHeight,
	          "el-table--scrollable-x": _vm.layout.scrollX,
	          "el-table--scrollable-y": _vm.layout.scrollY,
	          "el-table--enable-row-hover": !_vm.store.states.isComplex,
	          "el-table--enable-row-transition":
	            (_vm.store.states.data || []).length !== 0 &&
	            (_vm.store.states.data || []).length < 100
	        },
	        _vm.tableSize ? "el-table--" + _vm.tableSize : ""
	      ],
	      on: {
	        mouseleave: function($event) {
	          _vm.handleMouseLeave($event)
	        }
	      }
	    },
	    [
	      _c(
	        "div",
	        { ref: "hiddenColumns", staticClass: "hidden-columns" },
	        [_vm._t("default")],
	        2
	      ),
	      _vm.showHeader
	        ? _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "mousewheel",
	                  rawName: "v-mousewheel",
	                  value: _vm.handleHeaderFooterMousewheel,
	                  expression: "handleHeaderFooterMousewheel"
	                }
	              ],
	              ref: "headerWrapper",
	              staticClass: "el-table__header-wrapper"
	            },
	            [
	              _c("table-header", {
	                ref: "tableHeader",
	                style: {
	                  width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
	                },
	                attrs: {
	                  store: _vm.store,
	                  border: _vm.border,
	                  "default-sort": _vm.defaultSort
	                }
	              })
	            ],
	            1
	          )
	        : _vm._e(),
	      _c(
	        "div",
	        {
	          ref: "bodyWrapper",
	          staticClass: "el-table__body-wrapper",
	          class: [
	            _vm.layout.scrollX
	              ? "is-scrolling-" + _vm.scrollPosition
	              : "is-scrolling-none"
	          ],
	          style: [_vm.bodyHeight]
	        },
	        [
	          _c("table-body", {
	            style: {
	              width: _vm.bodyWidth
	            },
	            attrs: {
	              context: _vm.context,
	              store: _vm.store,
	              stripe: _vm.stripe,
	              "row-class-name": _vm.rowClassName,
	              "row-style": _vm.rowStyle,
	              highlight: _vm.highlightCurrentRow
	            }
	          }),
	          !_vm.data || _vm.data.length === 0
	            ? _c(
	                "div",
	                {
	                  ref: "emptyBlock",
	                  staticClass: "el-table__empty-block",
	                  style: _vm.emptyBlockStyle
	                },
	                [
	                  _c(
	                    "span",
	                    { staticClass: "el-table__empty-text" },
	                    [
	                      _vm._t("empty", [
	                        _vm._v(
	                          _vm._s(_vm.emptyText || _vm.t("el.table.emptyText"))
	                        )
	                      ])
	                    ],
	                    2
	                  )
	                ]
	              )
	            : _vm._e(),
	          _vm.$slots.append
	            ? _c(
	                "div",
	                {
	                  ref: "appendWrapper",
	                  staticClass: "el-table__append-wrapper"
	                },
	                [_vm._t("append")],
	                2
	              )
	            : _vm._e()
	        ],
	        1
	      ),
	      _vm.showSummary
	        ? _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "show",
	                  rawName: "v-show",
	                  value: _vm.data && _vm.data.length > 0,
	                  expression: "data && data.length > 0"
	                },
	                {
	                  name: "mousewheel",
	                  rawName: "v-mousewheel",
	                  value: _vm.handleHeaderFooterMousewheel,
	                  expression: "handleHeaderFooterMousewheel"
	                }
	              ],
	              ref: "footerWrapper",
	              staticClass: "el-table__footer-wrapper"
	            },
	            [
	              _c("table-footer", {
	                style: {
	                  width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
	                },
	                attrs: {
	                  store: _vm.store,
	                  border: _vm.border,
	                  "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
	                  "summary-method": _vm.summaryMethod,
	                  "default-sort": _vm.defaultSort
	                }
	              })
	            ],
	            1
	          )
	        : _vm._e(),
	      _vm.fixedColumns.length > 0
	        ? _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "mousewheel",
	                  rawName: "v-mousewheel",
	                  value: _vm.handleFixedMousewheel,
	                  expression: "handleFixedMousewheel"
	                }
	              ],
	              ref: "fixedWrapper",
	              staticClass: "el-table__fixed",
	              style: [
	                {
	                  width: _vm.layout.fixedWidth
	                    ? _vm.layout.fixedWidth + "px"
	                    : ""
	                },
	                _vm.fixedHeight
	              ]
	            },
	            [
	              _vm.showHeader
	                ? _c(
	                    "div",
	                    {
	                      ref: "fixedHeaderWrapper",
	                      staticClass: "el-table__fixed-header-wrapper"
	                    },
	                    [
	                      _c("table-header", {
	                        ref: "fixedTableHeader",
	                        style: {
	                          width: _vm.bodyWidth
	                        },
	                        attrs: {
	                          fixed: "left",
	                          border: _vm.border,
	                          store: _vm.store
	                        }
	                      })
	                    ],
	                    1
	                  )
	                : _vm._e(),
	              _c(
	                "div",
	                {
	                  ref: "fixedBodyWrapper",
	                  staticClass: "el-table__fixed-body-wrapper",
	                  style: [
	                    {
	                      top: _vm.layout.headerHeight + "px"
	                    },
	                    _vm.fixedBodyHeight
	                  ]
	                },
	                [
	                  _c("table-body", {
	                    style: {
	                      width: _vm.bodyWidth
	                    },
	                    attrs: {
	                      fixed: "left",
	                      store: _vm.store,
	                      stripe: _vm.stripe,
	                      highlight: _vm.highlightCurrentRow,
	                      "row-class-name": _vm.rowClassName,
	                      "row-style": _vm.rowStyle
	                    }
	                  }),
	                  _vm.$slots.append
	                    ? _c("div", {
	                        staticClass: "el-table__append-gutter",
	                        style: { height: _vm.layout.appendHeight + "px" }
	                      })
	                    : _vm._e()
	                ],
	                1
	              ),
	              _vm.showSummary
	                ? _c(
	                    "div",
	                    {
	                      directives: [
	                        {
	                          name: "show",
	                          rawName: "v-show",
	                          value: _vm.data && _vm.data.length > 0,
	                          expression: "data && data.length > 0"
	                        }
	                      ],
	                      ref: "fixedFooterWrapper",
	                      staticClass: "el-table__fixed-footer-wrapper"
	                    },
	                    [
	                      _c("table-footer", {
	                        style: {
	                          width: _vm.bodyWidth
	                        },
	                        attrs: {
	                          fixed: "left",
	                          border: _vm.border,
	                          "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
	                          "summary-method": _vm.summaryMethod,
	                          store: _vm.store
	                        }
	                      })
	                    ],
	                    1
	                  )
	                : _vm._e()
	            ]
	          )
	        : _vm._e(),
	      _vm.rightFixedColumns.length > 0
	        ? _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "mousewheel",
	                  rawName: "v-mousewheel",
	                  value: _vm.handleFixedMousewheel,
	                  expression: "handleFixedMousewheel"
	                }
	              ],
	              ref: "rightFixedWrapper",
	              staticClass: "el-table__fixed-right",
	              style: [
	                {
	                  width: _vm.layout.rightFixedWidth
	                    ? _vm.layout.rightFixedWidth + "px"
	                    : "",
	                  right: _vm.layout.scrollY
	                    ? (_vm.border
	                        ? _vm.layout.gutterWidth
	                        : _vm.layout.gutterWidth || 0) + "px"
	                    : ""
	                },
	                _vm.fixedHeight
	              ]
	            },
	            [
	              _vm.showHeader
	                ? _c(
	                    "div",
	                    {
	                      ref: "rightFixedHeaderWrapper",
	                      staticClass: "el-table__fixed-header-wrapper"
	                    },
	                    [
	                      _c("table-header", {
	                        ref: "rightFixedTableHeader",
	                        style: {
	                          width: _vm.bodyWidth
	                        },
	                        attrs: {
	                          fixed: "right",
	                          border: _vm.border,
	                          store: _vm.store
	                        }
	                      })
	                    ],
	                    1
	                  )
	                : _vm._e(),
	              _c(
	                "div",
	                {
	                  ref: "rightFixedBodyWrapper",
	                  staticClass: "el-table__fixed-body-wrapper",
	                  style: [
	                    {
	                      top: _vm.layout.headerHeight + "px"
	                    },
	                    _vm.fixedBodyHeight
	                  ]
	                },
	                [
	                  _c("table-body", {
	                    style: {
	                      width: _vm.bodyWidth
	                    },
	                    attrs: {
	                      fixed: "right",
	                      store: _vm.store,
	                      stripe: _vm.stripe,
	                      "row-class-name": _vm.rowClassName,
	                      "row-style": _vm.rowStyle,
	                      highlight: _vm.highlightCurrentRow
	                    }
	                  }),
	                  _vm.$slots.append
	                    ? _c("div", {
	                        staticClass: "el-table__append-gutter",
	                        style: { height: _vm.layout.appendHeight + "px" }
	                      })
	                    : _vm._e()
	                ],
	                1
	              ),
	              _vm.showSummary
	                ? _c(
	                    "div",
	                    {
	                      directives: [
	                        {
	                          name: "show",
	                          rawName: "v-show",
	                          value: _vm.data && _vm.data.length > 0,
	                          expression: "data && data.length > 0"
	                        }
	                      ],
	                      ref: "rightFixedFooterWrapper",
	                      staticClass: "el-table__fixed-footer-wrapper"
	                    },
	                    [
	                      _c("table-footer", {
	                        style: {
	                          width: _vm.bodyWidth
	                        },
	                        attrs: {
	                          fixed: "right",
	                          border: _vm.border,
	                          "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
	                          "summary-method": _vm.summaryMethod,
	                          store: _vm.store
	                        }
	                      })
	                    ],
	                    1
	                  )
	                : _vm._e()
	            ]
	          )
	        : _vm._e(),
	      _vm.rightFixedColumns.length > 0
	        ? _c("div", {
	            ref: "rightFixedPatch",
	            staticClass: "el-table__fixed-right-patch",
	            style: {
	              width: _vm.layout.scrollY ? _vm.layout.gutterWidth + "px" : "0",
	              height: _vm.layout.headerHeight + "px"
	            }
	          })
	        : _vm._e(),
	      _c("div", {
	        directives: [
	          {
	            name: "show",
	            rawName: "v-show",
	            value: _vm.resizeProxyVisible,
	            expression: "resizeProxyVisible"
	          }
	        ],
	        ref: "resizeProxy",
	        staticClass: "el-table__column-resize-proxy"
	      })
	    ]
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/table/src/table.vue?vue&type=template&id=493fe34e&
	
	// EXTERNAL MODULE: external "element-ui/lib/checkbox"
	var checkbox_ = __webpack_require__(18);
	var checkbox_default = /*#__PURE__*/__webpack_require__.n(checkbox_);
	
	// EXTERNAL MODULE: external "throttle-debounce"
	var external_throttle_debounce_ = __webpack_require__(43);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/resize-event"
	var resize_event_ = __webpack_require__(16);
	
	// EXTERNAL MODULE: external "normalize-wheel"
	var external_normalize_wheel_ = __webpack_require__(46);
	var external_normalize_wheel_default = /*#__PURE__*/__webpack_require__.n(external_normalize_wheel_);
	
	// CONCATENATED MODULE: ./src/directives/mousewheel.js
	
	
	var isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
	
	var mousewheel_mousewheel = function mousewheel(element, callback) {
	  if (element && element.addEventListener) {
	    element.addEventListener(isFirefox ? 'DOMMouseScroll' : 'mousewheel', function (event) {
	      var normalized = external_normalize_wheel_default()(event);
	      callback && callback.apply(this, [event, normalized]);
	    });
	  }
	};
	
	/* harmony default export */ var directives_mousewheel = ({
	  bind: function bind(el, binding) {
	    mousewheel_mousewheel(el, binding.value);
	  }
	});
	// EXTERNAL MODULE: external "element-ui/lib/mixins/locale"
	var locale_ = __webpack_require__(6);
	var locale_default = /*#__PURE__*/__webpack_require__.n(locale_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/migrating"
	var migrating_ = __webpack_require__(11);
	var migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);
	
	// EXTERNAL MODULE: external "vue"
	var external_vue_ = __webpack_require__(7);
	var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/merge"
	var merge_ = __webpack_require__(9);
	var merge_default = /*#__PURE__*/__webpack_require__.n(merge_);
	
	// EXTERNAL MODULE: ./packages/table/src/util.js
	var util = __webpack_require__(8);
	
	// CONCATENATED MODULE: ./packages/table/src/store/expand.js
	
	
	/* harmony default export */ var expand = ({
	  data: function data() {
	    return {
	      states: {
	        defaultExpandAll: false,
	        expandRows: []
	      }
	    };
	  },
	
	
	  methods: {
	    updateExpandRows: function updateExpandRows() {
	      var _states = this.states,
	          _states$data = _states.data,
	          data = _states$data === undefined ? [] : _states$data,
	          rowKey = _states.rowKey,
	          defaultExpandAll = _states.defaultExpandAll,
	          expandRows = _states.expandRows;
	
	      if (defaultExpandAll) {
	        this.states.expandRows = data.slice();
	      } else if (rowKey) {
	        // TODO：这里的代码可以优化
	        var expandRowsMap = Object(util["f" /* getKeysMap */])(expandRows, rowKey);
	        this.states.expandRows = data.reduce(function (prev, row) {
	          var rowId = Object(util["g" /* getRowIdentity */])(row, rowKey);
	          var rowInfo = expandRowsMap[rowId];
	          if (rowInfo) {
	            prev.push(row);
	          }
	          return prev;
	        }, []);
	      } else {
	        this.states.expandRows = [];
	      }
	    },
	    toggleRowExpansion: function toggleRowExpansion(row, expanded) {
	      var changed = Object(util["m" /* toggleRowStatus */])(this.states.expandRows, row, expanded);
	      if (changed) {
	        this.table.$emit('expand-change', row, this.states.expandRows.slice());
	        this.scheduleLayout();
	      }
	    },
	    setExpandRowKeys: function setExpandRowKeys(rowKeys) {
	      this.assertRowKey();
	      // TODO：这里的代码可以优化
	      var _states2 = this.states,
	          data = _states2.data,
	          rowKey = _states2.rowKey;
	
	      var keysMap = Object(util["f" /* getKeysMap */])(data, rowKey);
	      this.states.expandRows = rowKeys.reduce(function (prev, cur) {
	        var info = keysMap[cur];
	        if (info) {
	          prev.push(info.row);
	        }
	        return prev;
	      }, []);
	    },
	    isRowExpanded: function isRowExpanded(row) {
	      var _states3 = this.states,
	          _states3$expandRows = _states3.expandRows,
	          expandRows = _states3$expandRows === undefined ? [] : _states3$expandRows,
	          rowKey = _states3.rowKey;
	
	      if (rowKey) {
	        var expandMap = Object(util["f" /* getKeysMap */])(expandRows, rowKey);
	        return !!expandMap[Object(util["g" /* getRowIdentity */])(row, rowKey)];
	      }
	      return expandRows.indexOf(row) !== -1;
	    }
	  }
	});
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./packages/table/src/store/current.js
	
	
	
	/* harmony default export */ var current = ({
	  data: function data() {
	    return {
	      states: {
	        // 不可响应的，设置 currentRowKey 时，data 不一定存在，也许无法算出正确的 currentRow
	        // 把该值缓存一下，当用户点击修改 currentRow 时，把该值重置为 null
	        _currentRowKey: null,
	        currentRow: null
	      }
	    };
	  },
	
	
	  methods: {
	    setCurrentRowKey: function setCurrentRowKey(key) {
	      this.assertRowKey();
	      this.states._currentRowKey = key;
	      this.setCurrentRowByKey(key);
	    },
	    restoreCurrentRowKey: function restoreCurrentRowKey() {
	      this.states._currentRowKey = null;
	    },
	    setCurrentRowByKey: function setCurrentRowByKey(key) {
	      var states = this.states;
	      var _states$data = states.data,
	          data = _states$data === undefined ? [] : _states$data,
	          rowKey = states.rowKey;
	
	      var currentRow = null;
	      if (rowKey) {
	        currentRow = Object(util_["arrayFind"])(data, function (item) {
	          return Object(util["g" /* getRowIdentity */])(item, rowKey) === key;
	        });
	      }
	      states.currentRow = currentRow;
	    },
	    updateCurrentRow: function updateCurrentRow(currentRow) {
	      var states = this.states,
	          table = this.table;
	
	      var oldCurrentRow = states.currentRow;
	      if (currentRow && currentRow !== oldCurrentRow) {
	        states.currentRow = currentRow;
	        table.$emit('current-change', currentRow, oldCurrentRow);
	        return;
	      }
	      if (!currentRow && oldCurrentRow) {
	        states.currentRow = null;
	        table.$emit('current-change', null, oldCurrentRow);
	      }
	    },
	    updateCurrentRowData: function updateCurrentRowData() {
	      var states = this.states,
	          table = this.table;
	      var rowKey = states.rowKey,
	          _currentRowKey = states._currentRowKey;
	      // data 为 null 时，解构时的默认值会被忽略
	
	      var data = states.data || [];
	      var oldCurrentRow = states.currentRow;
	
	      // 当 currentRow 不在 data 中时尝试更新数据
	      if (data.indexOf(oldCurrentRow) === -1 && oldCurrentRow) {
	        if (rowKey) {
	          var currentRowKey = Object(util["g" /* getRowIdentity */])(oldCurrentRow, rowKey);
	          this.setCurrentRowByKey(currentRowKey);
	        } else {
	          states.currentRow = null;
	        }
	        if (states.currentRow === null) {
	          table.$emit('current-change', null, oldCurrentRow);
	        }
	      } else if (_currentRowKey) {
	        // 把初始时下设置的 rowKey 转化成 rowData
	        this.setCurrentRowByKey(_currentRowKey);
	        this.restoreCurrentRowKey();
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/table/src/store/tree.js
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	
	
	/* harmony default export */ var tree = ({
	  data: function data() {
	    return {
	      states: {
	        // defaultExpandAll 存在于 expand.js 中，这里不重复添加
	        // 在展开行中，expandRowKeys 会被转化成 expandRows，expandRowKeys 这个属性只是记录了 TreeTable 行的展开
	        // TODO: 拆分为独立的 TreeTable，统一用法
	        expandRowKeys: [],
	        treeData: {},
	        indent: 16,
	        lazy: false,
	        lazyTreeNodeMap: {},
	        lazyColumnIdentifier: 'hasChildren',
	        childrenColumnName: 'children'
	      }
	    };
	  },
	
	
	  computed: {
	    // 嵌入型的数据，watch 无法是检测到变化 https://github.com/ElemeFE/element/issues/14998
	    // TODO: 使用 computed 解决该问题，是否会造成性能问题？
	    // @return { id: { level, children } }
	    normalizedData: function normalizedData() {
	      if (!this.states.rowKey) return {};
	      var data = this.states.data || [];
	      return this.normalize(data);
	    },
	
	    // @return { id: { children } }
	    // 针对懒加载的情形，不处理嵌套数据
	    normalizedLazyNode: function normalizedLazyNode() {
	      var _states = this.states,
	          rowKey = _states.rowKey,
	          lazyTreeNodeMap = _states.lazyTreeNodeMap,
	          lazyColumnIdentifier = _states.lazyColumnIdentifier;
	
	      var keys = Object.keys(lazyTreeNodeMap);
	      var res = {};
	      if (!keys.length) return res;
	      keys.forEach(function (key) {
	        if (lazyTreeNodeMap[key].length) {
	          var item = { children: [] };
	          lazyTreeNodeMap[key].forEach(function (row) {
	            var currentRowKey = Object(util["g" /* getRowIdentity */])(row, rowKey);
	            item.children.push(currentRowKey);
	            if (row[lazyColumnIdentifier] && !res[currentRowKey]) {
	              res[currentRowKey] = { children: [] };
	            }
	          });
	          res[key] = item;
	        }
	      });
	      return res;
	    }
	  },
	
	  watch: {
	    normalizedData: 'updateTreeData',
	    normalizedLazyNode: 'updateTreeData'
	  },
	
	  methods: {
	    normalize: function normalize(data) {
	      var _states2 = this.states,
	          childrenColumnName = _states2.childrenColumnName,
	          lazyColumnIdentifier = _states2.lazyColumnIdentifier,
	          rowKey = _states2.rowKey,
	          lazy = _states2.lazy;
	
	      var res = {};
	      Object(util["n" /* walkTreeNode */])(data, function (parent, children, level) {
	        var parentId = Object(util["g" /* getRowIdentity */])(parent, rowKey);
	        if (Array.isArray(children)) {
	          res[parentId] = {
	            children: children.map(function (row) {
	              return Object(util["g" /* getRowIdentity */])(row, rowKey);
	            }),
	            level: level
	          };
	        } else if (lazy) {
	          // 当 children 不存在且 lazy 为 true，该节点即为懒加载的节点
	          res[parentId] = {
	            children: [],
	            lazy: true,
	            level: level
	          };
	        }
	      }, childrenColumnName, lazyColumnIdentifier);
	      return res;
	    },
	    updateTreeData: function updateTreeData() {
	      var nested = this.normalizedData;
	      var normalizedLazyNode = this.normalizedLazyNode;
	      var keys = Object.keys(nested);
	      var newTreeData = {};
	      if (keys.length) {
	        var _states3 = this.states,
	            oldTreeData = _states3.treeData,
	            defaultExpandAll = _states3.defaultExpandAll,
	            expandRowKeys = _states3.expandRowKeys,
	            lazy = _states3.lazy;
	
	        var rootLazyRowKeys = [];
	        var getExpanded = function getExpanded(oldValue, key) {
	          var included = defaultExpandAll || expandRowKeys && expandRowKeys.indexOf(key) !== -1;
	          return !!(oldValue && oldValue.expanded || included);
	        };
	        // 合并 expanded 与 display，确保数据刷新后，状态不变
	        keys.forEach(function (key) {
	          var oldValue = oldTreeData[key];
	          var newValue = _extends({}, nested[key]);
	          newValue.expanded = getExpanded(oldValue, key);
	          if (newValue.lazy) {
	            var _ref = oldValue || {},
	                _ref$loaded = _ref.loaded,
	                loaded = _ref$loaded === undefined ? false : _ref$loaded,
	                _ref$loading = _ref.loading,
	                loading = _ref$loading === undefined ? false : _ref$loading;
	
	            newValue.loaded = !!loaded;
	            newValue.loading = !!loading;
	            rootLazyRowKeys.push(key);
	          }
	          newTreeData[key] = newValue;
	        });
	        // 根据懒加载数据更新 treeData
	        var lazyKeys = Object.keys(normalizedLazyNode);
	        if (lazy && lazyKeys.length && rootLazyRowKeys.length) {
	          lazyKeys.forEach(function (key) {
	            var oldValue = oldTreeData[key];
	            var lazyNodeChildren = normalizedLazyNode[key].children;
	            if (rootLazyRowKeys.indexOf(key) !== -1) {
	              // 懒加载的 root 节点，更新一下原有的数据，原来的 children 一定是空数组
	              if (newTreeData[key].children.length !== 0) {
	                throw new Error('[ElTable]children must be an empty array.');
	              }
	              newTreeData[key].children = lazyNodeChildren;
	            } else {
	              var _ref2 = oldValue || {},
	                  _ref2$loaded = _ref2.loaded,
	                  loaded = _ref2$loaded === undefined ? false : _ref2$loaded,
	                  _ref2$loading = _ref2.loading,
	                  loading = _ref2$loading === undefined ? false : _ref2$loading;
	
	              newTreeData[key] = {
	                lazy: true,
	                loaded: !!loaded,
	                loading: !!loading,
	                expanded: getExpanded(oldValue, key),
	                children: lazyNodeChildren,
	                level: ''
	              };
	            }
	          });
	        }
	      }
	      this.states.treeData = newTreeData;
	      this.updateTableScrollY();
	    },
	    updateTreeExpandKeys: function updateTreeExpandKeys(value) {
	      this.states.expandRowKeys = value;
	      this.updateTreeData();
	    },
	    toggleTreeExpansion: function toggleTreeExpansion(row, expanded) {
	      this.assertRowKey();
	
	      var _states4 = this.states,
	          rowKey = _states4.rowKey,
	          treeData = _states4.treeData;
	
	      var id = Object(util["g" /* getRowIdentity */])(row, rowKey);
	      var data = id && treeData[id];
	      if (id && data && 'expanded' in data) {
	        var oldExpanded = data.expanded;
	        expanded = typeof expanded === 'undefined' ? !data.expanded : expanded;
	        treeData[id].expanded = expanded;
	        if (oldExpanded !== expanded) {
	          this.table.$emit('expand-change', row, expanded);
	        }
	        this.updateTableScrollY();
	      }
	    },
	    loadOrToggle: function loadOrToggle(row) {
	      this.assertRowKey();
	      var _states5 = this.states,
	          lazy = _states5.lazy,
	          treeData = _states5.treeData,
	          rowKey = _states5.rowKey;
	
	      var id = Object(util["g" /* getRowIdentity */])(row, rowKey);
	      var data = treeData[id];
	      if (lazy && data && 'loaded' in data && !data.loaded) {
	        this.loadData(row, id, data);
	      } else {
	        this.toggleTreeExpansion(row);
	      }
	    },
	    loadData: function loadData(row, key, treeNode) {
	      var _this = this;
	
	      var load = this.table.load;
	      var _states6 = this.states,
	          lazyTreeNodeMap = _states6.lazyTreeNodeMap,
	          treeData = _states6.treeData;
	
	      if (load && !treeData[key].loaded) {
	        treeData[key].loading = true;
	        load(row, treeNode, function (data) {
	          if (!Array.isArray(data)) {
	            throw new Error('[ElTable] data must be an array');
	          }
	          treeData[key].loading = false;
	          treeData[key].loaded = true;
	          treeData[key].expanded = true;
	          if (data.length) {
	            _this.$set(lazyTreeNodeMap, key, data);
	          }
	          _this.table.$emit('expand-change', row, true);
	        });
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/table/src/store/watcher.js
	
	
	
	
	
	
	
	var watcher_sortData = function sortData(data, states) {
	  var sortingColumn = states.sortingColumn;
	  if (!sortingColumn || typeof sortingColumn.sortable === 'string') {
	    return data;
	  }
	  return Object(util["i" /* orderBy */])(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
	};
	
	var doFlattenColumns = function doFlattenColumns(columns) {
	  var result = [];
	  columns.forEach(function (column) {
	    if (column.children) {
	      result.push.apply(result, doFlattenColumns(column.children));
	    } else {
	      result.push(column);
	    }
	  });
	  return result;
	};
	
	/* harmony default export */ var watcher = (external_vue_default.a.extend({
	  data: function data() {
	    return {
	      states: {
	        // 3.0 版本后要求必须设置该属性
	        rowKey: null,
	
	        // 渲染的数据来源，是对 table 中的 data 过滤排序后的结果
	        data: [],
	
	        // 是否包含固定列
	        isComplex: false,
	
	        // 列
	        _columns: [], // 不可响应的
	        originColumns: [],
	        columns: [],
	        fixedColumns: [],
	        rightFixedColumns: [],
	        leafColumns: [],
	        fixedLeafColumns: [],
	        rightFixedLeafColumns: [],
	        leafColumnsLength: 0,
	        fixedLeafColumnsLength: 0,
	        rightFixedLeafColumnsLength: 0,
	
	        // 选择
	        isAllSelected: false,
	        selection: [],
	        reserveSelection: false,
	        selectOnIndeterminate: false,
	        selectable: null,
	
	        // 过滤
	        filters: {}, // 不可响应的
	        filteredData: null,
	
	        // 排序
	        sortingColumn: null,
	        sortProp: null,
	        sortOrder: null,
	
	        hoverRow: null
	      }
	    };
	  },
	
	
	  mixins: [expand, current, tree],
	
	  methods: {
	    // 检查 rowKey 是否存在
	    assertRowKey: function assertRowKey() {
	      var rowKey = this.states.rowKey;
	      if (!rowKey) throw new Error('[ElTable] prop row-key is required');
	    },
	
	
	    // 更新列
	    updateColumns: function updateColumns() {
	      var states = this.states;
	      var _columns = states._columns || [];
	      states.fixedColumns = _columns.filter(function (column) {
	        return column.fixed === true || column.fixed === 'left';
	      });
	      states.rightFixedColumns = _columns.filter(function (column) {
	        return column.fixed === 'right';
	      });
	
	      if (states.fixedColumns.length > 0 && _columns[0] && _columns[0].type === 'selection' && !_columns[0].fixed) {
	        _columns[0].fixed = true;
	        states.fixedColumns.unshift(_columns[0]);
	      }
	
	      var notFixedColumns = _columns.filter(function (column) {
	        return !column.fixed;
	      });
	      states.originColumns = [].concat(states.fixedColumns).concat(notFixedColumns).concat(states.rightFixedColumns);
	
	      var leafColumns = doFlattenColumns(notFixedColumns);
	      var fixedLeafColumns = doFlattenColumns(states.fixedColumns);
	      var rightFixedLeafColumns = doFlattenColumns(states.rightFixedColumns);
	
	      states.leafColumnsLength = leafColumns.length;
	      states.fixedLeafColumnsLength = fixedLeafColumns.length;
	      states.rightFixedLeafColumnsLength = rightFixedLeafColumns.length;
	
	      states.columns = [].concat(fixedLeafColumns).concat(leafColumns).concat(rightFixedLeafColumns);
	      states.isComplex = states.fixedColumns.length > 0 || states.rightFixedColumns.length > 0;
	    },
	
	
	    // 更新 DOM
	    scheduleLayout: function scheduleLayout(needUpdateColumns) {
	      if (needUpdateColumns) {
	        this.updateColumns();
	      }
	      this.table.debouncedUpdateLayout();
	    },
	
	
	    // 选择
	    isSelected: function isSelected(row) {
	      var _states$selection = this.states.selection,
	          selection = _states$selection === undefined ? [] : _states$selection;
	
	      return selection.indexOf(row) > -1;
	    },
	    clearSelection: function clearSelection() {
	      var states = this.states;
	      states.isAllSelected = false;
	      var oldSelection = states.selection;
	      if (oldSelection.length) {
	        states.selection = [];
	        this.table.$emit('selection-change', []);
	      }
	    },
	    cleanSelection: function cleanSelection() {
	      var states = this.states;
	      var data = states.data,
	          rowKey = states.rowKey,
	          selection = states.selection;
	
	      var deleted = void 0;
	      if (rowKey) {
	        deleted = [];
	        var selectedMap = Object(util["f" /* getKeysMap */])(selection, rowKey);
	        var dataMap = Object(util["f" /* getKeysMap */])(data, rowKey);
	        for (var key in selectedMap) {
	          if (selectedMap.hasOwnProperty(key) && !dataMap[key]) {
	            deleted.push(selectedMap[key].row);
	          }
	        }
	      } else {
	        deleted = selection.filter(function (item) {
	          return data.indexOf(item) === -1;
	        });
	      }
	      if (deleted.length) {
	        var newSelection = selection.filter(function (item) {
	          return deleted.indexOf(item) === -1;
	        });
	        states.selection = newSelection;
	        this.table.$emit('selection-change', newSelection.slice());
	      }
	    },
	    toggleRowSelection: function toggleRowSelection(row, selected) {
	      var emitChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	
	      var changed = Object(util["m" /* toggleRowStatus */])(this.states.selection, row, selected);
	      if (changed) {
	        var newSelection = (this.states.selection || []).slice();
	        // 调用 API 修改选中值，不触发 select 事件
	        if (emitChange) {
	          this.table.$emit('select', newSelection, row);
	        }
	        this.table.$emit('selection-change', newSelection);
	      }
	    },
	    _toggleAllSelection: function _toggleAllSelection() {
	      var states = this.states;
	      var _states$data = states.data,
	          data = _states$data === undefined ? [] : _states$data,
	          selection = states.selection;
	      // when only some rows are selected (but not all), select or deselect all of them
	      // depending on the value of selectOnIndeterminate
	
	      var value = states.selectOnIndeterminate ? !states.isAllSelected : !(states.isAllSelected || selection.length);
	      states.isAllSelected = value;
	
	      var selectionChanged = false;
	      data.forEach(function (row, index) {
	        if (states.selectable) {
	          if (states.selectable.call(null, row, index) && Object(util["m" /* toggleRowStatus */])(selection, row, value)) {
	            selectionChanged = true;
	          }
	        } else {
	          if (Object(util["m" /* toggleRowStatus */])(selection, row, value)) {
	            selectionChanged = true;
	          }
	        }
	      });
	
	      if (selectionChanged) {
	        this.table.$emit('selection-change', selection ? selection.slice() : []);
	      }
	      this.table.$emit('select-all', selection);
	    },
	    updateSelectionByRowKey: function updateSelectionByRowKey() {
	      var states = this.states;
	      var selection = states.selection,
	          rowKey = states.rowKey,
	          data = states.data;
	
	      var selectedMap = Object(util["f" /* getKeysMap */])(selection, rowKey);
	      data.forEach(function (row) {
	        var rowId = Object(util["g" /* getRowIdentity */])(row, rowKey);
	        var rowInfo = selectedMap[rowId];
	        if (rowInfo) {
	          selection[rowInfo.index] = row;
	        }
	      });
	    },
	    updateAllSelected: function updateAllSelected() {
	      var states = this.states;
	      var selection = states.selection,
	          rowKey = states.rowKey,
	          selectable = states.selectable;
	      // data 为 null 时，解构时的默认值会被忽略
	
	      var data = states.data || [];
	      if (data.length === 0) {
	        states.isAllSelected = false;
	        return;
	      }
	
	      var selectedMap = void 0;
	      if (rowKey) {
	        selectedMap = Object(util["f" /* getKeysMap */])(selection, rowKey);
	      }
	      var isSelected = function isSelected(row) {
	        if (selectedMap) {
	          return !!selectedMap[Object(util["g" /* getRowIdentity */])(row, rowKey)];
	        } else {
	          return selection.indexOf(row) !== -1;
	        }
	      };
	      var isAllSelected = true;
	      var selectedCount = 0;
	      for (var i = 0, j = data.length; i < j; i++) {
	        var item = data[i];
	        var isRowSelectable = selectable && selectable.call(null, item, i);
	        if (!isSelected(item)) {
	          if (!selectable || isRowSelectable) {
	            isAllSelected = false;
	            break;
	          }
	        } else {
	          selectedCount++;
	        }
	      }
	
	      if (selectedCount === 0) isAllSelected = false;
	      states.isAllSelected = isAllSelected;
	    },
	
	
	    // 过滤与排序
	    updateFilters: function updateFilters(columns, values) {
	      if (!Array.isArray(columns)) {
	        columns = [columns];
	      }
	      var states = this.states;
	      var filters = {};
	      columns.forEach(function (col) {
	        states.filters[col.id] = values;
	        filters[col.columnKey || col.id] = values;
	      });
	
	      return filters;
	    },
	    updateSort: function updateSort(column, prop, order) {
	      if (this.states.sortingColumn && this.states.sortingColumn !== column) {
	        this.states.sortingColumn.order = null;
	      }
	      this.states.sortingColumn = column;
	      this.states.sortProp = prop;
	      this.states.sortOrder = order;
	    },
	    execFilter: function execFilter() {
	      var _this = this;
	
	      var states = this.states;
	      var _data = states._data,
	          filters = states.filters;
	
	      var data = _data;
	
	      Object.keys(filters).forEach(function (columnId) {
	        var values = states.filters[columnId];
	        if (!values || values.length === 0) return;
	        var column = Object(util["d" /* getColumnById */])(_this.states, columnId);
	        if (column && column.filterMethod) {
	          data = data.filter(function (row) {
	            return values.some(function (value) {
	              return column.filterMethod.call(null, value, row, column);
	            });
	          });
	        }
	      });
	
	      states.filteredData = data;
	    },
	    execSort: function execSort() {
	      var states = this.states;
	      states.data = watcher_sortData(states.filteredData, states);
	    },
	
	
	    // 根据 filters 与 sort 去过滤 data
	    execQuery: function execQuery(ignore) {
	      if (!(ignore && ignore.filter)) {
	        this.execFilter();
	      }
	      this.execSort();
	    },
	    clearFilter: function clearFilter(columnKeys) {
	      var states = this.states;
	      var _table$$refs = this.table.$refs,
	          tableHeader = _table$$refs.tableHeader,
	          fixedTableHeader = _table$$refs.fixedTableHeader,
	          rightFixedTableHeader = _table$$refs.rightFixedTableHeader;
	
	
	      var panels = {};
	      if (tableHeader) panels = merge_default()(panels, tableHeader.filterPanels);
	      if (fixedTableHeader) panels = merge_default()(panels, fixedTableHeader.filterPanels);
	      if (rightFixedTableHeader) panels = merge_default()(panels, rightFixedTableHeader.filterPanels);
	
	      var keys = Object.keys(panels);
	      if (!keys.length) return;
	
	      if (typeof columnKeys === 'string') {
	        columnKeys = [columnKeys];
	      }
	
	      if (Array.isArray(columnKeys)) {
	        var columns = columnKeys.map(function (key) {
	          return Object(util["e" /* getColumnByKey */])(states, key);
	        });
	        keys.forEach(function (key) {
	          var column = columns.find(function (col) {
	            return col.id === key;
	          });
	          if (column) {
	            // TODO: 优化这里的代码
	            panels[key].filteredValue = [];
	          }
	        });
	        this.commit('filterChange', {
	          column: columns,
	          values: [],
	          silent: true,
	          multi: true
	        });
	      } else {
	        keys.forEach(function (key) {
	          // TODO: 优化这里的代码
	          panels[key].filteredValue = [];
	        });
	
	        states.filters = {};
	        this.commit('filterChange', {
	          column: {},
	          values: [],
	          silent: true
	        });
	      }
	    },
	    clearSort: function clearSort() {
	      var states = this.states;
	      if (!states.sortingColumn) return;
	
	      this.updateSort(null, null, null);
	      this.commit('changeSortCondition', {
	        silent: true
	      });
	    },
	
	
	    // 适配层，expand-row-keys 在 Expand 与 TreeTable 中都有使用
	    setExpandRowKeysAdapter: function setExpandRowKeysAdapter(val) {
	      // 这里会触发额外的计算，但为了兼容性，暂时这么做
	      this.setExpandRowKeys(val);
	      this.updateTreeExpandKeys(val);
	    },
	
	
	    // 展开行与 TreeTable 都要使用
	    toggleRowExpansionAdapter: function toggleRowExpansionAdapter(row, expanded) {
	      var hasExpandColumn = this.states.columns.some(function (_ref) {
	        var type = _ref.type;
	        return type === 'expand';
	      });
	      if (hasExpandColumn) {
	        this.toggleRowExpansion(row, expanded);
	      } else {
	        this.toggleTreeExpansion(row, expanded);
	      }
	    }
	  }
	}));
	// CONCATENATED MODULE: ./packages/table/src/store/index.js
	
	
	
	
	watcher.prototype.mutations = {
	  setData: function setData(states, data) {
	    var dataInstanceChanged = states._data !== data;
	    states._data = data;
	
	    this.execQuery();
	    // 数据变化，更新部分数据。
	    // 没有使用 computed，而是手动更新部分数据 https://github.com/vuejs/vue/issues/6660#issuecomment-331417140
	    this.updateCurrentRowData();
	    this.updateExpandRows();
	    if (states.reserveSelection) {
	      this.assertRowKey();
	      this.updateSelectionByRowKey();
	    } else {
	      if (dataInstanceChanged) {
	        this.clearSelection();
	      } else {
	        this.cleanSelection();
	      }
	    }
	    this.updateAllSelected();
	
	    this.updateTableScrollY();
	  },
	  insertColumn: function insertColumn(states, column, index, parent) {
	    var array = states._columns;
	    if (parent) {
	      array = parent.children;
	      if (!array) array = parent.children = [];
	    }
	
	    if (typeof index !== 'undefined') {
	      array.splice(index, 0, column);
	    } else {
	      array.push(column);
	    }
	
	    if (column.type === 'selection') {
	      states.selectable = column.selectable;
	      states.reserveSelection = column.reserveSelection;
	    }
	
	    if (this.table.$ready) {
	      this.updateColumns(); // hack for dynamics insert column
	      this.scheduleLayout();
	    }
	  },
	  removeColumn: function removeColumn(states, column, parent) {
	    var array = states._columns;
	    if (parent) {
	      array = parent.children;
	      if (!array) array = parent.children = [];
	    }
	    if (array) {
	      array.splice(array.indexOf(column), 1);
	    }
	
	    if (this.table.$ready) {
	      this.updateColumns(); // hack for dynamics remove column
	      this.scheduleLayout();
	    }
	  },
	  sort: function sort(states, options) {
	    var prop = options.prop,
	        order = options.order,
	        init = options.init;
	
	    if (prop) {
	      var column = Object(util_["arrayFind"])(states.columns, function (column) {
	        return column.property === prop;
	      });
	      if (column) {
	        column.order = order;
	        this.updateSort(column, prop, order);
	        this.commit('changeSortCondition', { init: init });
	      }
	    }
	  },
	  changeSortCondition: function changeSortCondition(states, options) {
	    // 修复 pr https://github.com/ElemeFE/element/pull/15012 导致的 bug
	    var column = states.sortingColumn,
	        prop = states.sortProp,
	        order = states.sortOrder;
	
	    if (order === null) {
	      states.sortingColumn = null;
	      states.sortProp = null;
	    }
	    var ingore = { filter: true };
	    this.execQuery(ingore);
	
	    if (!options || !(options.silent || options.init)) {
	      this.table.$emit('sort-change', {
	        column: column,
	        prop: prop,
	        order: order
	      });
	    }
	
	    this.updateTableScrollY();
	  },
	  filterChange: function filterChange(states, options) {
	    var column = options.column,
	        values = options.values,
	        silent = options.silent;
	
	    var newFilters = this.updateFilters(column, values);
	
	    this.execQuery();
	
	    if (!silent) {
	      this.table.$emit('filter-change', newFilters);
	    }
	
	    this.updateTableScrollY();
	  },
	  toggleAllSelection: function toggleAllSelection() {
	    this.toggleAllSelection();
	  },
	  rowSelectedChanged: function rowSelectedChanged(states, row) {
	    this.toggleRowSelection(row);
	    this.updateAllSelected();
	  },
	  setHoverRow: function setHoverRow(states, row) {
	    states.hoverRow = row;
	  },
	  setCurrentRow: function setCurrentRow(states, row) {
	    this.updateCurrentRow(row);
	  }
	};
	
	watcher.prototype.commit = function (name) {
	  var mutations = this.mutations;
	  if (mutations[name]) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    mutations[name].apply(this, [this.states].concat(args));
	  } else {
	    throw new Error('Action not found: ' + name);
	  }
	};
	
	watcher.prototype.updateTableScrollY = function () {
	  external_vue_default.a.nextTick(this.table.updateScrollY);
	};
	
	/* harmony default export */ var src_store = (watcher);
	// EXTERNAL MODULE: external "throttle-debounce/debounce"
	var debounce_ = __webpack_require__(17);
	var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);
	
	// CONCATENATED MODULE: ./packages/table/src/store/helper.js
	
	
	
	function createStore(table) {
	  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  if (!table) {
	    throw new Error('Table is required.');
	  }
	
	  var store = new src_store();
	  store.table = table;
	  // fix https://github.com/ElemeFE/element/issues/14075
	  // related pr https://github.com/ElemeFE/element/pull/14146
	  store.toggleAllSelection = debounce_default()(10, store._toggleAllSelection);
	  Object.keys(initialState).forEach(function (key) {
	    store.states[key] = initialState[key];
	  });
	  return store;
	}
	
	function mapStates(mapper) {
	  var res = {};
	  Object.keys(mapper).forEach(function (key) {
	    var value = mapper[key];
	    var fn = void 0;
	    if (typeof value === 'string') {
	      fn = function fn() {
	        return this.store.states[value];
	      };
	    } else if (typeof value === 'function') {
	      fn = function fn() {
	        return value.call(this, this.store.states);
	      };
	    } else {
	      console.error('invalid value type');
	    }
	    if (fn) {
	      res[key] = fn;
	    }
	  });
	  return res;
	};
	// EXTERNAL MODULE: external "element-ui/lib/utils/scrollbar-width"
	var scrollbar_width_ = __webpack_require__(38);
	var scrollbar_width_default = /*#__PURE__*/__webpack_require__.n(scrollbar_width_);
	
	// CONCATENATED MODULE: ./packages/table/src/table-layout.js
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	
	
	
	
	var table_layout_TableLayout = function () {
	  function TableLayout(options) {
	    _classCallCheck(this, TableLayout);
	
	    this.observers = [];
	    this.table = null;
	    this.store = null;
	    this.columns = null;
	    this.fit = true;
	    this.showHeader = true;
	
	    this.height = null;
	    this.scrollX = false;
	    this.scrollY = false;
	    this.bodyWidth = null;
	    this.fixedWidth = null;
	    this.rightFixedWidth = null;
	    this.tableHeight = null;
	    this.headerHeight = 44; // Table Header Height
	    this.appendHeight = 0; // Append Slot Height
	    this.footerHeight = 44; // Table Footer Height
	    this.viewportHeight = null; // Table Height - Scroll Bar Height
	    this.bodyHeight = null; // Table Height - Table Header Height
	    this.fixedBodyHeight = null; // Table Height - Table Header Height - Scroll Bar Height
	    this.gutterWidth = scrollbar_width_default()();
	
	    for (var name in options) {
	      if (options.hasOwnProperty(name)) {
	        this[name] = options[name];
	      }
	    }
	
	    if (!this.table) {
	      throw new Error('table is required for Table Layout');
	    }
	    if (!this.store) {
	      throw new Error('store is required for Table Layout');
	    }
	  }
	
	  TableLayout.prototype.updateScrollY = function updateScrollY() {
	    var height = this.height;
	    if (height === null) return false;
	    var bodyWrapper = this.table.bodyWrapper;
	    if (this.table.$el && bodyWrapper) {
	      var body = bodyWrapper.querySelector('.el-table__body');
	      var prevScrollY = this.scrollY;
	      var scrollY = body.offsetHeight > this.bodyHeight;
	      this.scrollY = scrollY;
	      return prevScrollY !== scrollY;
	    }
	    return false;
	  };
	
	  TableLayout.prototype.setHeight = function setHeight(value) {
	    var _this = this;
	
	    var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'height';
	
	    if (external_vue_default.a.prototype.$isServer) return;
	    var el = this.table.$el;
	    value = Object(util["j" /* parseHeight */])(value);
	    this.height = value;
	
	    if (!el && (value || value === 0)) return external_vue_default.a.nextTick(function () {
	      return _this.setHeight(value, prop);
	    });
	
	    if (typeof value === 'number') {
	      el.style[prop] = value + 'px';
	      this.updateElsHeight();
	    } else if (typeof value === 'string') {
	      el.style[prop] = value;
	      this.updateElsHeight();
	    }
	  };
	
	  TableLayout.prototype.setMaxHeight = function setMaxHeight(value) {
	    this.setHeight(value, 'max-height');
	  };
	
	  TableLayout.prototype.getFlattenColumns = function getFlattenColumns() {
	    var flattenColumns = [];
	    var columns = this.table.columns;
	    columns.forEach(function (column) {
	      if (column.isColumnGroup) {
	        flattenColumns.push.apply(flattenColumns, column.columns);
	      } else {
	        flattenColumns.push(column);
	      }
	    });
	
	    return flattenColumns;
	  };
	
	  TableLayout.prototype.updateElsHeight = function updateElsHeight() {
	    var _this2 = this;
	
	    if (!this.table.$ready) return external_vue_default.a.nextTick(function () {
	      return _this2.updateElsHeight();
	    });
	    var _table$$refs = this.table.$refs,
	        headerWrapper = _table$$refs.headerWrapper,
	        appendWrapper = _table$$refs.appendWrapper,
	        footerWrapper = _table$$refs.footerWrapper;
	
	    this.appendHeight = appendWrapper ? appendWrapper.offsetHeight : 0;
	
	    if (this.showHeader && !headerWrapper) return;
	
	    // fix issue (https://github.com/ElemeFE/element/pull/16956)
	    var headerTrElm = headerWrapper ? headerWrapper.querySelector('.el-table__header tr') : null;
	    var noneHeader = this.headerDisplayNone(headerTrElm);
	
	    var headerHeight = this.headerHeight = !this.showHeader ? 0 : headerWrapper.offsetHeight;
	    if (this.showHeader && !noneHeader && headerWrapper.offsetWidth > 0 && (this.table.columns || []).length > 0 && headerHeight < 2) {
	      return external_vue_default.a.nextTick(function () {
	        return _this2.updateElsHeight();
	      });
	    }
	    var tableHeight = this.tableHeight = this.table.$el.clientHeight;
	    var footerHeight = this.footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;
	    if (this.height !== null) {
	      this.bodyHeight = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);
	    }
	    this.fixedBodyHeight = this.scrollX ? this.bodyHeight - this.gutterWidth : this.bodyHeight;
	
	    var noData = !(this.store.states.data && this.store.states.data.length);
	    this.viewportHeight = this.scrollX ? tableHeight - (noData ? 0 : this.gutterWidth) : tableHeight;
	
	    this.updateScrollY();
	    this.notifyObservers('scrollable');
	  };
	
	  TableLayout.prototype.headerDisplayNone = function headerDisplayNone(elm) {
	    if (!elm) return true;
	    var headerChild = elm;
	    while (headerChild.tagName !== 'DIV') {
	      if (getComputedStyle(headerChild).display === 'none') {
	        return true;
	      }
	      headerChild = headerChild.parentElement;
	    }
	    return false;
	  };
	
	  TableLayout.prototype.updateColumnsWidth = function updateColumnsWidth() {
	    if (external_vue_default.a.prototype.$isServer) return;
	    var fit = this.fit;
	    var bodyWidth = this.table.$el.clientWidth;
	    var bodyMinWidth = 0;
	
	    var flattenColumns = this.getFlattenColumns();
	    var flexColumns = flattenColumns.filter(function (column) {
	      return typeof column.width !== 'number';
	    });
	
	    flattenColumns.forEach(function (column) {
	      // Clean those columns whose width changed from flex to unflex
	      if (typeof column.width === 'number' && column.realWidth) column.realWidth = null;
	    });
	
	    if (flexColumns.length > 0 && fit) {
	      flattenColumns.forEach(function (column) {
	        bodyMinWidth += column.width || column.minWidth || 80;
	      });
	
	      var scrollYWidth = this.scrollY ? this.gutterWidth : 0;
	
	      if (bodyMinWidth <= bodyWidth - scrollYWidth) {
	        // DON'T HAVE SCROLL BAR
	        this.scrollX = false;
	
	        var totalFlexWidth = bodyWidth - scrollYWidth - bodyMinWidth;
	
	        if (flexColumns.length === 1) {
	          flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth;
	        } else {
	          var allColumnsWidth = flexColumns.reduce(function (prev, column) {
	            return prev + (column.minWidth || 80);
	          }, 0);
	          var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
	          var noneFirstWidth = 0;
	
	          flexColumns.forEach(function (column, index) {
	            if (index === 0) return;
	            var flexWidth = Math.floor((column.minWidth || 80) * flexWidthPerPixel);
	            noneFirstWidth += flexWidth;
	            column.realWidth = (column.minWidth || 80) + flexWidth;
	          });
	
	          flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
	        }
	      } else {
	        // HAVE HORIZONTAL SCROLL BAR
	        this.scrollX = true;
	        flexColumns.forEach(function (column) {
	          column.realWidth = column.minWidth;
	        });
	      }
	
	      this.bodyWidth = Math.max(bodyMinWidth, bodyWidth);
	      this.table.resizeState.width = this.bodyWidth;
	    } else {
	      flattenColumns.forEach(function (column) {
	        if (!column.width && !column.minWidth) {
	          column.realWidth = 80;
	        } else {
	          column.realWidth = column.width || column.minWidth;
	        }
	
	        bodyMinWidth += column.realWidth;
	      });
	      this.scrollX = bodyMinWidth > bodyWidth;
	
	      this.bodyWidth = bodyMinWidth;
	    }
	
	    var fixedColumns = this.store.states.fixedColumns;
	
	    if (fixedColumns.length > 0) {
	      var fixedWidth = 0;
	      fixedColumns.forEach(function (column) {
	        fixedWidth += column.realWidth || column.width;
	      });
	
	      this.fixedWidth = fixedWidth;
	    }
	
	    var rightFixedColumns = this.store.states.rightFixedColumns;
	    if (rightFixedColumns.length > 0) {
	      var rightFixedWidth = 0;
	      rightFixedColumns.forEach(function (column) {
	        rightFixedWidth += column.realWidth || column.width;
	      });
	
	      this.rightFixedWidth = rightFixedWidth;
	    }
	
	    this.notifyObservers('columns');
	  };
	
	  TableLayout.prototype.addObserver = function addObserver(observer) {
	    this.observers.push(observer);
	  };
	
	  TableLayout.prototype.removeObserver = function removeObserver(observer) {
	    var index = this.observers.indexOf(observer);
	    if (index !== -1) {
	      this.observers.splice(index, 1);
	    }
	  };
	
	  TableLayout.prototype.notifyObservers = function notifyObservers(event) {
	    var _this3 = this;
	
	    var observers = this.observers;
	    observers.forEach(function (observer) {
	      switch (event) {
	        case 'columns':
	          observer.onColumnsChange(_this3);
	          break;
	        case 'scrollable':
	          observer.onScrollableChange(_this3);
	          break;
	        default:
	          throw new Error('Table Layout don\'t have event ' + event + '.');
	      }
	    });
	  };
	
	  return TableLayout;
	}();
	
	/* harmony default export */ var table_layout = (table_layout_TableLayout);
	// EXTERNAL MODULE: external "element-ui/lib/utils/dom"
	var dom_ = __webpack_require__(2);
	
	// EXTERNAL MODULE: external "element-ui/lib/tooltip"
	var tooltip_ = __webpack_require__(29);
	var tooltip_default = /*#__PURE__*/__webpack_require__.n(tooltip_);
	
	// CONCATENATED MODULE: ./packages/table/src/layout-observer.js
	/* harmony default export */ var layout_observer = ({
	  created: function created() {
	    this.tableLayout.addObserver(this);
	  },
	  destroyed: function destroyed() {
	    this.tableLayout.removeObserver(this);
	  },
	
	
	  computed: {
	    tableLayout: function tableLayout() {
	      var layout = this.layout;
	      if (!layout && this.table) {
	        layout = this.table.layout;
	      }
	      if (!layout) {
	        throw new Error('Can not find table layout.');
	      }
	      return layout;
	    }
	  },
	
	  mounted: function mounted() {
	    this.onColumnsChange(this.tableLayout);
	    this.onScrollableChange(this.tableLayout);
	  },
	  updated: function updated() {
	    if (this.__updated__) return;
	    this.onColumnsChange(this.tableLayout);
	    this.onScrollableChange(this.tableLayout);
	    this.__updated__ = true;
	  },
	
	
	  methods: {
	    onColumnsChange: function onColumnsChange(layout) {
	      var cols = this.$el.querySelectorAll('colgroup > col');
	      if (!cols.length) return;
	      var flattenColumns = layout.getFlattenColumns();
	      var columnsMap = {};
	      flattenColumns.forEach(function (column) {
	        columnsMap[column.id] = column;
	      });
	      for (var i = 0, j = cols.length; i < j; i++) {
	        var col = cols[i];
	        var name = col.getAttribute('name');
	        var column = columnsMap[name];
	        if (column) {
	          col.setAttribute('width', column.realWidth || column.width);
	        }
	      }
	    },
	    onScrollableChange: function onScrollableChange(layout) {
	      var cols = this.$el.querySelectorAll('colgroup > col[name=gutter]');
	      for (var i = 0, j = cols.length; i < j; i++) {
	        var col = cols[i];
	        col.setAttribute('width', layout.scrollY ? layout.gutterWidth : '0');
	      }
	      var ths = this.$el.querySelectorAll('th.gutter');
	      for (var _i = 0, _j = ths.length; _i < _j; _i++) {
	        var th = ths[_i];
	        th.style.width = layout.scrollY ? layout.gutterWidth + 'px' : '0';
	        th.style.display = layout.scrollY ? '' : 'none';
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/table/src/table-body.js
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var table_body_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	
	
	
	
	
	
	
	
	
	/* harmony default export */ var table_body = ({
	  name: 'ElTableBody',
	
	  mixins: [layout_observer],
	
	  components: {
	    ElCheckbox: checkbox_default.a,
	    ElTooltip: tooltip_default.a
	  },
	
	  props: {
	    store: {
	      required: true
	    },
	    stripe: Boolean,
	    context: {},
	    rowClassName: [String, Function],
	    rowStyle: [Object, Function],
	    fixed: String,
	    highlight: Boolean
	  },
	
	  render: function render(h) {
	    var _this = this;
	
	    var data = this.data || [];
	    return h(
	      'table',
	      {
	        'class': 'el-table__body',
	        attrs: { cellspacing: '0',
	          cellpadding: '0',
	          border: '0' }
	      },
	      [h('colgroup', [this.columns.map(function (column) {
	        return h('col', {
	          attrs: { name: column.id },
	          key: column.id });
	      })]), h('tbody', [data.reduce(function (acc, row) {
	        return acc.concat(_this.wrappedRowRender(row, acc.length));
	      }, []), h('el-tooltip', {
	        attrs: { effect: this.table.tooltipEffect, placement: 'top', content: this.tooltipContent },
	        ref: 'tooltip' })])]
	    );
	  },
	
	
	  computed: table_body_extends({
	    table: function table() {
	      return this.$parent;
	    }
	  }, mapStates({
	    data: 'data',
	    columns: 'columns',
	    treeIndent: 'indent',
	    leftFixedLeafCount: 'fixedLeafColumnsLength',
	    rightFixedLeafCount: 'rightFixedLeafColumnsLength',
	    columnsCount: function columnsCount(states) {
	      return states.columns.length;
	    },
	    leftFixedCount: function leftFixedCount(states) {
	      return states.fixedColumns.length;
	    },
	    rightFixedCount: function rightFixedCount(states) {
	      return states.rightFixedColumns.length;
	    },
	    hasExpandColumn: function hasExpandColumn(states) {
	      return states.columns.some(function (_ref) {
	        var type = _ref.type;
	        return type === 'expand';
	      });
	    }
	  }), {
	    firstDefaultColumnIndex: function firstDefaultColumnIndex() {
	      return Object(util_["arrayFindIndex"])(this.columns, function (_ref2) {
	        var type = _ref2.type;
	        return type === 'default';
	      });
	    }
	  }),
	
	  watch: {
	    // don't trigger getter of currentRow in getCellClass. see https://jsfiddle.net/oe2b4hqt/
	    // update DOM manually. see https://github.com/ElemeFE/element/pull/13954/files#diff-9b450c00d0a9dec0ffad5a3176972e40
	    'store.states.hoverRow': function storeStatesHoverRow(newVal, oldVal) {
	      var _this2 = this;
	
	      if (!this.store.states.isComplex || this.$isServer) return;
	      var raf = window.requestAnimationFrame;
	      if (!raf) {
	        raf = function raf(fn) {
	          return setTimeout(fn, 16);
	        };
	      }
	      raf(function () {
	        var rows = _this2.$el.querySelectorAll('.el-table__row');
	        var oldRow = rows[oldVal];
	        var newRow = rows[newVal];
	        if (oldRow) {
	          Object(dom_["removeClass"])(oldRow, 'hover-row');
	        }
	        if (newRow) {
	          Object(dom_["addClass"])(newRow, 'hover-row');
	        }
	      });
	    }
	  },
	
	  data: function data() {
	    return {
	      tooltipContent: ''
	    };
	  },
	  created: function created() {
	    this.activateTooltip = debounce_default()(50, function (tooltip) {
	      return tooltip.handleShowPopper();
	    });
	  },
	
	
	  methods: {
	    getKeyOfRow: function getKeyOfRow(row, index) {
	      var rowKey = this.table.rowKey;
	      if (rowKey) {
	        return Object(util["g" /* getRowIdentity */])(row, rowKey);
	      }
	      return index;
	    },
	    isColumnHidden: function isColumnHidden(index) {
	      if (this.fixed === true || this.fixed === 'left') {
	        return index >= this.leftFixedLeafCount;
	      } else if (this.fixed === 'right') {
	        return index < this.columnsCount - this.rightFixedLeafCount;
	      } else {
	        return index < this.leftFixedLeafCount || index >= this.columnsCount - this.rightFixedLeafCount;
	      }
	    },
	    getSpan: function getSpan(row, column, rowIndex, columnIndex) {
	      var rowspan = 1;
	      var colspan = 1;
	      var fn = this.table.spanMethod;
	      if (typeof fn === 'function') {
	        var result = fn({
	          row: row,
	          column: column,
	          rowIndex: rowIndex,
	          columnIndex: columnIndex
	        });
	        if (Array.isArray(result)) {
	          rowspan = result[0];
	          colspan = result[1];
	        } else if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
	          rowspan = result.rowspan;
	          colspan = result.colspan;
	        }
	      }
	      return { rowspan: rowspan, colspan: colspan };
	    },
	    getRowStyle: function getRowStyle(row, rowIndex) {
	      var rowStyle = this.table.rowStyle;
	      if (typeof rowStyle === 'function') {
	        return rowStyle.call(null, {
	          row: row,
	          rowIndex: rowIndex
	        });
	      }
	      return rowStyle || null;
	    },
	    getRowClass: function getRowClass(row, rowIndex) {
	      var classes = ['el-table__row'];
	      if (this.table.highlightCurrentRow && row === this.store.states.currentRow) {
	        classes.push('current-row');
	      }
	
	      if (this.stripe && rowIndex % 2 === 1) {
	        classes.push('el-table__row--striped');
	      }
	      var rowClassName = this.table.rowClassName;
	      if (typeof rowClassName === 'string') {
	        classes.push(rowClassName);
	      } else if (typeof rowClassName === 'function') {
	        classes.push(rowClassName.call(null, {
	          row: row,
	          rowIndex: rowIndex
	        }));
	      }
	
	      if (this.store.states.expandRows.indexOf(row) > -1) {
	        classes.push('expanded');
	      }
	
	      return classes;
	    },
	    getCellStyle: function getCellStyle(rowIndex, columnIndex, row, column) {
	      var cellStyle = this.table.cellStyle;
	      if (typeof cellStyle === 'function') {
	        return cellStyle.call(null, {
	          rowIndex: rowIndex,
	          columnIndex: columnIndex,
	          row: row,
	          column: column
	        });
	      }
	      return cellStyle;
	    },
	    getCellClass: function getCellClass(rowIndex, columnIndex, row, column) {
	      var classes = [column.id, column.align, column.className];
	
	      if (this.isColumnHidden(columnIndex)) {
	        classes.push('is-hidden');
	      }
	
	      var cellClassName = this.table.cellClassName;
	      if (typeof cellClassName === 'string') {
	        classes.push(cellClassName);
	      } else if (typeof cellClassName === 'function') {
	        classes.push(cellClassName.call(null, {
	          rowIndex: rowIndex,
	          columnIndex: columnIndex,
	          row: row,
	          column: column
	        }));
	      }
	
	      return classes.join(' ');
	    },
	    getColspanRealWidth: function getColspanRealWidth(columns, colspan, index) {
	      if (colspan < 1) {
	        return columns[index].realWidth;
	      }
	      var widthArr = columns.map(function (_ref3) {
	        var realWidth = _ref3.realWidth;
	        return realWidth;
	      }).slice(index, index + colspan);
	      return widthArr.reduce(function (acc, width) {
	        return acc + width;
	      }, -1);
	    },
	    handleCellMouseEnter: function handleCellMouseEnter(event, row) {
	      var table = this.table;
	      var cell = Object(util["b" /* getCell */])(event);
	
	      if (cell) {
	        var column = Object(util["c" /* getColumnByCell */])(table, cell);
	        var hoverState = table.hoverState = { cell: cell, column: column, row: row };
	        table.$emit('cell-mouse-enter', hoverState.row, hoverState.column, hoverState.cell, event);
	      }
	
	      // 判断是否text-overflow, 如果是就显示tooltip
	      var cellChild = event.target.querySelector('.cell');
	      if (!(Object(dom_["hasClass"])(cellChild, 'el-tooltip') && cellChild.childNodes.length)) {
	        return;
	      }
	      // use range width instead of scrollWidth to determine whether the text is overflowing
	      // to address a potential FireFox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1074543#c3
	      var range = document.createRange();
	      range.setStart(cellChild, 0);
	      range.setEnd(cellChild, cellChild.childNodes.length);
	      var rangeWidth = range.getBoundingClientRect().width;
	      var padding = (parseInt(Object(dom_["getStyle"])(cellChild, 'paddingLeft'), 10) || 0) + (parseInt(Object(dom_["getStyle"])(cellChild, 'paddingRight'), 10) || 0);
	      if ((rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) && this.$refs.tooltip) {
	        var tooltip = this.$refs.tooltip;
	        // TODO 会引起整个 Table 的重新渲染，需要优化
	        this.tooltipContent = cell.innerText || cell.textContent;
	        tooltip.referenceElm = cell;
	        tooltip.$refs.popper && (tooltip.$refs.popper.style.display = 'none');
	        tooltip.doDestroy();
	        tooltip.setExpectedState(true);
	        this.activateTooltip(tooltip);
	      }
	    },
	    handleCellMouseLeave: function handleCellMouseLeave(event) {
	      var tooltip = this.$refs.tooltip;
	      if (tooltip) {
	        tooltip.setExpectedState(false);
	        tooltip.handleClosePopper();
	      }
	      var cell = Object(util["b" /* getCell */])(event);
	      if (!cell) return;
	
	      var oldHoverState = this.table.hoverState || {};
	      this.table.$emit('cell-mouse-leave', oldHoverState.row, oldHoverState.column, oldHoverState.cell, event);
	    },
	
	
	    handleMouseEnter: debounce_default()(30, function (index) {
	      this.store.commit('setHoverRow', index);
	    }),
	
	    handleMouseLeave: debounce_default()(30, function () {
	      this.store.commit('setHoverRow', null);
	    }),
	
	    handleContextMenu: function handleContextMenu(event, row) {
	      this.handleEvent(event, row, 'contextmenu');
	    },
	    handleDoubleClick: function handleDoubleClick(event, row) {
	      this.handleEvent(event, row, 'dblclick');
	    },
	    handleClick: function handleClick(event, row) {
	      this.store.commit('setCurrentRow', row);
	      this.handleEvent(event, row, 'click');
	    },
	    handleEvent: function handleEvent(event, row, name) {
	      var table = this.table;
	      var cell = Object(util["b" /* getCell */])(event);
	      var column = void 0;
	      if (cell) {
	        column = Object(util["c" /* getColumnByCell */])(table, cell);
	        if (column) {
	          table.$emit('cell-' + name, row, column, cell, event);
	        }
	      }
	      table.$emit('row-' + name, row, column, event);
	    },
	    rowRender: function rowRender(row, $index, treeRowData) {
	      var _this3 = this;
	
	      var h = this.$createElement;
	      var treeIndent = this.treeIndent,
	          columns = this.columns,
	          firstDefaultColumnIndex = this.firstDefaultColumnIndex;
	
	      var columnsHidden = columns.map(function (column, index) {
	        return _this3.isColumnHidden(index);
	      });
	      var rowClasses = this.getRowClass(row, $index);
	      var display = true;
	      if (treeRowData) {
	        rowClasses.push('el-table__row--level-' + treeRowData.level);
	        display = treeRowData.display;
	      }
	      // 指令 v-show 会覆盖 row-style 中 display
	      // 使用 :style 代替 v-show https://github.com/ElemeFE/element/issues/16995
	      var displayStyle = display ? null : {
	        display: 'none'
	      };
	      return h(
	        'tr',
	        {
	          style: [displayStyle, this.getRowStyle(row, $index)],
	          'class': rowClasses,
	          key: this.getKeyOfRow(row, $index),
	          on: {
	            'dblclick': function dblclick($event) {
	              return _this3.handleDoubleClick($event, row);
	            },
	            'click': function click($event) {
	              return _this3.handleClick($event, row);
	            },
	            'contextmenu': function contextmenu($event) {
	              return _this3.handleContextMenu($event, row);
	            },
	            'mouseenter': function mouseenter(_) {
	              return _this3.handleMouseEnter($index);
	            },
	            'mouseleave': this.handleMouseLeave
	          }
	        },
	        [columns.map(function (column, cellIndex) {
	          var _getSpan = _this3.getSpan(row, column, $index, cellIndex),
	              rowspan = _getSpan.rowspan,
	              colspan = _getSpan.colspan;
	
	          if (!rowspan || !colspan) {
	            return null;
	          }
	          var columnData = table_body_extends({}, column);
	          columnData.realWidth = _this3.getColspanRealWidth(columns, colspan, cellIndex);
	          var data = {
	            store: _this3.store,
	            _self: _this3.context || _this3.table.$vnode.context,
	            column: columnData,
	            row: row,
	            $index: $index
	          };
	          if (cellIndex === firstDefaultColumnIndex && treeRowData) {
	            data.treeNode = {
	              indent: treeRowData.level * treeIndent,
	              level: treeRowData.level
	            };
	            if (typeof treeRowData.expanded === 'boolean') {
	              data.treeNode.expanded = treeRowData.expanded;
	              // 表明是懒加载
	              if ('loading' in treeRowData) {
	                data.treeNode.loading = treeRowData.loading;
	              }
	              if ('noLazyChildren' in treeRowData) {
	                data.treeNode.noLazyChildren = treeRowData.noLazyChildren;
	              }
	            }
	          }
	          return h(
	            'td',
	            {
	              style: _this3.getCellStyle($index, cellIndex, row, column),
	              'class': _this3.getCellClass($index, cellIndex, row, column),
	              attrs: { rowspan: rowspan,
	                colspan: colspan
	              },
	              on: {
	                'mouseenter': function mouseenter($event) {
	                  return _this3.handleCellMouseEnter($event, row);
	                },
	                'mouseleave': _this3.handleCellMouseLeave
	              }
	            },
	            [column.renderCell.call(_this3._renderProxy, _this3.$createElement, data, columnsHidden[cellIndex])]
	          );
	        })]
	      );
	    },
	    wrappedRowRender: function wrappedRowRender(row, $index) {
	      var _this4 = this;
	
	      var h = this.$createElement;
	
	      var store = this.store;
	      var isRowExpanded = store.isRowExpanded,
	          assertRowKey = store.assertRowKey;
	      var _store$states = store.states,
	          treeData = _store$states.treeData,
	          lazyTreeNodeMap = _store$states.lazyTreeNodeMap,
	          childrenColumnName = _store$states.childrenColumnName,
	          rowKey = _store$states.rowKey;
	
	      if (this.hasExpandColumn && isRowExpanded(row)) {
	        var renderExpanded = this.table.renderExpanded;
	        var tr = this.rowRender(row, $index);
	        if (!renderExpanded) {
	          console.error('[Element Error]renderExpanded is required.');
	          return tr;
	        }
	        // 使用二维数组，避免修改 $index
	        return [[tr, h(
	          'tr',
	          { key: 'expanded-row__' + tr.key },
	          [h(
	            'td',
	            {
	              attrs: { colspan: this.columnsCount },
	              'class': 'el-table__expanded-cell' },
	            [renderExpanded(this.$createElement, { row: row, $index: $index, store: this.store })]
	          )]
	        )]];
	      } else if (Object.keys(treeData).length) {
	        assertRowKey();
	        // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算
	        // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作
	        var key = Object(util["g" /* getRowIdentity */])(row, rowKey);
	        var cur = treeData[key];
	        var treeRowData = null;
	        if (cur) {
	          treeRowData = {
	            expanded: cur.expanded,
	            level: cur.level,
	            display: true
	          };
	          if (typeof cur.lazy === 'boolean') {
	            if (typeof cur.loaded === 'boolean' && cur.loaded) {
	              treeRowData.noLazyChildren = !(cur.children && cur.children.length);
	            }
	            treeRowData.loading = cur.loading;
	          }
	        }
	        var tmp = [this.rowRender(row, $index, treeRowData)];
	        // 渲染嵌套数据
	        if (cur) {
	          // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index
	          var i = 0;
	          var traverse = function traverse(children, parent) {
	            if (!(children && children.length && parent)) return;
	            children.forEach(function (node) {
	              // 父节点的 display 状态影响子节点的显示状态
	              var innerTreeRowData = {
	                display: parent.display && parent.expanded,
	                level: parent.level + 1
	              };
	              var childKey = Object(util["g" /* getRowIdentity */])(node, rowKey);
	              if (childKey === undefined || childKey === null) {
	                throw new Error('for nested data item, row-key is required.');
	              }
	              cur = table_body_extends({}, treeData[childKey]);
	              // 对于当前节点，分成有无子节点两种情况。
	              // 如果包含子节点的，设置 expanded 属性。
	              // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。
	              if (cur) {
	                innerTreeRowData.expanded = cur.expanded;
	                // 懒加载的某些节点，level 未知
	                cur.level = cur.level || innerTreeRowData.level;
	                cur.display = !!(cur.expanded && innerTreeRowData.display);
	                if (typeof cur.lazy === 'boolean') {
	                  if (typeof cur.loaded === 'boolean' && cur.loaded) {
	                    innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);
	                  }
	                  innerTreeRowData.loading = cur.loading;
	                }
	              }
	              i++;
	              tmp.push(_this4.rowRender(node, $index + i, innerTreeRowData));
	              if (cur) {
	                var _nodes = lazyTreeNodeMap[childKey] || node[childrenColumnName];
	                traverse(_nodes, cur);
	              }
	            });
	          };
	          // 对于 root 节点，display 一定为 true
	          cur.display = true;
	          var nodes = lazyTreeNodeMap[key] || row[childrenColumnName];
	          traverse(nodes, cur);
	        }
	        return tmp;
	      } else {
	        return this.rowRender(row, $index);
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/filter-panel.vue?vue&type=template&id=7f2c919f&
	var filter_panelvue_type_template_id_7f2c919f_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c("transition", { attrs: { name: "el-zoom-in-top" } }, [
	    _vm.multiple
	      ? _c(
	          "div",
	          {
	            directives: [
	              {
	                name: "clickoutside",
	                rawName: "v-clickoutside",
	                value: _vm.handleOutsideClick,
	                expression: "handleOutsideClick"
	              },
	              {
	                name: "show",
	                rawName: "v-show",
	                value: _vm.showPopper,
	                expression: "showPopper"
	              }
	            ],
	            staticClass: "el-table-filter"
	          },
	          [
	            _c(
	              "div",
	              { staticClass: "el-table-filter__content" },
	              [
	                _c(
	                  "el-scrollbar",
	                  { attrs: { "wrap-class": "el-table-filter__wrap" } },
	                  [
	                    _c(
	                      "el-checkbox-group",
	                      {
	                        staticClass: "el-table-filter__checkbox-group",
	                        model: {
	                          value: _vm.filteredValue,
	                          callback: function($$v) {
	                            _vm.filteredValue = $$v
	                          },
	                          expression: "filteredValue"
	                        }
	                      },
	                      _vm._l(_vm.filters, function(filter) {
	                        return _c(
	                          "el-checkbox",
	                          { key: filter.value, attrs: { label: filter.value } },
	                          [_vm._v(_vm._s(filter.text))]
	                        )
	                      }),
	                      1
	                    )
	                  ],
	                  1
	                )
	              ],
	              1
	            ),
	            _c("div", { staticClass: "el-table-filter__bottom" }, [
	              _c(
	                "button",
	                {
	                  class: { "is-disabled": _vm.filteredValue.length === 0 },
	                  attrs: { disabled: _vm.filteredValue.length === 0 },
	                  on: { click: _vm.handleConfirm }
	                },
	                [_vm._v(_vm._s(_vm.t("el.table.confirmFilter")))]
	              ),
	              _c("button", { on: { click: _vm.handleReset } }, [
	                _vm._v(_vm._s(_vm.t("el.table.resetFilter")))
	              ])
	            ])
	          ]
	        )
	      : _c(
	          "div",
	          {
	            directives: [
	              {
	                name: "clickoutside",
	                rawName: "v-clickoutside",
	                value: _vm.handleOutsideClick,
	                expression: "handleOutsideClick"
	              },
	              {
	                name: "show",
	                rawName: "v-show",
	                value: _vm.showPopper,
	                expression: "showPopper"
	              }
	            ],
	            staticClass: "el-table-filter"
	          },
	          [
	            _c(
	              "ul",
	              { staticClass: "el-table-filter__list" },
	              [
	                _c(
	                  "li",
	                  {
	                    staticClass: "el-table-filter__list-item",
	                    class: {
	                      "is-active":
	                        _vm.filterValue === undefined ||
	                        _vm.filterValue === null
	                    },
	                    on: {
	                      click: function($event) {
	                        _vm.handleSelect(null)
	                      }
	                    }
	                  },
	                  [_vm._v(_vm._s(_vm.t("el.table.clearFilter")))]
	                ),
	                _vm._l(_vm.filters, function(filter) {
	                  return _c(
	                    "li",
	                    {
	                      key: filter.value,
	                      staticClass: "el-table-filter__list-item",
	                      class: { "is-active": _vm.isActive(filter) },
	                      attrs: { label: filter.value },
	                      on: {
	                        click: function($event) {
	                          _vm.handleSelect(filter.value)
	                        }
	                      }
	                    },
	                    [_vm._v(_vm._s(filter.text))]
	                  )
	                })
	              ],
	              2
	            )
	          ]
	        )
	  ])
	}
	var filter_panelvue_type_template_id_7f2c919f_staticRenderFns = []
	filter_panelvue_type_template_id_7f2c919f_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/table/src/filter-panel.vue?vue&type=template&id=7f2c919f&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/vue-popper"
	var vue_popper_ = __webpack_require__(5);
	var vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/popup"
	var popup_ = __webpack_require__(15);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/clickoutside"
	var clickoutside_ = __webpack_require__(12);
	var clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);
	
	// CONCATENATED MODULE: ./packages/table/src/dropdown.js
	
	var dropdowns = [];
	
	!external_vue_default.a.prototype.$isServer && document.addEventListener('click', function (event) {
	  dropdowns.forEach(function (dropdown) {
	    var target = event.target;
	    if (!dropdown || !dropdown.$el) return;
	    if (target === dropdown.$el || dropdown.$el.contains(target)) {
	      return;
	    }
	    dropdown.handleOutsideClick && dropdown.handleOutsideClick(event);
	  });
	});
	
	/* harmony default export */ var dropdown = ({
	  open: function open(instance) {
	    if (instance) {
	      dropdowns.push(instance);
	    }
	  },
	  close: function close(instance) {
	    var index = dropdowns.indexOf(instance);
	    if (index !== -1) {
	      dropdowns.splice(instance, 1);
	    }
	  }
	});
	// EXTERNAL MODULE: external "element-ui/lib/checkbox-group"
	var checkbox_group_ = __webpack_require__(39);
	var checkbox_group_default = /*#__PURE__*/__webpack_require__.n(checkbox_group_);
	
	// EXTERNAL MODULE: external "element-ui/lib/scrollbar"
	var scrollbar_ = __webpack_require__(14);
	var scrollbar_default = /*#__PURE__*/__webpack_require__.n(scrollbar_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/filter-panel.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	
	
	
	/* harmony default export */ var filter_panelvue_type_script_lang_js_ = ({
	  name: 'ElTableFilterPanel',
	
	  mixins: [vue_popper_default.a, locale_default.a],
	
	  directives: {
	    Clickoutside: clickoutside_default.a
	  },
	
	  components: {
	    ElCheckbox: checkbox_default.a,
	    ElCheckboxGroup: checkbox_group_default.a,
	    ElScrollbar: scrollbar_default.a
	  },
	
	  props: {
	    placement: {
	      type: String,
	      default: 'bottom-end'
	    }
	  },
	
	  methods: {
	    isActive: function isActive(filter) {
	      return filter.value === this.filterValue;
	    },
	    handleOutsideClick: function handleOutsideClick() {
	      var _this = this;
	
	      setTimeout(function () {
	        _this.showPopper = false;
	      }, 16);
	    },
	    handleConfirm: function handleConfirm() {
	      this.confirmFilter(this.filteredValue);
	      this.handleOutsideClick();
	    },
	    handleReset: function handleReset() {
	      this.filteredValue = [];
	      this.confirmFilter(this.filteredValue);
	      this.handleOutsideClick();
	    },
	    handleSelect: function handleSelect(filterValue) {
	      this.filterValue = filterValue;
	
	      if (typeof filterValue !== 'undefined' && filterValue !== null) {
	        this.confirmFilter(this.filteredValue);
	      } else {
	        this.confirmFilter([]);
	      }
	
	      this.handleOutsideClick();
	    },
	    confirmFilter: function confirmFilter(filteredValue) {
	      this.table.store.commit('filterChange', {
	        column: this.column,
	        values: filteredValue
	      });
	      this.table.store.updateAllSelected();
	    }
	  },
	
	  data: function data() {
	    return {
	      table: null,
	      cell: null,
	      column: null
	    };
	  },
	
	
	  computed: {
	    filters: function filters() {
	      return this.column && this.column.filters;
	    },
	
	
	    filterValue: {
	      get: function get() {
	        return (this.column.filteredValue || [])[0];
	      },
	      set: function set(value) {
	        if (this.filteredValue) {
	          if (typeof value !== 'undefined' && value !== null) {
	            this.filteredValue.splice(0, 1, value);
	          } else {
	            this.filteredValue.splice(0, 1);
	          }
	        }
	      }
	    },
	
	    filteredValue: {
	      get: function get() {
	        if (this.column) {
	          return this.column.filteredValue || [];
	        }
	        return [];
	      },
	      set: function set(value) {
	        if (this.column) {
	          this.column.filteredValue = value;
	        }
	      }
	    },
	
	    multiple: function multiple() {
	      if (this.column) {
	        return this.column.filterMultiple;
	      }
	      return true;
	    }
	  },
	
	  mounted: function mounted() {
	    var _this2 = this;
	
	    this.popperElm = this.$el;
	    this.referenceElm = this.cell;
	    this.table.bodyWrapper.addEventListener('scroll', function () {
	      _this2.updatePopper();
	    });
	
	    this.$watch('showPopper', function (value) {
	      if (_this2.column) _this2.column.filterOpened = value;
	      if (value) {
	        dropdown.open(_this2);
	      } else {
	        dropdown.close(_this2);
	      }
	    });
	  },
	
	  watch: {
	    showPopper: function showPopper(val) {
	      if (val === true && parseInt(this.popperJS._popper.style.zIndex, 10) < popup_["PopupManager"].zIndex) {
	        this.popperJS._popper.style.zIndex = popup_["PopupManager"].nextZIndex();
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/table/src/filter-panel.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_filter_panelvue_type_script_lang_js_ = (filter_panelvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/table/src/filter-panel.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_filter_panelvue_type_script_lang_js_,
	  filter_panelvue_type_template_id_7f2c919f_render,
	  filter_panelvue_type_template_id_7f2c919f_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/table/src/filter-panel.vue"
	/* harmony default export */ var filter_panel = (component.exports);
	// CONCATENATED MODULE: ./packages/table/src/table-header.js
	var table_header_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	
	
	
	
	
	
	
	var getAllColumns = function getAllColumns(columns) {
	  var result = [];
	  columns.forEach(function (column) {
	    if (column.children) {
	      result.push(column);
	      result.push.apply(result, getAllColumns(column.children));
	    } else {
	      result.push(column);
	    }
	  });
	  return result;
	};
	
	var convertToRows = function convertToRows(originColumns) {
	  var maxLevel = 1;
	  var traverse = function traverse(column, parent) {
	    if (parent) {
	      column.level = parent.level + 1;
	      if (maxLevel < column.level) {
	        maxLevel = column.level;
	      }
	    }
	    if (column.children) {
	      var colSpan = 0;
	      column.children.forEach(function (subColumn) {
	        traverse(subColumn, column);
	        colSpan += subColumn.colSpan;
	      });
	      column.colSpan = colSpan;
	    } else {
	      column.colSpan = 1;
	    }
	  };
	
	  originColumns.forEach(function (column) {
	    column.level = 1;
	    traverse(column);
	  });
	
	  var rows = [];
	  for (var i = 0; i < maxLevel; i++) {
	    rows.push([]);
	  }
	
	  var allColumns = getAllColumns(originColumns);
	
	  allColumns.forEach(function (column) {
	    if (!column.children) {
	      column.rowSpan = maxLevel - column.level + 1;
	    } else {
	      column.rowSpan = 1;
	    }
	    rows[column.level - 1].push(column);
	  });
	
	  return rows;
	};
	
	/* harmony default export */ var table_header = ({
	  name: 'ElTableHeader',
	
	  mixins: [layout_observer],
	
	  render: function render(h) {
	    var _this = this;
	
	    var originColumns = this.store.states.originColumns;
	    var columnRows = convertToRows(originColumns, this.columns);
	    // 是否拥有多级表头
	    var isGroup = columnRows.length > 1;
	    if (isGroup) this.$parent.isGroup = true;
	    return h(
	      'table',
	      {
	        'class': 'el-table__header',
	        attrs: { cellspacing: '0',
	          cellpadding: '0',
	          border: '0' }
	      },
	      [h('colgroup', [this.columns.map(function (column) {
	        return h('col', {
	          attrs: { name: column.id },
	          key: column.id });
	      }), this.hasGutter ? h('col', {
	        attrs: { name: 'gutter' }
	      }) : '']), h(
	        'thead',
	        { 'class': [{ 'is-group': isGroup, 'has-gutter': this.hasGutter }] },
	        [this._l(columnRows, function (columns, rowIndex) {
	          return h(
	            'tr',
	            {
	              style: _this.getHeaderRowStyle(rowIndex),
	              'class': _this.getHeaderRowClass(rowIndex)
	            },
	            [columns.map(function (column, cellIndex) {
	              return h(
	                'th',
	                {
	                  attrs: {
	                    colspan: column.colSpan,
	                    rowspan: column.rowSpan
	                  },
	                  on: {
	                    'mousemove': function mousemove($event) {
	                      return _this.handleMouseMove($event, column);
	                    },
	                    'mouseout': _this.handleMouseOut,
	                    'mousedown': function mousedown($event) {
	                      return _this.handleMouseDown($event, column);
	                    },
	                    'click': function click($event) {
	                      return _this.handleHeaderClick($event, column);
	                    },
	                    'contextmenu': function contextmenu($event) {
	                      return _this.handleHeaderContextMenu($event, column);
	                    }
	                  },
	
	                  style: _this.getHeaderCellStyle(rowIndex, cellIndex, columns, column),
	                  'class': _this.getHeaderCellClass(rowIndex, cellIndex, columns, column),
	                  key: column.id },
	                [h(
	                  'div',
	                  { 'class': ['cell', column.filteredValue && column.filteredValue.length > 0 ? 'highlight' : '', column.labelClassName] },
	                  [column.renderHeader ? column.renderHeader.call(_this._renderProxy, h, { column: column, $index: cellIndex, store: _this.store, _self: _this.$parent.$vnode.context }) : column.label, column.sortable ? h(
	                    'span',
	                    {
	                      'class': 'caret-wrapper',
	                      on: {
	                        'click': function click($event) {
	                          return _this.handleSortClick($event, column);
	                        }
	                      }
	                    },
	                    [h('i', { 'class': 'sort-caret ascending',
	                      on: {
	                        'click': function click($event) {
	                          return _this.handleSortClick($event, column, 'ascending');
	                        }
	                      }
	                    }), h('i', { 'class': 'sort-caret descending',
	                      on: {
	                        'click': function click($event) {
	                          return _this.handleSortClick($event, column, 'descending');
	                        }
	                      }
	                    })]
	                  ) : '', column.filterable ? h(
	                    'span',
	                    {
	                      'class': 'el-table__column-filter-trigger',
	                      on: {
	                        'click': function click($event) {
	                          return _this.handleFilterClick($event, column);
	                        }
	                      }
	                    },
	                    [h('i', { 'class': ['el-icon-arrow-down', column.filterOpened ? 'el-icon-arrow-up' : ''] })]
	                  ) : '']
	                )]
	              );
	            }), _this.hasGutter ? h('th', { 'class': 'gutter' }) : '']
	          );
	        })]
	      )]
	    );
	  },
	
	
	  props: {
	    fixed: String,
	    store: {
	      required: true
	    },
	    border: Boolean,
	    defaultSort: {
	      type: Object,
	      default: function _default() {
	        return {
	          prop: '',
	          order: ''
	        };
	      }
	    }
	  },
	
	  components: {
	    ElCheckbox: checkbox_default.a
	  },
	
	  computed: table_header_extends({
	    table: function table() {
	      return this.$parent;
	    },
	    hasGutter: function hasGutter() {
	      return !this.fixed && this.tableLayout.gutterWidth;
	    }
	  }, mapStates({
	    columns: 'columns',
	    isAllSelected: 'isAllSelected',
	    leftFixedLeafCount: 'fixedLeafColumnsLength',
	    rightFixedLeafCount: 'rightFixedLeafColumnsLength',
	    columnsCount: function columnsCount(states) {
	      return states.columns.length;
	    },
	    leftFixedCount: function leftFixedCount(states) {
	      return states.fixedColumns.length;
	    },
	    rightFixedCount: function rightFixedCount(states) {
	      return states.rightFixedColumns.length;
	    }
	  })),
	
	  created: function created() {
	    this.filterPanels = {};
	  },
	  mounted: function mounted() {
	    var _this2 = this;
	
	    // nextTick 是有必要的 https://github.com/ElemeFE/element/pull/11311
	    this.$nextTick(function () {
	      var _defaultSort = _this2.defaultSort,
	          prop = _defaultSort.prop,
	          order = _defaultSort.order;
	
	      var init = true;
	      _this2.store.commit('sort', { prop: prop, order: order, init: init });
	    });
	  },
	  beforeDestroy: function beforeDestroy() {
	    var panels = this.filterPanels;
	    for (var prop in panels) {
	      if (panels.hasOwnProperty(prop) && panels[prop]) {
	        panels[prop].$destroy(true);
	      }
	    }
	  },
	
	
	  methods: {
	    isCellHidden: function isCellHidden(index, columns) {
	      var start = 0;
	      for (var i = 0; i < index; i++) {
	        start += columns[i].colSpan;
	      }
	      var after = start + columns[index].colSpan - 1;
	      if (this.fixed === true || this.fixed === 'left') {
	        return after >= this.leftFixedLeafCount;
	      } else if (this.fixed === 'right') {
	        return start < this.columnsCount - this.rightFixedLeafCount;
	      } else {
	        return after < this.leftFixedLeafCount || start >= this.columnsCount - this.rightFixedLeafCount;
	      }
	    },
	    getHeaderRowStyle: function getHeaderRowStyle(rowIndex) {
	      var headerRowStyle = this.table.headerRowStyle;
	      if (typeof headerRowStyle === 'function') {
	        return headerRowStyle.call(null, { rowIndex: rowIndex });
	      }
	      return headerRowStyle;
	    },
	    getHeaderRowClass: function getHeaderRowClass(rowIndex) {
	      var classes = [];
	
	      var headerRowClassName = this.table.headerRowClassName;
	      if (typeof headerRowClassName === 'string') {
	        classes.push(headerRowClassName);
	      } else if (typeof headerRowClassName === 'function') {
	        classes.push(headerRowClassName.call(null, { rowIndex: rowIndex }));
	      }
	
	      return classes.join(' ');
	    },
	    getHeaderCellStyle: function getHeaderCellStyle(rowIndex, columnIndex, row, column) {
	      var headerCellStyle = this.table.headerCellStyle;
	      if (typeof headerCellStyle === 'function') {
	        return headerCellStyle.call(null, {
	          rowIndex: rowIndex,
	          columnIndex: columnIndex,
	          row: row,
	          column: column
	        });
	      }
	      return headerCellStyle;
	    },
	    getHeaderCellClass: function getHeaderCellClass(rowIndex, columnIndex, row, column) {
	      var classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName];
	
	      if (rowIndex === 0 && this.isCellHidden(columnIndex, row)) {
	        classes.push('is-hidden');
	      }
	
	      if (!column.children) {
	        classes.push('is-leaf');
	      }
	
	      if (column.sortable) {
	        classes.push('is-sortable');
	      }
	
	      var headerCellClassName = this.table.headerCellClassName;
	      if (typeof headerCellClassName === 'string') {
	        classes.push(headerCellClassName);
	      } else if (typeof headerCellClassName === 'function') {
	        classes.push(headerCellClassName.call(null, {
	          rowIndex: rowIndex,
	          columnIndex: columnIndex,
	          row: row,
	          column: column
	        }));
	      }
	
	      return classes.join(' ');
	    },
	    toggleAllSelection: function toggleAllSelection(event) {
	      event.stopPropagation();
	      this.store.commit('toggleAllSelection');
	    },
	    handleFilterClick: function handleFilterClick(event, column) {
	      event.stopPropagation();
	      var target = event.target;
	      var cell = target.tagName === 'TH' ? target : target.parentNode;
	      if (Object(dom_["hasClass"])(cell, 'noclick')) return;
	      cell = cell.querySelector('.el-table__column-filter-trigger') || cell;
	      var table = this.$parent;
	
	      var filterPanel = this.filterPanels[column.id];
	
	      if (filterPanel && column.filterOpened) {
	        filterPanel.showPopper = false;
	        return;
	      }
	
	      if (!filterPanel) {
	        filterPanel = new external_vue_default.a(filter_panel);
	        this.filterPanels[column.id] = filterPanel;
	        if (column.filterPlacement) {
	          filterPanel.placement = column.filterPlacement;
	        }
	        filterPanel.table = table;
	        filterPanel.cell = cell;
	        filterPanel.column = column;
	        !this.$isServer && filterPanel.$mount(document.createElement('div'));
	      }
	
	      setTimeout(function () {
	        filterPanel.showPopper = true;
	      }, 16);
	    },
	    handleHeaderClick: function handleHeaderClick(event, column) {
	      if (!column.filters && column.sortable) {
	        this.handleSortClick(event, column);
	      } else if (column.filterable && !column.sortable) {
	        this.handleFilterClick(event, column);
	      }
	
	      this.$parent.$emit('header-click', column, event);
	    },
	    handleHeaderContextMenu: function handleHeaderContextMenu(event, column) {
	      this.$parent.$emit('header-contextmenu', column, event);
	    },
	    handleMouseDown: function handleMouseDown(event, column) {
	      var _this3 = this;
	
	      if (this.$isServer) return;
	      if (column.children && column.children.length > 0) return;
	      /* istanbul ignore if */
	      if (this.draggingColumn && this.border) {
	        this.dragging = true;
	
	        this.$parent.resizeProxyVisible = true;
	
	        var table = this.$parent;
	        var tableEl = table.$el;
	        var tableLeft = tableEl.getBoundingClientRect().left;
	        var columnEl = this.$el.querySelector('th.' + column.id);
	        var columnRect = columnEl.getBoundingClientRect();
	        var minLeft = columnRect.left - tableLeft + 30;
	
	        Object(dom_["addClass"])(columnEl, 'noclick');
	
	        this.dragState = {
	          startMouseLeft: event.clientX,
	          startLeft: columnRect.right - tableLeft,
	          startColumnLeft: columnRect.left - tableLeft,
	          tableLeft: tableLeft
	        };
	
	        var resizeProxy = table.$refs.resizeProxy;
	        resizeProxy.style.left = this.dragState.startLeft + 'px';
	
	        document.onselectstart = function () {
	          return false;
	        };
	        document.ondragstart = function () {
	          return false;
	        };
	
	        var handleMouseMove = function handleMouseMove(event) {
	          var deltaLeft = event.clientX - _this3.dragState.startMouseLeft;
	          var proxyLeft = _this3.dragState.startLeft + deltaLeft;
	
	          resizeProxy.style.left = Math.max(minLeft, proxyLeft) + 'px';
	        };
	
	        var handleMouseUp = function handleMouseUp() {
	          if (_this3.dragging) {
	            var _dragState = _this3.dragState,
	                startColumnLeft = _dragState.startColumnLeft,
	                startLeft = _dragState.startLeft;
	
	            var finalLeft = parseInt(resizeProxy.style.left, 10);
	            var columnWidth = finalLeft - startColumnLeft;
	            column.width = column.realWidth = columnWidth;
	            table.$emit('header-dragend', column.width, startLeft - startColumnLeft, column, event);
	
	            _this3.store.scheduleLayout();
	
	            document.body.style.cursor = '';
	            _this3.dragging = false;
	            _this3.draggingColumn = null;
	            _this3.dragState = {};
	
	            table.resizeProxyVisible = false;
	          }
	
	          document.removeEventListener('mousemove', handleMouseMove);
	          document.removeEventListener('mouseup', handleMouseUp);
	          document.onselectstart = null;
	          document.ondragstart = null;
	
	          setTimeout(function () {
	            Object(dom_["removeClass"])(columnEl, 'noclick');
	          }, 0);
	        };
	
	        document.addEventListener('mousemove', handleMouseMove);
	        document.addEventListener('mouseup', handleMouseUp);
	      }
	    },
	    handleMouseMove: function handleMouseMove(event, column) {
	      if (column.children && column.children.length > 0) return;
	      var target = event.target;
	      while (target && target.tagName !== 'TH') {
	        target = target.parentNode;
	      }
	
	      if (!column || !column.resizable) return;
	
	      if (!this.dragging && this.border) {
	        var rect = target.getBoundingClientRect();
	
	        var bodyStyle = document.body.style;
	        if (rect.width > 12 && rect.right - event.pageX < 8) {
	          bodyStyle.cursor = 'col-resize';
	          if (Object(dom_["hasClass"])(target, 'is-sortable')) {
	            target.style.cursor = 'col-resize';
	          }
	          this.draggingColumn = column;
	        } else if (!this.dragging) {
	          bodyStyle.cursor = '';
	          if (Object(dom_["hasClass"])(target, 'is-sortable')) {
	            target.style.cursor = 'pointer';
	          }
	          this.draggingColumn = null;
	        }
	      }
	    },
	    handleMouseOut: function handleMouseOut() {
	      if (this.$isServer) return;
	      document.body.style.cursor = '';
	    },
	    toggleOrder: function toggleOrder(_ref) {
	      var order = _ref.order,
	          sortOrders = _ref.sortOrders;
	
	      if (order === '') return sortOrders[0];
	      var index = sortOrders.indexOf(order || null);
	      return sortOrders[index > sortOrders.length - 2 ? 0 : index + 1];
	    },
	    handleSortClick: function handleSortClick(event, column, givenOrder) {
	      event.stopPropagation();
	      var order = column.order === givenOrder ? null : givenOrder || this.toggleOrder(column);
	
	      var target = event.target;
	      while (target && target.tagName !== 'TH') {
	        target = target.parentNode;
	      }
	
	      if (target && target.tagName === 'TH') {
	        if (Object(dom_["hasClass"])(target, 'noclick')) {
	          Object(dom_["removeClass"])(target, 'noclick');
	          return;
	        }
	      }
	
	      if (!column.sortable) return;
	
	      var states = this.store.states;
	      var sortProp = states.sortProp;
	      var sortOrder = void 0;
	      var sortingColumn = states.sortingColumn;
	
	      if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {
	        if (sortingColumn) {
	          sortingColumn.order = null;
	        }
	        states.sortingColumn = column;
	        sortProp = column.property;
	      }
	
	      if (!order) {
	        sortOrder = column.order = null;
	      } else {
	        sortOrder = column.order = order;
	      }
	
	      states.sortProp = sortProp;
	      states.sortOrder = sortOrder;
	
	      this.store.commit('changeSortCondition');
	    }
	  },
	
	  data: function data() {
	    return {
	      draggingColumn: null,
	      dragging: false,
	      dragState: {}
	    };
	  }
	});
	// CONCATENATED MODULE: ./packages/table/src/table-footer.js
	var table_footer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	
	
	
	/* harmony default export */ var table_footer = ({
	  name: 'ElTableFooter',
	
	  mixins: [layout_observer],
	
	  render: function render(h) {
	    var _this = this;
	
	    var sums = [];
	    if (this.summaryMethod) {
	      sums = this.summaryMethod({ columns: this.columns, data: this.store.states.data });
	    } else {
	      this.columns.forEach(function (column, index) {
	        if (index === 0) {
	          sums[index] = _this.sumText;
	          return;
	        }
	        var values = _this.store.states.data.map(function (item) {
	          return Number(item[column.property]);
	        });
	        var precisions = [];
	        var notNumber = true;
	        values.forEach(function (value) {
	          if (!isNaN(value)) {
	            notNumber = false;
	            var decimal = ('' + value).split('.')[1];
	            precisions.push(decimal ? decimal.length : 0);
	          }
	        });
	        var precision = Math.max.apply(null, precisions);
	        if (!notNumber) {
	          sums[index] = values.reduce(function (prev, curr) {
	            var value = Number(curr);
	            if (!isNaN(value)) {
	              return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
	            } else {
	              return prev;
	            }
	          }, 0);
	        } else {
	          sums[index] = '';
	        }
	      });
	    }
	
	    return h(
	      'table',
	      {
	        'class': 'el-table__footer',
	        attrs: { cellspacing: '0',
	          cellpadding: '0',
	          border: '0' }
	      },
	      [h('colgroup', [this.columns.map(function (column) {
	        return h('col', {
	          attrs: { name: column.id },
	          key: column.id });
	      }), this.hasGutter ? h('col', {
	        attrs: { name: 'gutter' }
	      }) : '']), h(
	        'tbody',
	        { 'class': [{ 'has-gutter': this.hasGutter }] },
	        [h('tr', [this.columns.map(function (column, cellIndex) {
	          return h(
	            'td',
	            {
	              key: cellIndex,
	              attrs: { colspan: column.colSpan,
	                rowspan: column.rowSpan
	              },
	              'class': _this.getRowClasses(column, cellIndex) },
	            [h(
	              'div',
	              { 'class': ['cell', column.labelClassName] },
	              [sums[cellIndex]]
	            )]
	          );
	        }), this.hasGutter ? h('th', { 'class': 'gutter' }) : ''])]
	      )]
	    );
	  },
	
	
	  props: {
	    fixed: String,
	    store: {
	      required: true
	    },
	    summaryMethod: Function,
	    sumText: String,
	    border: Boolean,
	    defaultSort: {
	      type: Object,
	      default: function _default() {
	        return {
	          prop: '',
	          order: ''
	        };
	      }
	    }
	  },
	
	  computed: table_footer_extends({
	    table: function table() {
	      return this.$parent;
	    },
	    hasGutter: function hasGutter() {
	      return !this.fixed && this.tableLayout.gutterWidth;
	    }
	  }, mapStates({
	    columns: 'columns',
	    isAllSelected: 'isAllSelected',
	    leftFixedLeafCount: 'fixedLeafColumnsLength',
	    rightFixedLeafCount: 'rightFixedLeafColumnsLength',
	    columnsCount: function columnsCount(states) {
	      return states.columns.length;
	    },
	    leftFixedCount: function leftFixedCount(states) {
	      return states.fixedColumns.length;
	    },
	    rightFixedCount: function rightFixedCount(states) {
	      return states.rightFixedColumns.length;
	    }
	  })),
	
	  methods: {
	    isCellHidden: function isCellHidden(index, columns, column) {
	      if (this.fixed === true || this.fixed === 'left') {
	        return index >= this.leftFixedLeafCount;
	      } else if (this.fixed === 'right') {
	        var before = 0;
	        for (var i = 0; i < index; i++) {
	          before += columns[i].colSpan;
	        }
	        return before < this.columnsCount - this.rightFixedLeafCount;
	      } else if (!this.fixed && column.fixed) {
	        // hide cell when footer instance is not fixed and column is fixed
	        return true;
	      } else {
	        return index < this.leftFixedCount || index >= this.columnsCount - this.rightFixedCount;
	      }
	    },
	    getRowClasses: function getRowClasses(column, cellIndex) {
	      var classes = [column.id, column.align, column.labelClassName];
	      if (column.className) {
	        classes.push(column.className);
	      }
	      if (this.isCellHidden(cellIndex, this.columns, column)) {
	        classes.push('is-hidden');
	      }
	      if (!column.children) {
	        classes.push('is-leaf');
	      }
	      return classes;
	    }
	  }
	});
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/table.vue?vue&type=script&lang=js&
	var tablevue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	var tableIdSeed = 1;
	
	/* harmony default export */ var tablevue_type_script_lang_js_ = ({
	  name: 'ElTable',
	
	  mixins: [locale_default.a, migrating_default.a],
	
	  directives: {
	    Mousewheel: directives_mousewheel
	  },
	
	  props: {
	    data: {
	      type: Array,
	      default: function _default() {
	        return [];
	      }
	    },
	
	    size: String,
	
	    width: [String, Number],
	
	    height: [String, Number],
	
	    maxHeight: [String, Number],
	
	    fit: {
	      type: Boolean,
	      default: true
	    },
	
	    stripe: Boolean,
	
	    border: Boolean,
	
	    rowKey: [String, Function],
	
	    context: {},
	
	    showHeader: {
	      type: Boolean,
	      default: true
	    },
	
	    showSummary: Boolean,
	
	    sumText: String,
	
	    summaryMethod: Function,
	
	    rowClassName: [String, Function],
	
	    rowStyle: [Object, Function],
	
	    cellClassName: [String, Function],
	
	    cellStyle: [Object, Function],
	
	    headerRowClassName: [String, Function],
	
	    headerRowStyle: [Object, Function],
	
	    headerCellClassName: [String, Function],
	
	    headerCellStyle: [Object, Function],
	
	    highlightCurrentRow: Boolean,
	
	    currentRowKey: [String, Number],
	
	    emptyText: String,
	
	    expandRowKeys: Array,
	
	    defaultExpandAll: Boolean,
	
	    defaultSort: Object,
	
	    tooltipEffect: String,
	
	    spanMethod: Function,
	
	    selectOnIndeterminate: {
	      type: Boolean,
	      default: true
	    },
	
	    indent: {
	      type: Number,
	      default: 16
	    },
	
	    treeProps: {
	      type: Object,
	      default: function _default() {
	        return {
	          hasChildren: 'hasChildren',
	          children: 'children'
	        };
	      }
	    },
	
	    lazy: Boolean,
	
	    load: Function
	  },
	
	  components: {
	    TableHeader: table_header,
	    TableFooter: table_footer,
	    TableBody: table_body,
	    ElCheckbox: checkbox_default.a
	  },
	
	  methods: {
	    getMigratingConfig: function getMigratingConfig() {
	      return {
	        events: {
	          expand: 'expand is renamed to expand-change'
	        }
	      };
	    },
	    setCurrentRow: function setCurrentRow(row) {
	      this.store.commit('setCurrentRow', row);
	    },
	    toggleRowSelection: function toggleRowSelection(row, selected) {
	      this.store.toggleRowSelection(row, selected, false);
	      this.store.updateAllSelected();
	    },
	    toggleRowExpansion: function toggleRowExpansion(row, expanded) {
	      this.store.toggleRowExpansionAdapter(row, expanded);
	    },
	    clearSelection: function clearSelection() {
	      this.store.clearSelection();
	    },
	    clearFilter: function clearFilter(columnKeys) {
	      this.store.clearFilter(columnKeys);
	    },
	    clearSort: function clearSort() {
	      this.store.clearSort();
	    },
	    handleMouseLeave: function handleMouseLeave() {
	      this.store.commit('setHoverRow', null);
	      if (this.hoverState) this.hoverState = null;
	    },
	    updateScrollY: function updateScrollY() {
	      var changed = this.layout.updateScrollY();
	      if (changed) {
	        this.layout.notifyObservers('scrollable');
	        this.layout.updateColumnsWidth();
	      }
	    },
	    handleFixedMousewheel: function handleFixedMousewheel(event, data) {
	      var bodyWrapper = this.bodyWrapper;
	      if (Math.abs(data.spinY) > 0) {
	        var currentScrollTop = bodyWrapper.scrollTop;
	        if (data.pixelY < 0 && currentScrollTop !== 0) {
	          event.preventDefault();
	        }
	        if (data.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {
	          event.preventDefault();
	        }
	        bodyWrapper.scrollTop += Math.ceil(data.pixelY / 5);
	      } else {
	        bodyWrapper.scrollLeft += Math.ceil(data.pixelX / 5);
	      }
	    },
	    handleHeaderFooterMousewheel: function handleHeaderFooterMousewheel(event, data) {
	      var pixelX = data.pixelX,
	          pixelY = data.pixelY;
	
	      if (Math.abs(pixelX) >= Math.abs(pixelY)) {
	        this.bodyWrapper.scrollLeft += data.pixelX / 5;
	      }
	    },
	
	
	    // TODO 使用 CSS transform
	    syncPostion: Object(external_throttle_debounce_["throttle"])(20, function () {
	      var _bodyWrapper = this.bodyWrapper,
	          scrollLeft = _bodyWrapper.scrollLeft,
	          scrollTop = _bodyWrapper.scrollTop,
	          offsetWidth = _bodyWrapper.offsetWidth,
	          scrollWidth = _bodyWrapper.scrollWidth;
	      var _$refs = this.$refs,
	          headerWrapper = _$refs.headerWrapper,
	          footerWrapper = _$refs.footerWrapper,
	          fixedBodyWrapper = _$refs.fixedBodyWrapper,
	          rightFixedBodyWrapper = _$refs.rightFixedBodyWrapper;
	
	      if (headerWrapper) headerWrapper.scrollLeft = scrollLeft;
	      if (footerWrapper) footerWrapper.scrollLeft = scrollLeft;
	      if (fixedBodyWrapper) fixedBodyWrapper.scrollTop = scrollTop;
	      if (rightFixedBodyWrapper) rightFixedBodyWrapper.scrollTop = scrollTop;
	      var maxScrollLeftPosition = scrollWidth - offsetWidth - 1;
	      if (scrollLeft >= maxScrollLeftPosition) {
	        this.scrollPosition = 'right';
	      } else if (scrollLeft === 0) {
	        this.scrollPosition = 'left';
	      } else {
	        this.scrollPosition = 'middle';
	      }
	    }),
	
	    bindEvents: function bindEvents() {
	      this.bodyWrapper.addEventListener('scroll', this.syncPostion, { passive: true });
	      if (this.fit) {
	        Object(resize_event_["addResizeListener"])(this.$el, this.resizeListener);
	      }
	    },
	    unbindEvents: function unbindEvents() {
	      this.bodyWrapper.removeEventListener('scroll', this.syncPostion, { passive: true });
	      if (this.fit) {
	        Object(resize_event_["removeResizeListener"])(this.$el, this.resizeListener);
	      }
	    },
	    resizeListener: function resizeListener() {
	      if (!this.$ready) return;
	      var shouldUpdateLayout = false;
	      var el = this.$el;
	      var _resizeState = this.resizeState,
	          oldWidth = _resizeState.width,
	          oldHeight = _resizeState.height;
	
	
	      var width = el.offsetWidth;
	      if (oldWidth !== width) {
	        shouldUpdateLayout = true;
	      }
	
	      var height = el.offsetHeight;
	      if ((this.height || this.shouldUpdateHeight) && oldHeight !== height) {
	        shouldUpdateLayout = true;
	      }
	
	      if (shouldUpdateLayout) {
	        this.resizeState.width = width;
	        this.resizeState.height = height;
	        this.doLayout();
	      }
	    },
	    doLayout: function doLayout() {
	      if (this.shouldUpdateHeight) {
	        this.layout.updateElsHeight();
	      }
	      this.layout.updateColumnsWidth();
	    },
	    sort: function sort(prop, order) {
	      this.store.commit('sort', { prop: prop, order: order });
	    },
	    toggleAllSelection: function toggleAllSelection() {
	      this.store.commit('toggleAllSelection');
	    }
	  },
	
	  computed: tablevue_type_script_lang_js_extends({
	    tableSize: function tableSize() {
	      return this.size || (this.$ELEMENT || {}).size;
	    },
	    bodyWrapper: function bodyWrapper() {
	      return this.$refs.bodyWrapper;
	    },
	    shouldUpdateHeight: function shouldUpdateHeight() {
	      return this.height || this.maxHeight || this.fixedColumns.length > 0 || this.rightFixedColumns.length > 0;
	    },
	    bodyWidth: function bodyWidth() {
	      var _layout = this.layout,
	          bodyWidth = _layout.bodyWidth,
	          scrollY = _layout.scrollY,
	          gutterWidth = _layout.gutterWidth;
	
	      return bodyWidth ? bodyWidth - (scrollY ? gutterWidth : 0) + 'px' : '';
	    },
	    bodyHeight: function bodyHeight() {
	      var _layout2 = this.layout,
	          _layout2$headerHeight = _layout2.headerHeight,
	          headerHeight = _layout2$headerHeight === undefined ? 0 : _layout2$headerHeight,
	          bodyHeight = _layout2.bodyHeight,
	          _layout2$footerHeight = _layout2.footerHeight,
	          footerHeight = _layout2$footerHeight === undefined ? 0 : _layout2$footerHeight;
	
	      if (this.height) {
	        return {
	          height: bodyHeight ? bodyHeight + 'px' : ''
	        };
	      } else if (this.maxHeight) {
	        var maxHeight = Object(util["j" /* parseHeight */])(this.maxHeight);
	        if (typeof maxHeight === 'number') {
	          return {
	            'max-height': maxHeight - footerHeight - (this.showHeader ? headerHeight : 0) + 'px'
	          };
	        }
	      }
	      return {};
	    },
	    fixedBodyHeight: function fixedBodyHeight() {
	      if (this.height) {
	        return {
	          height: this.layout.fixedBodyHeight ? this.layout.fixedBodyHeight + 'px' : ''
	        };
	      } else if (this.maxHeight) {
	        var maxHeight = Object(util["j" /* parseHeight */])(this.maxHeight);
	        if (typeof maxHeight === 'number') {
	          maxHeight = this.layout.scrollX ? maxHeight - this.layout.gutterWidth : maxHeight;
	          if (this.showHeader) {
	            maxHeight -= this.layout.headerHeight;
	          }
	          maxHeight -= this.layout.footerHeight;
	          return {
	            'max-height': maxHeight + 'px'
	          };
	        }
	      }
	      return {};
	    },
	    fixedHeight: function fixedHeight() {
	      if (this.maxHeight) {
	        if (this.showSummary) {
	          return {
	            bottom: 0
	          };
	        }
	        return {
	          bottom: this.layout.scrollX && this.data.length ? this.layout.gutterWidth + 'px' : ''
	        };
	      } else {
	        if (this.showSummary) {
	          return {
	            height: this.layout.tableHeight ? this.layout.tableHeight + 'px' : ''
	          };
	        }
	        return {
	          height: this.layout.viewportHeight ? this.layout.viewportHeight + 'px' : ''
	        };
	      }
	    },
	    emptyBlockStyle: function emptyBlockStyle() {
	      if (this.data && this.data.length) return null;
	      var height = '100%';
	      if (this.layout.appendHeight) {
	        height = 'calc(100% - ' + this.layout.appendHeight + 'px)';
	      }
	      return {
	        width: this.bodyWidth,
	        height: height
	      };
	    }
	  }, mapStates({
	    selection: 'selection',
	    columns: 'columns',
	    tableData: 'data',
	    fixedColumns: 'fixedColumns',
	    rightFixedColumns: 'rightFixedColumns'
	  })),
	
	  watch: {
	    height: {
	      immediate: true,
	      handler: function handler(value) {
	        this.layout.setHeight(value);
	      }
	    },
	
	    maxHeight: {
	      immediate: true,
	      handler: function handler(value) {
	        this.layout.setMaxHeight(value);
	      }
	    },
	
	    currentRowKey: {
	      immediate: true,
	      handler: function handler(value) {
	        if (!this.rowKey) return;
	        this.store.setCurrentRowKey(value);
	      }
	    },
	
	    data: {
	      immediate: true,
	      handler: function handler(value) {
	        this.store.commit('setData', value);
	      }
	    },
	
	    expandRowKeys: {
	      immediate: true,
	      handler: function handler(newVal) {
	        if (newVal) {
	          this.store.setExpandRowKeysAdapter(newVal);
	        }
	      }
	    }
	  },
	
	  created: function created() {
	    var _this = this;
	
	    this.tableId = 'el-table_' + tableIdSeed++;
	    this.debouncedUpdateLayout = Object(external_throttle_debounce_["debounce"])(50, function () {
	      return _this.doLayout();
	    });
	  },
	  mounted: function mounted() {
	    var _this2 = this;
	
	    this.bindEvents();
	    this.store.updateColumns();
	    this.doLayout();
	
	    this.resizeState = {
	      width: this.$el.offsetWidth,
	      height: this.$el.offsetHeight
	    };
	
	    // init filters
	    this.store.states.columns.forEach(function (column) {
	      if (column.filteredValue && column.filteredValue.length) {
	        _this2.store.commit('filterChange', {
	          column: column,
	          values: column.filteredValue,
	          silent: true
	        });
	      }
	    });
	
	    this.$ready = true;
	  },
	  destroyed: function destroyed() {
	    this.unbindEvents();
	  },
	  data: function data() {
	    var _treeProps = this.treeProps,
	        _treeProps$hasChildre = _treeProps.hasChildren,
	        hasChildren = _treeProps$hasChildre === undefined ? 'hasChildren' : _treeProps$hasChildre,
	        _treeProps$children = _treeProps.children,
	        children = _treeProps$children === undefined ? 'children' : _treeProps$children;
	
	    this.store = createStore(this, {
	      rowKey: this.rowKey,
	      defaultExpandAll: this.defaultExpandAll,
	      selectOnIndeterminate: this.selectOnIndeterminate,
	      // TreeTable 的相关配置
	      indent: this.indent,
	      lazy: this.lazy,
	      lazyColumnIdentifier: hasChildren,
	      childrenColumnName: children
	    });
	    var layout = new table_layout({
	      store: this.store,
	      table: this,
	      fit: this.fit,
	      showHeader: this.showHeader
	    });
	    return {
	      layout: layout,
	      isHidden: false,
	      renderExpanded: null,
	      resizeProxyVisible: false,
	      resizeState: {
	        width: null,
	        height: null
	      },
	      // 是否拥有多级表头
	      isGroup: false,
	      scrollPosition: 'left'
	    };
	  }
	});
	// CONCATENATED MODULE: ./packages/table/src/table.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_tablevue_type_script_lang_js_ = (tablevue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/table/src/table.vue
	
	
	
	
	
	/* normalize component */
	
	var table_component = Object(componentNormalizer["a" /* default */])(
	  src_tablevue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var table_api; }
	table_component.options.__file = "packages/table/src/table.vue"
	/* harmony default export */ var src_table = (table_component.exports);
	// CONCATENATED MODULE: ./packages/table/index.js
	
	
	/* istanbul ignore next */
	src_table.install = function (Vue) {
	  Vue.component(src_table.name, src_table);
	};
	
	/* harmony default export */ var packages_table = __webpack_exports__["default"] = (src_table);
	
	/***/ })
	/******/ ]);

/***/ }),
/* 44 */,
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(377), __esModule: true };

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(71);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(63)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(46)
	  , IE8_DOM_DEFINE = __webpack_require__(164)
	  , toPrimitive    = __webpack_require__(120)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(47) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(165)
	  , defined = __webpack_require__(112);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ }),
/* 50 */,
/* 51 */,
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(378), __esModule: true };

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(380), __esModule: true };

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(29)
	  , core      = __webpack_require__(25)
	  , ctx       = __webpack_require__(87)
	  , hide      = __webpack_require__(56)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ }),
/* 55 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(48)
	  , createDesc = __webpack_require__(89);
	module.exports = __webpack_require__(47) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(169)
	  , enumBugKeys = __webpack_require__(114);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 83);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 83:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox.vue?vue&type=template&id=d0387074&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "label",
	    {
	      staticClass: "el-checkbox",
	      class: [
	        _vm.border && _vm.checkboxSize
	          ? "el-checkbox--" + _vm.checkboxSize
	          : "",
	        { "is-disabled": _vm.isDisabled },
	        { "is-bordered": _vm.border },
	        { "is-checked": _vm.isChecked }
	      ],
	      attrs: { id: _vm.id }
	    },
	    [
	      _c(
	        "span",
	        {
	          staticClass: "el-checkbox__input",
	          class: {
	            "is-disabled": _vm.isDisabled,
	            "is-checked": _vm.isChecked,
	            "is-indeterminate": _vm.indeterminate,
	            "is-focus": _vm.focus
	          },
	          attrs: {
	            tabindex: _vm.indeterminate ? 0 : false,
	            role: _vm.indeterminate ? "checkbox" : false,
	            "aria-checked": _vm.indeterminate ? "mixed" : false
	          }
	        },
	        [
	          _c("span", { staticClass: "el-checkbox__inner" }),
	          _vm.trueLabel || _vm.falseLabel
	            ? _c("input", {
	                directives: [
	                  {
	                    name: "model",
	                    rawName: "v-model",
	                    value: _vm.model,
	                    expression: "model"
	                  }
	                ],
	                staticClass: "el-checkbox__original",
	                attrs: {
	                  type: "checkbox",
	                  "aria-hidden": _vm.indeterminate ? "true" : "false",
	                  name: _vm.name,
	                  disabled: _vm.isDisabled,
	                  "true-value": _vm.trueLabel,
	                  "false-value": _vm.falseLabel
	                },
	                domProps: {
	                  checked: Array.isArray(_vm.model)
	                    ? _vm._i(_vm.model, null) > -1
	                    : _vm._q(_vm.model, _vm.trueLabel)
	                },
	                on: {
	                  change: [
	                    function($event) {
	                      var $$a = _vm.model,
	                        $$el = $event.target,
	                        $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel
	                      if (Array.isArray($$a)) {
	                        var $$v = null,
	                          $$i = _vm._i($$a, $$v)
	                        if ($$el.checked) {
	                          $$i < 0 && (_vm.model = $$a.concat([$$v]))
	                        } else {
	                          $$i > -1 &&
	                            (_vm.model = $$a
	                              .slice(0, $$i)
	                              .concat($$a.slice($$i + 1)))
	                        }
	                      } else {
	                        _vm.model = $$c
	                      }
	                    },
	                    _vm.handleChange
	                  ],
	                  focus: function($event) {
	                    _vm.focus = true
	                  },
	                  blur: function($event) {
	                    _vm.focus = false
	                  }
	                }
	              })
	            : _c("input", {
	                directives: [
	                  {
	                    name: "model",
	                    rawName: "v-model",
	                    value: _vm.model,
	                    expression: "model"
	                  }
	                ],
	                staticClass: "el-checkbox__original",
	                attrs: {
	                  type: "checkbox",
	                  "aria-hidden": _vm.indeterminate ? "true" : "false",
	                  disabled: _vm.isDisabled,
	                  name: _vm.name
	                },
	                domProps: {
	                  value: _vm.label,
	                  checked: Array.isArray(_vm.model)
	                    ? _vm._i(_vm.model, _vm.label) > -1
	                    : _vm.model
	                },
	                on: {
	                  change: [
	                    function($event) {
	                      var $$a = _vm.model,
	                        $$el = $event.target,
	                        $$c = $$el.checked ? true : false
	                      if (Array.isArray($$a)) {
	                        var $$v = _vm.label,
	                          $$i = _vm._i($$a, $$v)
	                        if ($$el.checked) {
	                          $$i < 0 && (_vm.model = $$a.concat([$$v]))
	                        } else {
	                          $$i > -1 &&
	                            (_vm.model = $$a
	                              .slice(0, $$i)
	                              .concat($$a.slice($$i + 1)))
	                        }
	                      } else {
	                        _vm.model = $$c
	                      }
	                    },
	                    _vm.handleChange
	                  ],
	                  focus: function($event) {
	                    _vm.focus = true
	                  },
	                  blur: function($event) {
	                    _vm.focus = false
	                  }
	                }
	              })
	        ]
	      ),
	      _vm.$slots.default || _vm.label
	        ? _c(
	            "span",
	            { staticClass: "el-checkbox__label" },
	            [
	              _vm._t("default"),
	              !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
	            ],
	            2
	          )
	        : _vm._e()
	    ]
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/checkbox/src/checkbox.vue?vue&type=template&id=d0387074&
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	/* harmony default export */ var checkboxvue_type_script_lang_js_ = ({
	  name: 'ElCheckbox',
	
	  mixins: [emitter_default.a],
	
	  inject: {
	    elForm: {
	      default: ''
	    },
	    elFormItem: {
	      default: ''
	    }
	  },
	
	  componentName: 'ElCheckbox',
	
	  data: function data() {
	    return {
	      selfModel: false,
	      focus: false,
	      isLimitExceeded: false
	    };
	  },
	
	
	  computed: {
	    model: {
	      get: function get() {
	        return this.isGroup ? this.store : this.value !== undefined ? this.value : this.selfModel;
	      },
	      set: function set(val) {
	        if (this.isGroup) {
	          this.isLimitExceeded = false;
	          this._checkboxGroup.min !== undefined && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
	
	          this._checkboxGroup.max !== undefined && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
	
	          this.isLimitExceeded === false && this.dispatch('ElCheckboxGroup', 'input', [val]);
	        } else {
	          this.$emit('input', val);
	          this.selfModel = val;
	        }
	      }
	    },
	
	    isChecked: function isChecked() {
	      if ({}.toString.call(this.model) === '[object Boolean]') {
	        return this.model;
	      } else if (Array.isArray(this.model)) {
	        return this.model.indexOf(this.label) > -1;
	      } else if (this.model !== null && this.model !== undefined) {
	        return this.model === this.trueLabel;
	      }
	    },
	    isGroup: function isGroup() {
	      var parent = this.$parent;
	      while (parent) {
	        if (parent.$options.componentName !== 'ElCheckboxGroup') {
	          parent = parent.$parent;
	        } else {
	          this._checkboxGroup = parent;
	          return true;
	        }
	      }
	      return false;
	    },
	    store: function store() {
	      return this._checkboxGroup ? this._checkboxGroup.value : this.value;
	    },
	
	
	    /* used to make the isDisabled judgment under max/min props */
	    isLimitDisabled: function isLimitDisabled() {
	      var _checkboxGroup = this._checkboxGroup,
	          max = _checkboxGroup.max,
	          min = _checkboxGroup.min;
	
	      return !!(max || min) && this.model.length >= max && !this.isChecked || this.model.length <= min && this.isChecked;
	    },
	    isDisabled: function isDisabled() {
	      return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
	    },
	    _elFormItemSize: function _elFormItemSize() {
	      return (this.elFormItem || {}).elFormItemSize;
	    },
	    checkboxSize: function checkboxSize() {
	      var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
	      return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;
	    }
	  },
	
	  props: {
	    value: {},
	    label: {},
	    indeterminate: Boolean,
	    disabled: Boolean,
	    checked: Boolean,
	    name: String,
	    trueLabel: [String, Number],
	    falseLabel: [String, Number],
	    id: String, /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/
	    controls: String, /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/
	    border: Boolean,
	    size: String
	  },
	
	  methods: {
	    addToStore: function addToStore() {
	      if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
	        this.model.push(this.label);
	      } else {
	        this.model = this.trueLabel || true;
	      }
	    },
	    handleChange: function handleChange(ev) {
	      var _this = this;
	
	      if (this.isLimitExceeded) return;
	      var value = void 0;
	      if (ev.target.checked) {
	        value = this.trueLabel === undefined ? true : this.trueLabel;
	      } else {
	        value = this.falseLabel === undefined ? false : this.falseLabel;
	      }
	      this.$emit('change', value, ev);
	      this.$nextTick(function () {
	        if (_this.isGroup) {
	          _this.dispatch('ElCheckboxGroup', 'change', [_this._checkboxGroup.value]);
	        }
	      });
	    }
	  },
	
	  created: function created() {
	    this.checked && this.addToStore();
	  },
	  mounted: function mounted() {
	    // 为indeterminate元素 添加aria-controls 属性
	    if (this.indeterminate) {
	      this.$el.setAttribute('aria-controls', this.controls);
	    }
	  },
	
	
	  watch: {
	    value: function value(_value) {
	      this.dispatch('ElFormItem', 'el.form.change', _value);
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/checkbox/src/checkbox.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_checkboxvue_type_script_lang_js_ = (checkboxvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/checkbox/src/checkbox.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_checkboxvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/checkbox/src/checkbox.vue"
	/* harmony default export */ var src_checkbox = (component.exports);
	// CONCATENATED MODULE: ./packages/checkbox/index.js
	
	
	/* istanbul ignore next */
	src_checkbox.install = function (Vue) {
	  Vue.component(src_checkbox.name, src_checkbox);
	};
	
	/* harmony default export */ var packages_checkbox = __webpack_exports__["default"] = (src_checkbox);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _locale = __webpack_require__(17);
	
	exports.default = {
	  methods: {
	    t: function t() {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      return _locale.t.apply(this, args);
	    }
	  }
	};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 130);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 130:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./packages/table/src/config.js
	
	
	var cellStarts = {
	  default: {
	    order: ''
	  },
	  selection: {
	    width: 48,
	    minWidth: 48,
	    realWidth: 48,
	    order: '',
	    className: 'el-table-column--selection'
	  },
	  expand: {
	    width: 48,
	    minWidth: 48,
	    realWidth: 48,
	    order: ''
	  },
	  index: {
	    width: 48,
	    minWidth: 48,
	    realWidth: 48,
	    order: ''
	  }
	};
	
	// 这些选项不应该被覆盖
	var cellForced = {
	  selection: {
	    renderHeader: function renderHeader(h, _ref) {
	      var store = _ref.store;
	
	      return h('el-checkbox', {
	        attrs: {
	          disabled: store.states.data && store.states.data.length === 0,
	          indeterminate: store.states.selection.length > 0 && !this.isAllSelected,
	
	          value: this.isAllSelected },
	        nativeOn: {
	          'click': this.toggleAllSelection
	        }
	      });
	    },
	    renderCell: function renderCell(h, _ref2) {
	      var row = _ref2.row,
	          column = _ref2.column,
	          store = _ref2.store,
	          $index = _ref2.$index;
	
	      return h('el-checkbox', {
	        nativeOn: {
	          'click': function click(event) {
	            return event.stopPropagation();
	          }
	        },
	        attrs: {
	          value: store.isSelected(row),
	          disabled: column.selectable ? !column.selectable.call(null, row, $index) : false
	        },
	        on: {
	          'input': function input() {
	            store.commit('rowSelectedChanged', row);
	          }
	        }
	      });
	    },
	    sortable: false,
	    resizable: false
	  },
	  index: {
	    renderHeader: function renderHeader(h, _ref3) {
	      var column = _ref3.column;
	
	      return column.label || '#';
	    },
	    renderCell: function renderCell(h, _ref4) {
	      var $index = _ref4.$index,
	          column = _ref4.column;
	
	      var i = $index + 1;
	      var index = column.index;
	
	      if (typeof index === 'number') {
	        i = $index + index;
	      } else if (typeof index === 'function') {
	        i = index($index);
	      }
	
	      return h('div', [i]);
	    },
	    sortable: false
	  },
	  expand: {
	    renderHeader: function renderHeader(h, _ref5) {
	      var column = _ref5.column;
	
	      return column.label || '';
	    },
	    renderCell: function renderCell(h, _ref6) {
	      var row = _ref6.row,
	          store = _ref6.store;
	
	      var classes = ['el-table__expand-icon'];
	      if (store.states.expandRows.indexOf(row) > -1) {
	        classes.push('el-table__expand-icon--expanded');
	      }
	      var callback = function callback(e) {
	        e.stopPropagation();
	        store.toggleRowExpansion(row);
	      };
	      return h(
	        'div',
	        { 'class': classes,
	          on: {
	            'click': callback
	          }
	        },
	        [h('i', { 'class': 'el-icon el-icon-arrow-right' })]
	      );
	    },
	    sortable: false,
	    resizable: false,
	    className: 'el-table__expand-column'
	  }
	};
	
	function defaultRenderCell(h, _ref7) {
	  var row = _ref7.row,
	      column = _ref7.column,
	      $index = _ref7.$index;
	
	  var property = column.property;
	  var value = property && Object(util_["getPropByPath"])(row, property).v;
	  if (column && column.formatter) {
	    return column.formatter(row, column, value, $index);
	  }
	  return value;
	}
	
	function treeCellPrefix(h, _ref8) {
	  var row = _ref8.row,
	      treeNode = _ref8.treeNode,
	      store = _ref8.store;
	
	  if (!treeNode) return null;
	  var ele = [];
	  var callback = function callback(e) {
	    e.stopPropagation();
	    store.loadOrToggle(row);
	  };
	  if (treeNode.indent) {
	    ele.push(h('span', { 'class': 'el-table__indent', style: { 'padding-left': treeNode.indent + 'px' } }));
	  }
	  if (typeof treeNode.expanded === 'boolean' && !treeNode.noLazyChildren) {
	    var expandClasses = ['el-table__expand-icon', treeNode.expanded ? 'el-table__expand-icon--expanded' : ''];
	    var iconClasses = ['el-icon-arrow-right'];
	    if (treeNode.loading) {
	      iconClasses = ['el-icon-loading'];
	    }
	    ele.push(h(
	      'div',
	      { 'class': expandClasses,
	        on: {
	          'click': callback
	        }
	      },
	      [h('i', { 'class': iconClasses })]
	    ));
	  } else {
	    ele.push(h('span', { 'class': 'el-table__placeholder' }));
	  }
	  return ele;
	}
	// EXTERNAL MODULE: ./packages/table/src/util.js
	var util = __webpack_require__(8);
	
	// EXTERNAL MODULE: external "element-ui/lib/checkbox"
	var checkbox_ = __webpack_require__(18);
	var checkbox_default = /*#__PURE__*/__webpack_require__.n(checkbox_);
	
	// CONCATENATED MODULE: ./packages/table/src/table-column.js
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	
	
	
	
	var columnIdSeed = 1;
	
	/* harmony default export */ var table_column = ({
	  name: 'ElTableColumn',
	
	  props: {
	    type: {
	      type: String,
	      default: 'default'
	    },
	    label: String,
	    className: String,
	    labelClassName: String,
	    property: String,
	    prop: String,
	    width: {},
	    minWidth: {},
	    renderHeader: Function,
	    sortable: {
	      type: [Boolean, String],
	      default: false
	    },
	    sortMethod: Function,
	    sortBy: [String, Function, Array],
	    resizable: {
	      type: Boolean,
	      default: true
	    },
	    columnKey: String,
	    align: String,
	    headerAlign: String,
	    showTooltipWhenOverflow: Boolean,
	    showOverflowTooltip: Boolean,
	    fixed: [Boolean, String],
	    formatter: Function,
	    selectable: Function,
	    reserveSelection: Boolean,
	    filterMethod: Function,
	    filteredValue: Array,
	    filters: Array,
	    filterPlacement: String,
	    filterMultiple: {
	      type: Boolean,
	      default: true
	    },
	    index: [Number, Function],
	    sortOrders: {
	      type: Array,
	      default: function _default() {
	        return ['ascending', 'descending', null];
	      },
	      validator: function validator(val) {
	        return val.every(function (order) {
	          return ['ascending', 'descending', null].indexOf(order) > -1;
	        });
	      }
	    }
	  },
	
	  data: function data() {
	    return {
	      isSubColumn: false,
	      columns: []
	    };
	  },
	
	
	  computed: {
	    owner: function owner() {
	      var parent = this.$parent;
	      while (parent && !parent.tableId) {
	        parent = parent.$parent;
	      }
	      return parent;
	    },
	    columnOrTableParent: function columnOrTableParent() {
	      var parent = this.$parent;
	      while (parent && !parent.tableId && !parent.columnId) {
	        parent = parent.$parent;
	      }
	      return parent;
	    },
	    realWidth: function realWidth() {
	      return Object(util["l" /* parseWidth */])(this.width);
	    },
	    realMinWidth: function realMinWidth() {
	      return Object(util["k" /* parseMinWidth */])(this.minWidth);
	    },
	    realAlign: function realAlign() {
	      return this.align ? 'is-' + this.align : null;
	    },
	    realHeaderAlign: function realHeaderAlign() {
	      return this.headerAlign ? 'is-' + this.headerAlign : this.realAlign;
	    }
	  },
	
	  methods: {
	    getPropsData: function getPropsData() {
	      var _this = this;
	
	      for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
	        props[_key] = arguments[_key];
	      }
	
	      return props.reduce(function (prev, cur) {
	        if (Array.isArray(cur)) {
	          cur.forEach(function (key) {
	            prev[key] = _this[key];
	          });
	        }
	        return prev;
	      }, {});
	    },
	    getColumnElIndex: function getColumnElIndex(children, child) {
	      return [].indexOf.call(children, child);
	    },
	    setColumnWidth: function setColumnWidth(column) {
	      if (this.realWidth) {
	        column.width = this.realWidth;
	      }
	      if (this.realMinWidth) {
	        column.minWidth = this.realMinWidth;
	      }
	      if (!column.minWidth) {
	        column.minWidth = 80;
	      }
	      column.realWidth = column.width === undefined ? column.minWidth : column.width;
	      return column;
	    },
	    setColumnForcedProps: function setColumnForcedProps(column) {
	      // 对于特定类型的 column，某些属性不允许设置
	      var type = column.type;
	      var source = cellForced[type] || {};
	      Object.keys(source).forEach(function (prop) {
	        var value = source[prop];
	        if (value !== undefined) {
	          column[prop] = prop === 'className' ? column[prop] + ' ' + value : value;
	        }
	      });
	      return column;
	    },
	    setColumnRenders: function setColumnRenders(column) {
	      var _this2 = this;
	
	      var h = this.$createElement;
	
	      // renderHeader 属性不推荐使用。
	      if (this.renderHeader) {
	        console.warn('[Element Warn][TableColumn]Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.');
	      } else if (column.type !== 'selection') {
	        column.renderHeader = function (h, scope) {
	          var renderHeader = _this2.$scopedSlots.header;
	          return renderHeader ? renderHeader(scope) : column.label;
	        };
	      }
	
	      var originRenderCell = column.renderCell;
	      // TODO: 这里的实现调整
	      if (column.type === 'expand') {
	        // 对于展开行，renderCell 不允许配置的。在上一步中已经设置过，这里需要简单封装一下。
	        column.renderCell = function (h, data) {
	          return h(
	            'div',
	            { 'class': 'cell' },
	            [originRenderCell(h, data)]
	          );
	        };
	        this.owner.renderExpanded = function (h, data) {
	          return _this2.$scopedSlots.default ? _this2.$scopedSlots.default(data) : _this2.$slots.default;
	        };
	      } else {
	        originRenderCell = originRenderCell || defaultRenderCell;
	        // 对 renderCell 进行包装
	        column.renderCell = function (h, data) {
	          var children = null;
	          if (_this2.$scopedSlots.default) {
	            children = _this2.$scopedSlots.default(data);
	          } else {
	            children = originRenderCell(h, data);
	          }
	          var prefix = treeCellPrefix(h, data);
	          var props = {
	            class: 'cell',
	            style: {}
	          };
	          if (column.showOverflowTooltip) {
	            props.class += ' el-tooltip';
	            props.style = { width: (data.column.realWidth || data.column.width) - 1 + 'px' };
	          }
	          return h(
	            'div',
	            props,
	            [prefix, children]
	          );
	        };
	      }
	      return column;
	    },
	    registerNormalWatchers: function registerNormalWatchers() {
	      var _this3 = this;
	
	      var props = ['label', 'property', 'filters', 'filterMultiple', 'sortable', 'index', 'formatter', 'className', 'labelClassName', 'showOverflowTooltip'];
	      // 一些属性具有别名
	      var aliases = {
	        prop: 'property',
	        realAlign: 'align',
	        realHeaderAlign: 'headerAlign',
	        realWidth: 'width'
	      };
	      var allAliases = props.reduce(function (prev, cur) {
	        prev[cur] = cur;
	        return prev;
	      }, aliases);
	
	      Object.keys(allAliases).forEach(function (key) {
	        var columnKey = aliases[key];
	
	        _this3.$watch(key, function (newVal) {
	          _this3.columnConfig[columnKey] = newVal;
	        });
	      });
	    },
	    registerComplexWatchers: function registerComplexWatchers() {
	      var _this4 = this;
	
	      var props = ['fixed'];
	      var aliases = {
	        realWidth: 'width',
	        realMinWidth: 'minWidth'
	      };
	      var allAliases = props.reduce(function (prev, cur) {
	        prev[cur] = cur;
	        return prev;
	      }, aliases);
	
	      Object.keys(allAliases).forEach(function (key) {
	        var columnKey = aliases[key];
	
	        _this4.$watch(key, function (newVal) {
	          _this4.columnConfig[columnKey] = newVal;
	          var updateColumns = columnKey === 'fixed';
	          _this4.owner.store.scheduleLayout(updateColumns);
	        });
	      });
	    }
	  },
	
	  components: {
	    ElCheckbox: checkbox_default.a
	  },
	
	  beforeCreate: function beforeCreate() {
	    this.row = {};
	    this.column = {};
	    this.$index = 0;
	    this.columnId = '';
	  },
	  created: function created() {
	    var parent = this.columnOrTableParent;
	    this.isSubColumn = this.owner !== parent;
	    this.columnId = (parent.tableId || parent.columnId) + '_column_' + columnIdSeed++;
	
	    var type = this.type || 'default';
	    var sortable = this.sortable === '' ? true : this.sortable;
	    var defaults = _extends({}, cellStarts[type], {
	      id: this.columnId,
	      type: type,
	      property: this.prop || this.property,
	      align: this.realAlign,
	      headerAlign: this.realHeaderAlign,
	      showOverflowTooltip: this.showOverflowTooltip || this.showTooltipWhenOverflow,
	      // filter 相关属性
	      filterable: this.filters || this.filterMethod,
	      filteredValue: [],
	      filterPlacement: '',
	      isColumnGroup: false,
	      filterOpened: false,
	      // sort 相关属性
	      sortable: sortable,
	      // index 列
	      index: this.index
	    });
	
	    var basicProps = ['columnKey', 'label', 'className', 'labelClassName', 'type', 'renderHeader', 'formatter', 'fixed', 'resizable'];
	    var sortProps = ['sortMethod', 'sortBy', 'sortOrders'];
	    var selectProps = ['selectable', 'reserveSelection'];
	    var filterProps = ['filterMethod', 'filters', 'filterMultiple', 'filterOpened', 'filteredValue', 'filterPlacement'];
	
	    var column = this.getPropsData(basicProps, sortProps, selectProps, filterProps);
	    column = Object(util["h" /* mergeOptions */])(defaults, column);
	
	    // 注意 compose 中函数执行的顺序是从右到左
	    var chains = Object(util["a" /* compose */])(this.setColumnRenders, this.setColumnWidth, this.setColumnForcedProps);
	    column = chains(column);
	
	    this.columnConfig = column;
	
	    // 注册 watcher
	    this.registerNormalWatchers();
	    this.registerComplexWatchers();
	  },
	  mounted: function mounted() {
	    var owner = this.owner;
	    var parent = this.columnOrTableParent;
	    var children = this.isSubColumn ? parent.$el.children : parent.$refs.hiddenColumns.children;
	    var columnIndex = this.getColumnElIndex(children, this.$el);
	
	    owner.store.commit('insertColumn', this.columnConfig, columnIndex, this.isSubColumn ? parent.columnConfig : null);
	  },
	  destroyed: function destroyed() {
	    if (!this.$parent) return;
	    var parent = this.$parent;
	    this.owner.store.commit('removeColumn', this.columnConfig, this.isSubColumn ? parent.columnConfig : null);
	  },
	  render: function render(h) {
	    // slots 也要渲染，需要计算合并表头
	    return h('div', this.$slots.default);
	  }
	});
	// CONCATENATED MODULE: ./packages/table-column/index.js
	
	
	/* istanbul ignore next */
	table_column.install = function (Vue) {
	  Vue.component(table_column.name, table_column);
	};
	
	/* harmony default export */ var packages_table_column = __webpack_exports__["default"] = (table_column);
	
	/***/ }),
	
	/***/ 18:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(58);
	
	/***/ }),
	
	/***/ 3:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	
	/***/ 8:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getCell; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return orderBy; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getColumnById; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getColumnByKey; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getColumnByCell; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getRowIdentity; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getKeysMap; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return mergeOptions; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return parseWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return parseMinWidth; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return parseHeight; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return compose; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return toggleRowStatus; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return walkTreeNode; });
	/* harmony import */ var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
	/* harmony import */ var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__);
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	
	
	var getCell = function getCell(event) {
	  var cell = event.target;
	
	  while (cell && cell.tagName.toUpperCase() !== 'HTML') {
	    if (cell.tagName.toUpperCase() === 'TD') {
	      return cell;
	    }
	    cell = cell.parentNode;
	  }
	
	  return null;
	};
	
	var isObject = function isObject(obj) {
	  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
	};
	
	var orderBy = function orderBy(array, sortKey, reverse, sortMethod, sortBy) {
	  if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
	    return array;
	  }
	  if (typeof reverse === 'string') {
	    reverse = reverse === 'descending' ? -1 : 1;
	  } else {
	    reverse = reverse && reverse < 0 ? -1 : 1;
	  }
	  var getKey = sortMethod ? null : function (value, index) {
	    if (sortBy) {
	      if (!Array.isArray(sortBy)) {
	        sortBy = [sortBy];
	      }
	      return sortBy.map(function (by) {
	        if (typeof by === 'string') {
	          return Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, by);
	        } else {
	          return by(value, index, array);
	        }
	      });
	    }
	    if (sortKey !== '$key') {
	      if (isObject(value) && '$value' in value) value = value.$value;
	    }
	    return [isObject(value) ? Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, sortKey) : value];
	  };
	  var compare = function compare(a, b) {
	    if (sortMethod) {
	      return sortMethod(a.value, b.value);
	    }
	    for (var i = 0, len = a.key.length; i < len; i++) {
	      if (a.key[i] < b.key[i]) {
	        return -1;
	      }
	      if (a.key[i] > b.key[i]) {
	        return 1;
	      }
	    }
	    return 0;
	  };
	  return array.map(function (value, index) {
	    return {
	      value: value,
	      index: index,
	      key: getKey ? getKey(value, index) : null
	    };
	  }).sort(function (a, b) {
	    var order = compare(a, b);
	    if (!order) {
	      // make stable https://en.wikipedia.org/wiki/Sorting_algorithm#Stability
	      order = a.index - b.index;
	    }
	    return order * reverse;
	  }).map(function (item) {
	    return item.value;
	  });
	};
	
	var getColumnById = function getColumnById(table, columnId) {
	  var column = null;
	  table.columns.forEach(function (item) {
	    if (item.id === columnId) {
	      column = item;
	    }
	  });
	  return column;
	};
	
	var getColumnByKey = function getColumnByKey(table, columnKey) {
	  var column = null;
	  for (var i = 0; i < table.columns.length; i++) {
	    var item = table.columns[i];
	    if (item.columnKey === columnKey) {
	      column = item;
	      break;
	    }
	  }
	  return column;
	};
	
	var getColumnByCell = function getColumnByCell(table, cell) {
	  var matches = (cell.className || '').match(/el-table_[^\s]+/gm);
	  if (matches) {
	    return getColumnById(table, matches[0]);
	  }
	  return null;
	};
	
	var getRowIdentity = function getRowIdentity(row, rowKey) {
	  if (!row) throw new Error('row is required when get row identity');
	  if (typeof rowKey === 'string') {
	    if (rowKey.indexOf('.') < 0) {
	      return row[rowKey];
	    }
	    var key = rowKey.split('.');
	    var current = row;
	    for (var i = 0; i < key.length; i++) {
	      current = current[key[i]];
	    }
	    return current;
	  } else if (typeof rowKey === 'function') {
	    return rowKey.call(null, row);
	  }
	};
	
	var getKeysMap = function getKeysMap(array, rowKey) {
	  var arrayMap = {};
	  (array || []).forEach(function (row, index) {
	    arrayMap[getRowIdentity(row, rowKey)] = { row: row, index: index };
	  });
	  return arrayMap;
	};
	
	function hasOwn(obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key);
	}
	
	function mergeOptions(defaults, config) {
	  var options = {};
	  var key = void 0;
	  for (key in defaults) {
	    options[key] = defaults[key];
	  }
	  for (key in config) {
	    if (hasOwn(config, key)) {
	      var value = config[key];
	      if (typeof value !== 'undefined') {
	        options[key] = value;
	      }
	    }
	  }
	  return options;
	}
	
	function parseWidth(width) {
	  if (width !== undefined) {
	    width = parseInt(width, 10);
	    if (isNaN(width)) {
	      width = null;
	    }
	  }
	  return width;
	}
	
	function parseMinWidth(minWidth) {
	  if (typeof minWidth !== 'undefined') {
	    minWidth = parseWidth(minWidth);
	    if (isNaN(minWidth)) {
	      minWidth = 80;
	    }
	  }
	  return minWidth;
	};
	
	function parseHeight(height) {
	  if (typeof height === 'number') {
	    return height;
	  }
	  if (typeof height === 'string') {
	    if (/^\d+(?:px)?$/.test(height)) {
	      return parseInt(height, 10);
	    } else {
	      return height;
	    }
	  }
	  return null;
	}
	
	// https://github.com/reduxjs/redux/blob/master/src/compose.js
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }
	  if (funcs.length === 1) {
	    return funcs[0];
	  }
	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}
	
	function toggleRowStatus(statusArr, row, newVal) {
	  var changed = false;
	  var index = statusArr.indexOf(row);
	  var included = index !== -1;
	
	  var addRow = function addRow() {
	    statusArr.push(row);
	    changed = true;
	  };
	  var removeRow = function removeRow() {
	    statusArr.splice(index, 1);
	    changed = true;
	  };
	
	  if (typeof newVal === 'boolean') {
	    if (newVal && !included) {
	      addRow();
	    } else if (!newVal && included) {
	      removeRow();
	    }
	  } else {
	    if (included) {
	      removeRow();
	    } else {
	      addRow();
	    }
	  }
	  return changed;
	}
	
	function walkTreeNode(root, cb) {
	  var childrenKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';
	  var lazyKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hasChildren';
	
	  var isNil = function isNil(array) {
	    return !(Array.isArray(array) && array.length);
	  };
	
	  function _walker(parent, children, level) {
	    cb(parent, children, level);
	    children.forEach(function (item) {
	      if (item[lazyKey]) {
	        cb(item, null, level + 1);
	        return;
	      }
	      var children = item[childrenKey];
	      if (!isNil(children)) {
	        _walker(item, children, level + 1);
	      }
	    });
	  }
	
	  root.forEach(function (item) {
	    if (item[lazyKey]) {
	      cb(item, null, 0);
	      return;
	    }
	    var children = item[childrenKey];
	    if (!isNil(children)) {
	      _walker(item, children, 0);
	    }
	  });
	}
	
	/***/ })
	
	/******/ });

/***/ }),
/* 61 */,
/* 62 */,
/* 63 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 64 */
/***/ (function(module, exports) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 134);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 134:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./packages/col/src/col.js
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/* harmony default export */ var col = ({
	  name: 'ElCol',
	
	  props: {
	    span: {
	      type: Number,
	      default: 24
	    },
	    tag: {
	      type: String,
	      default: 'div'
	    },
	    offset: Number,
	    pull: Number,
	    push: Number,
	    xs: [Number, Object],
	    sm: [Number, Object],
	    md: [Number, Object],
	    lg: [Number, Object],
	    xl: [Number, Object]
	  },
	
	  computed: {
	    gutter: function gutter() {
	      var parent = this.$parent;
	      while (parent && parent.$options.componentName !== 'ElRow') {
	        parent = parent.$parent;
	      }
	      return parent ? parent.gutter : 0;
	    }
	  },
	  render: function render(h) {
	    var _this = this;
	
	    var classList = [];
	    var style = {};
	
	    if (this.gutter) {
	      style.paddingLeft = this.gutter / 2 + 'px';
	      style.paddingRight = style.paddingLeft;
	    }
	
	    ['span', 'offset', 'pull', 'push'].forEach(function (prop) {
	      if (_this[prop] || _this[prop] === 0) {
	        classList.push(prop !== 'span' ? 'el-col-' + prop + '-' + _this[prop] : 'el-col-' + _this[prop]);
	      }
	    });
	
	    ['xs', 'sm', 'md', 'lg', 'xl'].forEach(function (size) {
	      if (typeof _this[size] === 'number') {
	        classList.push('el-col-' + size + '-' + _this[size]);
	      } else if (_typeof(_this[size]) === 'object') {
	        var props = _this[size];
	        Object.keys(props).forEach(function (prop) {
	          classList.push(prop !== 'span' ? 'el-col-' + size + '-' + prop + '-' + props[prop] : 'el-col-' + size + '-' + props[prop]);
	        });
	      }
	    });
	
	    return h(this.tag, {
	      class: ['el-col', classList],
	      style: style
	    }, this.$slots.default);
	  }
	});
	// CONCATENATED MODULE: ./packages/col/index.js
	
	
	/* istanbul ignore next */
	col.install = function (Vue) {
	  Vue.component(col.name, col);
	};
	
	/* harmony default export */ var packages_col = __webpack_exports__["default"] = (col);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 65 */,
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	(function () {
	    Number.isInteger = Number.isInteger || function (value) {
	        return typeof value === 'number' &&
	            isFinite(value) &&
	            Math.floor(value) === value;
	    };
	    var Cookie = __webpack_require__(622);
	
	    var VueCookie = {
	
	        install: function (Vue) {
	            Vue.prototype.$cookie = this;
	            Vue.cookie = this;
	        },
	        set: function (name, value, daysOrOptions) {
	            var opts = daysOrOptions;
	            if(Number.isInteger(daysOrOptions)) {
	                opts = {expires: daysOrOptions};
	            }
	            return Cookie.set(name, value, opts);
	        },
	
	        get: function (name) {
	            return Cookie.get(name);
	        },
	
	        delete: function (name, options) {
	            var opts = {expires: -1};
	            if(options !== undefined) {
	                opts = Object.assign(options, opts);
	            }
	            this.set(name, '', opts);
	        }
	    };
	
	    if (true) {
	        module.exports = VueCookie;
	    } else if (typeof define == "function" && define.amd) {
	        define([], function(){ return VueCookie; })
	    } else if (window.Vue) {
	        window.VueCookie = VueCookie;
	        Vue.use(VueCookie);
	    }
	
	})();


/***/ }),
/* 67 */,
/* 68 */,
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(375);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(374);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ }),
/* 71 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	module.exports = {};

/***/ }),
/* 73 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 74 */,
/* 75 */,
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 70);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 15:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(80);
	
	/***/ }),
	
	/***/ 23:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(495);
	
	/***/ }),
	
	/***/ 7:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(1);
	
	/***/ }),
	
	/***/ 70:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// EXTERNAL MODULE: external "vue"
	var external_vue_ = __webpack_require__(7);
	var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/notification/src/main.vue?vue&type=template&id=43dbc3d8&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c("transition", { attrs: { name: "el-notification-fade" } }, [
	    _c(
	      "div",
	      {
	        directives: [
	          {
	            name: "show",
	            rawName: "v-show",
	            value: _vm.visible,
	            expression: "visible"
	          }
	        ],
	        class: ["el-notification", _vm.customClass, _vm.horizontalClass],
	        style: _vm.positionStyle,
	        attrs: { role: "alert" },
	        on: {
	          mouseenter: function($event) {
	            _vm.clearTimer()
	          },
	          mouseleave: function($event) {
	            _vm.startTimer()
	          },
	          click: _vm.click
	        }
	      },
	      [
	        _vm.type || _vm.iconClass
	          ? _c("i", {
	              staticClass: "el-notification__icon",
	              class: [_vm.typeClass, _vm.iconClass]
	            })
	          : _vm._e(),
	        _c(
	          "div",
	          {
	            staticClass: "el-notification__group",
	            class: { "is-with-icon": _vm.typeClass || _vm.iconClass }
	          },
	          [
	            _c("h2", {
	              staticClass: "el-notification__title",
	              domProps: { textContent: _vm._s(_vm.title) }
	            }),
	            _c(
	              "div",
	              {
	                directives: [
	                  {
	                    name: "show",
	                    rawName: "v-show",
	                    value: _vm.message,
	                    expression: "message"
	                  }
	                ],
	                staticClass: "el-notification__content"
	              },
	              [
	                _vm._t("default", [
	                  !_vm.dangerouslyUseHTMLString
	                    ? _c("p", [_vm._v(_vm._s(_vm.message))])
	                    : _c("p", { domProps: { innerHTML: _vm._s(_vm.message) } })
	                ])
	              ],
	              2
	            ),
	            _vm.showClose
	              ? _c("div", {
	                  staticClass: "el-notification__closeBtn el-icon-close",
	                  on: {
	                    click: function($event) {
	                      $event.stopPropagation()
	                      return _vm.close($event)
	                    }
	                  }
	                })
	              : _vm._e()
	          ]
	        )
	      ]
	    )
	  ])
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/notification/src/main.vue?vue&type=template&id=43dbc3d8&
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/notification/src/main.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	var typeMap = {
	  success: 'success',
	  info: 'info',
	  warning: 'warning',
	  error: 'error'
	};
	
	/* harmony default export */ var mainvue_type_script_lang_js_ = ({
	  data: function data() {
	    return {
	      visible: false,
	      title: '',
	      message: '',
	      duration: 4500,
	      type: '',
	      showClose: true,
	      customClass: '',
	      iconClass: '',
	      onClose: null,
	      onClick: null,
	      closed: false,
	      verticalOffset: 0,
	      timer: null,
	      dangerouslyUseHTMLString: false,
	      position: 'top-right'
	    };
	  },
	
	
	  computed: {
	    typeClass: function typeClass() {
	      return this.type && typeMap[this.type] ? 'el-icon-' + typeMap[this.type] : '';
	    },
	    horizontalClass: function horizontalClass() {
	      return this.position.indexOf('right') > -1 ? 'right' : 'left';
	    },
	    verticalProperty: function verticalProperty() {
	      return (/^top-/.test(this.position) ? 'top' : 'bottom'
	      );
	    },
	    positionStyle: function positionStyle() {
	      var _ref;
	
	      return _ref = {}, _ref[this.verticalProperty] = this.verticalOffset + 'px', _ref;
	    }
	  },
	
	  watch: {
	    closed: function closed(newVal) {
	      if (newVal) {
	        this.visible = false;
	        this.$el.addEventListener('transitionend', this.destroyElement);
	      }
	    }
	  },
	
	  methods: {
	    destroyElement: function destroyElement() {
	      this.$el.removeEventListener('transitionend', this.destroyElement);
	      this.$destroy(true);
	      this.$el.parentNode.removeChild(this.$el);
	    },
	    click: function click() {
	      if (typeof this.onClick === 'function') {
	        this.onClick();
	      }
	    },
	    close: function close() {
	      this.closed = true;
	      if (typeof this.onClose === 'function') {
	        this.onClose();
	      }
	    },
	    clearTimer: function clearTimer() {
	      clearTimeout(this.timer);
	    },
	    startTimer: function startTimer() {
	      var _this = this;
	
	      if (this.duration > 0) {
	        this.timer = setTimeout(function () {
	          if (!_this.closed) {
	            _this.close();
	          }
	        }, this.duration);
	      }
	    },
	    keydown: function keydown(e) {
	      if (e.keyCode === 46 || e.keyCode === 8) {
	        this.clearTimer(); // detele 取消倒计时
	      } else if (e.keyCode === 27) {
	        // esc关闭消息
	        if (!this.closed) {
	          this.close();
	        }
	      } else {
	        this.startTimer(); // 恢复倒计时
	      }
	    }
	  },
	  mounted: function mounted() {
	    var _this2 = this;
	
	    if (this.duration > 0) {
	      this.timer = setTimeout(function () {
	        if (!_this2.closed) {
	          _this2.close();
	        }
	      }, this.duration);
	    }
	    document.addEventListener('keydown', this.keydown);
	  },
	  beforeDestroy: function beforeDestroy() {
	    document.removeEventListener('keydown', this.keydown);
	  }
	});
	// CONCATENATED MODULE: ./packages/notification/src/main.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/notification/src/main.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_mainvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/notification/src/main.vue"
	/* harmony default export */ var main = (component.exports);
	// EXTERNAL MODULE: external "element-ui/lib/utils/merge"
	var merge_ = __webpack_require__(9);
	var merge_default = /*#__PURE__*/__webpack_require__.n(merge_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/popup"
	var popup_ = __webpack_require__(15);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/vdom"
	var vdom_ = __webpack_require__(23);
	
	// CONCATENATED MODULE: ./packages/notification/src/main.js
	
	
	
	
	
	var NotificationConstructor = external_vue_default.a.extend(main);
	
	var instance = void 0;
	var instances = [];
	var seed = 1;
	
	var main_Notification = function Notification(options) {
	  if (external_vue_default.a.prototype.$isServer) return;
	  options = merge_default()({}, options);
	  var userOnClose = options.onClose;
	  var id = 'notification_' + seed++;
	  var position = options.position || 'top-right';
	
	  options.onClose = function () {
	    Notification.close(id, userOnClose);
	  };
	
	  instance = new NotificationConstructor({
	    data: options
	  });
	
	  if (Object(vdom_["isVNode"])(options.message)) {
	    instance.$slots.default = [options.message];
	    options.message = 'REPLACED_BY_VNODE';
	  }
	  instance.id = id;
	  instance.$mount();
	  document.body.appendChild(instance.$el);
	  instance.visible = true;
	  instance.dom = instance.$el;
	  instance.dom.style.zIndex = popup_["PopupManager"].nextZIndex();
	
	  var verticalOffset = options.offset || 0;
	  instances.filter(function (item) {
	    return item.position === position;
	  }).forEach(function (item) {
	    verticalOffset += item.$el.offsetHeight + 16;
	  });
	  verticalOffset += 16;
	  instance.verticalOffset = verticalOffset;
	  instances.push(instance);
	  return instance;
	};
	
	['success', 'warning', 'info', 'error'].forEach(function (type) {
	  main_Notification[type] = function (options) {
	    if (typeof options === 'string' || Object(vdom_["isVNode"])(options)) {
	      options = {
	        message: options
	      };
	    }
	    options.type = type;
	    return main_Notification(options);
	  };
	});
	
	main_Notification.close = function (id, userOnClose) {
	  var index = -1;
	  var len = instances.length;
	  var instance = instances.filter(function (instance, i) {
	    if (instance.id === id) {
	      index = i;
	      return true;
	    }
	    return false;
	  })[0];
	  if (!instance) return;
	
	  if (typeof userOnClose === 'function') {
	    userOnClose(instance);
	  }
	  instances.splice(index, 1);
	
	  if (len <= 1) return;
	  var position = instance.position;
	  var removedHeight = instance.dom.offsetHeight;
	  for (var i = index; i < len - 1; i++) {
	    if (instances[i].position === position) {
	      instances[i].dom.style[instance.verticalProperty] = parseInt(instances[i].dom.style[instance.verticalProperty], 10) - removedHeight - 16 + 'px';
	    }
	  }
	};
	
	main_Notification.closeAll = function () {
	  for (var i = instances.length - 1; i >= 0; i--) {
	    instances[i].close();
	  }
	};
	
	/* harmony default export */ var src_main = (main_Notification);
	// CONCATENATED MODULE: ./packages/notification/index.js
	
	/* harmony default export */ var notification = __webpack_exports__["default"] = (src_main);
	
	/***/ }),
	
	/***/ 9:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(38);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.PopupManager = undefined;
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _merge = __webpack_require__(38);
	
	var _merge2 = _interopRequireDefault(_merge);
	
	var _popupManager = __webpack_require__(492);
	
	var _popupManager2 = _interopRequireDefault(_popupManager);
	
	var _scrollbarWidth = __webpack_require__(133);
	
	var _scrollbarWidth2 = _interopRequireDefault(_scrollbarWidth);
	
	var _dom = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var idSeed = 1;
	
	var scrollBarWidth = void 0;
	
	exports.default = {
	  props: {
	    visible: {
	      type: Boolean,
	      default: false
	    },
	    openDelay: {},
	    closeDelay: {},
	    zIndex: {},
	    modal: {
	      type: Boolean,
	      default: false
	    },
	    modalFade: {
	      type: Boolean,
	      default: true
	    },
	    modalClass: {},
	    modalAppendToBody: {
	      type: Boolean,
	      default: false
	    },
	    lockScroll: {
	      type: Boolean,
	      default: true
	    },
	    closeOnPressEscape: {
	      type: Boolean,
	      default: false
	    },
	    closeOnClickModal: {
	      type: Boolean,
	      default: false
	    }
	  },
	
	  beforeMount: function beforeMount() {
	    this._popupId = 'popup-' + idSeed++;
	    _popupManager2.default.register(this._popupId, this);
	  },
	  beforeDestroy: function beforeDestroy() {
	    _popupManager2.default.deregister(this._popupId);
	    _popupManager2.default.closeModal(this._popupId);
	
	    this.restoreBodyStyle();
	  },
	  data: function data() {
	    return {
	      opened: false,
	      bodyPaddingRight: null,
	      computedBodyPaddingRight: 0,
	      withoutHiddenClass: true,
	      rendered: false
	    };
	  },
	
	
	  watch: {
	    visible: function visible(val) {
	      var _this = this;
	
	      if (val) {
	        if (this._opening) return;
	        if (!this.rendered) {
	          this.rendered = true;
	          _vue2.default.nextTick(function () {
	            _this.open();
	          });
	        } else {
	          this.open();
	        }
	      } else {
	        this.close();
	      }
	    }
	  },
	
	  methods: {
	    open: function open(options) {
	      var _this2 = this;
	
	      if (!this.rendered) {
	        this.rendered = true;
	      }
	
	      var props = (0, _merge2.default)({}, this.$props || this, options);
	
	      if (this._closeTimer) {
	        clearTimeout(this._closeTimer);
	        this._closeTimer = null;
	      }
	      clearTimeout(this._openTimer);
	
	      var openDelay = Number(props.openDelay);
	      if (openDelay > 0) {
	        this._openTimer = setTimeout(function () {
	          _this2._openTimer = null;
	          _this2.doOpen(props);
	        }, openDelay);
	      } else {
	        this.doOpen(props);
	      }
	    },
	    doOpen: function doOpen(props) {
	      if (this.$isServer) return;
	      if (this.willOpen && !this.willOpen()) return;
	      if (this.opened) return;
	
	      this._opening = true;
	
	      var dom = this.$el;
	
	      var modal = props.modal;
	
	      var zIndex = props.zIndex;
	      if (zIndex) {
	        _popupManager2.default.zIndex = zIndex;
	      }
	
	      if (modal) {
	        if (this._closing) {
	          _popupManager2.default.closeModal(this._popupId);
	          this._closing = false;
	        }
	        _popupManager2.default.openModal(this._popupId, _popupManager2.default.nextZIndex(), this.modalAppendToBody ? undefined : dom, props.modalClass, props.modalFade);
	        if (props.lockScroll) {
	          this.withoutHiddenClass = !(0, _dom.hasClass)(document.body, 'el-popup-parent--hidden');
	          if (this.withoutHiddenClass) {
	            this.bodyPaddingRight = document.body.style.paddingRight;
	            this.computedBodyPaddingRight = parseInt((0, _dom.getStyle)(document.body, 'paddingRight'), 10);
	          }
	          scrollBarWidth = (0, _scrollbarWidth2.default)();
	          var bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
	          var bodyOverflowY = (0, _dom.getStyle)(document.body, 'overflowY');
	          if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === 'scroll') && this.withoutHiddenClass) {
	            document.body.style.paddingRight = this.computedBodyPaddingRight + scrollBarWidth + 'px';
	          }
	          (0, _dom.addClass)(document.body, 'el-popup-parent--hidden');
	        }
	      }
	
	      if (getComputedStyle(dom).position === 'static') {
	        dom.style.position = 'absolute';
	      }
	
	      dom.style.zIndex = _popupManager2.default.nextZIndex();
	      this.opened = true;
	
	      this.onOpen && this.onOpen();
	
	      this.doAfterOpen();
	    },
	    doAfterOpen: function doAfterOpen() {
	      this._opening = false;
	    },
	    close: function close() {
	      var _this3 = this;
	
	      if (this.willClose && !this.willClose()) return;
	
	      if (this._openTimer !== null) {
	        clearTimeout(this._openTimer);
	        this._openTimer = null;
	      }
	      clearTimeout(this._closeTimer);
	
	      var closeDelay = Number(this.closeDelay);
	
	      if (closeDelay > 0) {
	        this._closeTimer = setTimeout(function () {
	          _this3._closeTimer = null;
	          _this3.doClose();
	        }, closeDelay);
	      } else {
	        this.doClose();
	      }
	    },
	    doClose: function doClose() {
	      this._closing = true;
	
	      this.onClose && this.onClose();
	
	      if (this.lockScroll) {
	        setTimeout(this.restoreBodyStyle, 200);
	      }
	
	      this.opened = false;
	
	      this.doAfterClose();
	    },
	    doAfterClose: function doAfterClose() {
	      _popupManager2.default.closeModal(this._popupId);
	      this._closing = false;
	    },
	    restoreBodyStyle: function restoreBodyStyle() {
	      if (this.modal && this.withoutHiddenClass) {
	        document.body.style.paddingRight = this.bodyPaddingRight;
	        (0, _dom.removeClass)(document.body, 'el-popup-parent--hidden');
	      }
	      this.withoutHiddenClass = true;
	    }
	  }
	};
	exports.PopupManager = _popupManager2.default;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.removeResizeListener = exports.addResizeListener = undefined;
	
	var _resizeObserverPolyfill = __webpack_require__(617);
	
	var _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isServer = typeof window === 'undefined';
	
	/* istanbul ignore next */
	var resizeHandler = function resizeHandler(entries) {
	  for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;
	
	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }
	
	    var entry = _ref;
	
	    var listeners = entry.target.__resizeListeners__ || [];
	    if (listeners.length) {
	      listeners.forEach(function (fn) {
	        fn();
	      });
	    }
	  }
	};
	
	/* istanbul ignore next */
	var addResizeListener = exports.addResizeListener = function addResizeListener(element, fn) {
	  if (isServer) return;
	  if (!element.__resizeListeners__) {
	    element.__resizeListeners__ = [];
	    element.__ro__ = new _resizeObserverPolyfill2.default(resizeHandler);
	    element.__ro__.observe(element);
	  }
	  element.__resizeListeners__.push(fn);
	};
	
	/* istanbul ignore next */
	var removeResizeListener = exports.removeResizeListener = function removeResizeListener(element, fn) {
	  if (!element || !element.__resizeListeners__) return;
	  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
	  if (!element.__resizeListeners__.length) {
	    element.__ro__.disconnect();
	  }
	};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _popup = __webpack_require__(80);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var PopperJS = _vue2.default.prototype.$isServer ? function () {} : __webpack_require__(491);
	var stop = function stop(e) {
	  return e.stopPropagation();
	};
	
	/**
	 * @param {HTMLElement} [reference=$refs.reference] - The reference element used to position the popper.
	 * @param {HTMLElement} [popper=$refs.popper] - The HTML element used as popper, or a configuration used to generate the popper.
	 * @param {String} [placement=button] - Placement of the popper accepted values: top(-start, -end), right(-start, -end), bottom(-start, -end), left(-start, -end)
	 * @param {Number} [offset=0] - Amount of pixels the popper will be shifted (can be negative).
	 * @param {Boolean} [visible=false] Visibility of the popup element.
	 * @param {Boolean} [visible-arrow=false] Visibility of the arrow, no style.
	 */
	exports.default = {
	  props: {
	    transformOrigin: {
	      type: [Boolean, String],
	      default: true
	    },
	    placement: {
	      type: String,
	      default: 'bottom'
	    },
	    boundariesPadding: {
	      type: Number,
	      default: 5
	    },
	    reference: {},
	    popper: {},
	    offset: {
	      default: 0
	    },
	    value: Boolean,
	    visibleArrow: Boolean,
	    arrowOffset: {
	      type: Number,
	      default: 35
	    },
	    appendToBody: {
	      type: Boolean,
	      default: true
	    },
	    popperOptions: {
	      type: Object,
	      default: function _default() {
	        return {
	          gpuAcceleration: false
	        };
	      }
	    }
	  },
	
	  data: function data() {
	    return {
	      showPopper: false,
	      currentPlacement: ''
	    };
	  },
	
	
	  watch: {
	    value: {
	      immediate: true,
	      handler: function handler(val) {
	        this.showPopper = val;
	        this.$emit('input', val);
	      }
	    },
	
	    showPopper: function showPopper(val) {
	      if (this.disabled) return;
	      val ? this.updatePopper() : this.destroyPopper();
	      this.$emit('input', val);
	    }
	  },
	
	  methods: {
	    createPopper: function createPopper() {
	      var _this = this;
	
	      if (this.$isServer) return;
	      this.currentPlacement = this.currentPlacement || this.placement;
	      if (!/^(top|bottom|left|right)(-start|-end)?$/g.test(this.currentPlacement)) {
	        return;
	      }
	
	      var options = this.popperOptions;
	      var popper = this.popperElm = this.popperElm || this.popper || this.$refs.popper;
	      var reference = this.referenceElm = this.referenceElm || this.reference || this.$refs.reference;
	
	      if (!reference && this.$slots.reference && this.$slots.reference[0]) {
	        reference = this.referenceElm = this.$slots.reference[0].elm;
	      }
	
	      if (!popper || !reference) return;
	      if (this.visibleArrow) this.appendArrow(popper);
	      if (this.appendToBody) document.body.appendChild(this.popperElm);
	      if (this.popperJS && this.popperJS.destroy) {
	        this.popperJS.destroy();
	      }
	
	      options.placement = this.currentPlacement;
	      options.offset = this.offset;
	      options.arrowOffset = this.arrowOffset;
	      this.popperJS = new PopperJS(reference, popper, options);
	      this.popperJS.onCreate(function (_) {
	        _this.$emit('created', _this);
	        _this.resetTransformOrigin();
	        _this.$nextTick(_this.updatePopper);
	      });
	      if (typeof options.onUpdate === 'function') {
	        this.popperJS.onUpdate(options.onUpdate);
	      }
	      this.popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
	      this.popperElm.addEventListener('click', stop);
	    },
	    updatePopper: function updatePopper() {
	      var popperJS = this.popperJS;
	      if (popperJS) {
	        popperJS.update();
	        if (popperJS._popper) {
	          popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
	        }
	      } else {
	        this.createPopper();
	      }
	    },
	    doDestroy: function doDestroy(forceDestroy) {
	      /* istanbul ignore if */
	      if (!this.popperJS || this.showPopper && !forceDestroy) return;
	      this.popperJS.destroy();
	      this.popperJS = null;
	    },
	    destroyPopper: function destroyPopper() {
	      if (this.popperJS) {
	        this.resetTransformOrigin();
	      }
	    },
	    resetTransformOrigin: function resetTransformOrigin() {
	      if (!this.transformOrigin) return;
	      var placementMap = {
	        top: 'bottom',
	        bottom: 'top',
	        left: 'right',
	        right: 'left'
	      };
	      var placement = this.popperJS._popper.getAttribute('x-placement').split('-')[0];
	      var origin = placementMap[placement];
	      this.popperJS._popper.style.transformOrigin = typeof this.transformOrigin === 'string' ? this.transformOrigin : ['top', 'bottom'].indexOf(placement) > -1 ? 'center ' + origin : origin + ' center';
	    },
	    appendArrow: function appendArrow(element) {
	      var hash = void 0;
	      if (this.appended) {
	        return;
	      }
	
	      this.appended = true;
	
	      for (var item in element.attributes) {
	        if (/^_v-/.test(element.attributes[item].name)) {
	          hash = element.attributes[item].name;
	          break;
	        }
	      }
	
	      var arrow = document.createElement('div');
	
	      if (hash) {
	        arrow.setAttribute(hash, '');
	      }
	      arrow.setAttribute('x-arrow', '');
	      arrow.className = 'popper__arrow';
	      element.appendChild(arrow);
	    }
	  },
	
	  beforeDestroy: function beforeDestroy() {
	    this.doDestroy(true);
	    if (this.popperElm && this.popperElm.parentNode === document.body) {
	      this.popperElm.removeEventListener('click', stop);
	      document.body.removeChild(this.popperElm);
	    }
	  },
	
	
	  // call destroy in keep-alive mode
	  deactivated: function deactivated() {
	    this.$options.beforeDestroy[0].call(this);
	  }
	};

/***/ }),
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(111);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 88 */
/***/ (function(module, exports) {

	module.exports = true;

/***/ }),
/* 89 */
/***/ (function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(48).f
	  , has = __webpack_require__(55)
	  , TAG = __webpack_require__(26)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ }),
/* 92 */,
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _util = __webpack_require__(20);
	
	/**
	 * Show migrating guide in browser console.
	 *
	 * Usage:
	 * import Migrating from 'element-ui/src/mixins/migrating';
	 *
	 * mixins: [Migrating]
	 *
	 * add getMigratingConfig method for your component.
	 *  getMigratingConfig() {
	 *    return {
	 *      props: {
	 *        'allow-no-selection': 'allow-no-selection is removed.',
	 *        'selection-mode': 'selection-mode is removed.'
	 *      },
	 *      events: {
	 *        selectionchange: 'selectionchange is renamed to selection-change.'
	 *      }
	 *    };
	 *  },
	 */
	exports.default = {
	  mounted: function mounted() {
	    if (true) return;
	    if (!this.$vnode) return;
	
	    var _getMigratingConfig = this.getMigratingConfig(),
	        _getMigratingConfig$p = _getMigratingConfig.props,
	        props = _getMigratingConfig$p === undefined ? {} : _getMigratingConfig$p,
	        _getMigratingConfig$e = _getMigratingConfig.events,
	        events = _getMigratingConfig$e === undefined ? {} : _getMigratingConfig$e;
	
	    var _$vnode = this.$vnode,
	        data = _$vnode.data,
	        componentOptions = _$vnode.componentOptions;
	
	    var definedProps = data.attrs || {};
	    var definedEvents = componentOptions.listeners || {};
	
	    for (var propName in definedProps) {
	      propName = (0, _util.kebabCase)(propName); // compatible with camel case
	      if (props[propName]) {
	        console.warn('[Element Migrating][' + this.$options.name + '][Attribute]: ' + props[propName]);
	      }
	    }
	
	    for (var eventName in definedEvents) {
	      eventName = (0, _util.kebabCase)(eventName); // compatible with camel case
	      if (events[eventName]) {
	        console.warn('[Element Migrating][' + this.$options.name + '][Event]: ' + events[eventName]);
	      }
	    }
	  },
	
	  methods: {
	    getMigratingConfig: function getMigratingConfig() {
	      return {
	        props: {},
	        events: {}
	      };
	    }
	  }
	};

/***/ }),
/* 94 */,
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable no-undefined */
	
	var throttle = __webpack_require__(185);
	
	/**
	 * Debounce execution of a function. Debouncing, unlike throttling,
	 * guarantees that a function is only executed a single time, either at the
	 * very beginning of a series of calls, or at the very end.
	 *
	 * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
	 * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds
	 *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.
	 *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).
	 * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
	 *                                  to `callback` when the debounced-function is executed.
	 *
	 * @return {Function} A new, debounced function.
	 */
	module.exports = function ( delay, atBegin, callback ) {
		return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
	};


/***/ }),
/* 96 */,
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(27);
	var normalizeHeaderName = __webpack_require__(226);
	
	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};
	
	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}
	
	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(140);
	  } else if (typeof process !== 'undefined') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(140);
	  }
	  return adapter;
	}
	
	var defaults = {
	  adapter: getDefaultAdapter(),
	
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],
	
	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],
	
	  timeout: 0,
	
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	
	  maxContentLength: -1,
	
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};
	
	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};
	
	utils.forEach(['delete', 'get', 'head'], function forEachMehtodNoData(method) {
	  defaults.headers[method] = {};
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});
	
	module.exports = defaults;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ }),
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 112 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(71)
	  , document = __webpack_require__(29).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ }),
/* 114 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ }),
/* 115 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(117)('keys')
	  , uid    = __webpack_require__(91);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(29)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ }),
/* 118 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(112);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(71);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(29)
	  , core           = __webpack_require__(25)
	  , LIBRARY        = __webpack_require__(88)
	  , wksExt         = __webpack_require__(122)
	  , defineProperty = __webpack_require__(48).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(26);

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(410)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(166)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(413);
	var global        = __webpack_require__(29)
	  , hide          = __webpack_require__(56)
	  , Iterators     = __webpack_require__(72)
	  , TO_STRING_TAG = __webpack_require__(26)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ }),
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 127);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 127:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/resize-event"
	var resize_event_ = __webpack_require__(16);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/scrollbar-width"
	var scrollbar_width_ = __webpack_require__(38);
	var scrollbar_width_default = /*#__PURE__*/__webpack_require__.n(scrollbar_width_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/dom"
	var dom_ = __webpack_require__(2);
	
	// CONCATENATED MODULE: ./packages/scrollbar/src/util.js
	var BAR_MAP = {
	  vertical: {
	    offset: 'offsetHeight',
	    scroll: 'scrollTop',
	    scrollSize: 'scrollHeight',
	    size: 'height',
	    key: 'vertical',
	    axis: 'Y',
	    client: 'clientY',
	    direction: 'top'
	  },
	  horizontal: {
	    offset: 'offsetWidth',
	    scroll: 'scrollLeft',
	    scrollSize: 'scrollWidth',
	    size: 'width',
	    key: 'horizontal',
	    axis: 'X',
	    client: 'clientX',
	    direction: 'left'
	  }
	};
	
	function renderThumbStyle(_ref) {
	  var move = _ref.move,
	      size = _ref.size,
	      bar = _ref.bar;
	
	  var style = {};
	  var translate = 'translate' + bar.axis + '(' + move + '%)';
	
	  style[bar.size] = size;
	  style.transform = translate;
	  style.msTransform = translate;
	  style.webkitTransform = translate;
	
	  return style;
	};
	// CONCATENATED MODULE: ./packages/scrollbar/src/bar.js
	
	
	
	/* istanbul ignore next */
	/* harmony default export */ var src_bar = ({
	  name: 'Bar',
	
	  props: {
	    vertical: Boolean,
	    size: String,
	    move: Number
	  },
	
	  computed: {
	    bar: function bar() {
	      return BAR_MAP[this.vertical ? 'vertical' : 'horizontal'];
	    },
	    wrap: function wrap() {
	      return this.$parent.wrap;
	    }
	  },
	
	  render: function render(h) {
	    var size = this.size,
	        move = this.move,
	        bar = this.bar;
	
	
	    return h(
	      'div',
	      {
	        'class': ['el-scrollbar__bar', 'is-' + bar.key],
	        on: {
	          'mousedown': this.clickTrackHandler
	        }
	      },
	      [h('div', {
	        ref: 'thumb',
	        'class': 'el-scrollbar__thumb',
	        on: {
	          'mousedown': this.clickThumbHandler
	        },
	
	        style: renderThumbStyle({ size: size, move: move, bar: bar }) })]
	    );
	  },
	
	
	  methods: {
	    clickThumbHandler: function clickThumbHandler(e) {
	      // prevent click event of right button
	      if (e.ctrlKey || e.button === 2) {
	        return;
	      }
	      this.startDrag(e);
	      this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
	    },
	    clickTrackHandler: function clickTrackHandler(e) {
	      var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
	      var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
	      var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
	
	      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
	    },
	    startDrag: function startDrag(e) {
	      e.stopImmediatePropagation();
	      this.cursorDown = true;
	
	      Object(dom_["on"])(document, 'mousemove', this.mouseMoveDocumentHandler);
	      Object(dom_["on"])(document, 'mouseup', this.mouseUpDocumentHandler);
	      document.onselectstart = function () {
	        return false;
	      };
	    },
	    mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
	      if (this.cursorDown === false) return;
	      var prevPage = this[this.bar.axis];
	
	      if (!prevPage) return;
	
	      var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
	      var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
	      var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
	
	      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
	    },
	    mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
	      this.cursorDown = false;
	      this[this.bar.axis] = 0;
	      Object(dom_["off"])(document, 'mousemove', this.mouseMoveDocumentHandler);
	      document.onselectstart = null;
	    }
	  },
	
	  destroyed: function destroyed() {
	    Object(dom_["off"])(document, 'mouseup', this.mouseUpDocumentHandler);
	  }
	});
	// CONCATENATED MODULE: ./packages/scrollbar/src/main.js
	// reference https://github.com/noeldelgado/gemini-scrollbar/blob/master/index.js
	
	
	
	
	
	
	/* istanbul ignore next */
	/* harmony default export */ var main = ({
	  name: 'ElScrollbar',
	
	  components: { Bar: src_bar },
	
	  props: {
	    native: Boolean,
	    wrapStyle: {},
	    wrapClass: {},
	    viewClass: {},
	    viewStyle: {},
	    noresize: Boolean, // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
	    tag: {
	      type: String,
	      default: 'div'
	    }
	  },
	
	  data: function data() {
	    return {
	      sizeWidth: '0',
	      sizeHeight: '0',
	      moveX: 0,
	      moveY: 0
	    };
	  },
	
	
	  computed: {
	    wrap: function wrap() {
	      return this.$refs.wrap;
	    }
	  },
	
	  render: function render(h) {
	    var gutter = scrollbar_width_default()();
	    var style = this.wrapStyle;
	
	    if (gutter) {
	      var gutterWith = '-' + gutter + 'px';
	      var gutterStyle = 'margin-bottom: ' + gutterWith + '; margin-right: ' + gutterWith + ';';
	
	      if (Array.isArray(this.wrapStyle)) {
	        style = Object(util_["toObject"])(this.wrapStyle);
	        style.marginRight = style.marginBottom = gutterWith;
	      } else if (typeof this.wrapStyle === 'string') {
	        style += gutterStyle;
	      } else {
	        style = gutterStyle;
	      }
	    }
	    var view = h(this.tag, {
	      class: ['el-scrollbar__view', this.viewClass],
	      style: this.viewStyle,
	      ref: 'resize'
	    }, this.$slots.default);
	    var wrap = h(
	      'div',
	      {
	        ref: 'wrap',
	        style: style,
	        on: {
	          'scroll': this.handleScroll
	        },
	
	        'class': [this.wrapClass, 'el-scrollbar__wrap', gutter ? '' : 'el-scrollbar__wrap--hidden-default'] },
	      [[view]]
	    );
	    var nodes = void 0;
	
	    if (!this.native) {
	      nodes = [wrap, h(src_bar, {
	        attrs: {
	          move: this.moveX,
	          size: this.sizeWidth }
	      }), h(src_bar, {
	        attrs: {
	          vertical: true,
	          move: this.moveY,
	          size: this.sizeHeight }
	      })];
	    } else {
	      nodes = [h(
	        'div',
	        {
	          ref: 'wrap',
	          'class': [this.wrapClass, 'el-scrollbar__wrap'],
	          style: style },
	        [[view]]
	      )];
	    }
	    return h('div', { class: 'el-scrollbar' }, nodes);
	  },
	
	
	  methods: {
	    handleScroll: function handleScroll() {
	      var wrap = this.wrap;
	
	      this.moveY = wrap.scrollTop * 100 / wrap.clientHeight;
	      this.moveX = wrap.scrollLeft * 100 / wrap.clientWidth;
	    },
	    update: function update() {
	      var heightPercentage = void 0,
	          widthPercentage = void 0;
	      var wrap = this.wrap;
	      if (!wrap) return;
	
	      heightPercentage = wrap.clientHeight * 100 / wrap.scrollHeight;
	      widthPercentage = wrap.clientWidth * 100 / wrap.scrollWidth;
	
	      this.sizeHeight = heightPercentage < 100 ? heightPercentage + '%' : '';
	      this.sizeWidth = widthPercentage < 100 ? widthPercentage + '%' : '';
	    }
	  },
	
	  mounted: function mounted() {
	    if (this.native) return;
	    this.$nextTick(this.update);
	    !this.noresize && Object(resize_event_["addResizeListener"])(this.$refs.resize, this.update);
	  },
	  beforeDestroy: function beforeDestroy() {
	    if (this.native) return;
	    !this.noresize && Object(resize_event_["removeResizeListener"])(this.$refs.resize, this.update);
	  }
	});
	// CONCATENATED MODULE: ./packages/scrollbar/index.js
	
	
	/* istanbul ignore next */
	main.install = function (Vue) {
	  Vue.component(main.name, main);
	};
	
	/* harmony default export */ var scrollbar = __webpack_exports__["default"] = (main);
	
	/***/ }),
	
	/***/ 16:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(81);
	
	/***/ }),
	
	/***/ 2:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(23);
	
	/***/ }),
	
	/***/ 3:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	
	/***/ 38:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(133);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 129 */,
/* 130 */,
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 131);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 131:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/vue-popper"
	var vue_popper_ = __webpack_require__(5);
	var vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);
	
	// EXTERNAL MODULE: external "throttle-debounce/debounce"
	var debounce_ = __webpack_require__(17);
	var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/dom"
	var dom_ = __webpack_require__(2);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// EXTERNAL MODULE: external "vue"
	var external_vue_ = __webpack_require__(7);
	var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);
	
	// CONCATENATED MODULE: ./packages/tooltip/src/main.js
	
	
	
	
	
	
	/* harmony default export */ var main = ({
	  name: 'ElTooltip',
	
	  mixins: [vue_popper_default.a],
	
	  props: {
	    openDelay: {
	      type: Number,
	      default: 0
	    },
	    disabled: Boolean,
	    manual: Boolean,
	    effect: {
	      type: String,
	      default: 'dark'
	    },
	    arrowOffset: {
	      type: Number,
	      default: 0
	    },
	    popperClass: String,
	    content: String,
	    visibleArrow: {
	      default: true
	    },
	    transition: {
	      type: String,
	      default: 'el-fade-in-linear'
	    },
	    popperOptions: {
	      default: function _default() {
	        return {
	          boundariesPadding: 10,
	          gpuAcceleration: false
	        };
	      }
	    },
	    enterable: {
	      type: Boolean,
	      default: true
	    },
	    hideAfter: {
	      type: Number,
	      default: 0
	    },
	    tabindex: {
	      type: Number,
	      default: 0
	    }
	  },
	
	  data: function data() {
	    return {
	      tooltipId: 'el-tooltip-' + Object(util_["generateId"])(),
	      timeoutPending: null,
	      focusing: false
	    };
	  },
	  beforeCreate: function beforeCreate() {
	    var _this = this;
	
	    if (this.$isServer) return;
	
	    this.popperVM = new external_vue_default.a({
	      data: { node: '' },
	      render: function render(h) {
	        return this.node;
	      }
	    }).$mount();
	
	    this.debounceClose = debounce_default()(200, function () {
	      return _this.handleClosePopper();
	    });
	  },
	  render: function render(h) {
	    var _this2 = this;
	
	    if (this.popperVM) {
	      this.popperVM.node = h(
	        'transition',
	        {
	          attrs: {
	            name: this.transition
	          },
	          on: {
	            'afterLeave': this.doDestroy
	          }
	        },
	        [h(
	          'div',
	          {
	            on: {
	              'mouseleave': function mouseleave() {
	                _this2.setExpectedState(false);_this2.debounceClose();
	              },
	              'mouseenter': function mouseenter() {
	                _this2.setExpectedState(true);
	              }
	            },
	
	            ref: 'popper',
	            attrs: { role: 'tooltip',
	              id: this.tooltipId,
	              'aria-hidden': this.disabled || !this.showPopper ? 'true' : 'false'
	            },
	            directives: [{
	              name: 'show',
	              value: !this.disabled && this.showPopper
	            }],
	
	            'class': ['el-tooltip__popper', 'is-' + this.effect, this.popperClass] },
	          [this.$slots.content || this.content]
	        )]
	      );
	    }
	
	    var firstElement = this.getFirstElement();
	    if (!firstElement) return null;
	
	    var data = firstElement.data = firstElement.data || {};
	    data.staticClass = this.addTooltipClass(data.staticClass);
	
	    return firstElement;
	  },
	  mounted: function mounted() {
	    var _this3 = this;
	
	    this.referenceElm = this.$el;
	    if (this.$el.nodeType === 1) {
	      this.$el.setAttribute('aria-describedby', this.tooltipId);
	      this.$el.setAttribute('tabindex', this.tabindex);
	      Object(dom_["on"])(this.referenceElm, 'mouseenter', this.show);
	      Object(dom_["on"])(this.referenceElm, 'mouseleave', this.hide);
	      Object(dom_["on"])(this.referenceElm, 'focus', function () {
	        if (!_this3.$slots.default || !_this3.$slots.default.length) {
	          _this3.handleFocus();
	          return;
	        }
	        var instance = _this3.$slots.default[0].componentInstance;
	        if (instance && instance.focus) {
	          instance.focus();
	        } else {
	          _this3.handleFocus();
	        }
	      });
	      Object(dom_["on"])(this.referenceElm, 'blur', this.handleBlur);
	      Object(dom_["on"])(this.referenceElm, 'click', this.removeFocusing);
	    }
	    // fix issue https://github.com/ElemeFE/element/issues/14424
	    if (this.value && this.popperVM) {
	      this.popperVM.$nextTick(function () {
	        if (_this3.value) {
	          _this3.updatePopper();
	        }
	      });
	    }
	  },
	
	  watch: {
	    focusing: function focusing(val) {
	      if (val) {
	        Object(dom_["addClass"])(this.referenceElm, 'focusing');
	      } else {
	        Object(dom_["removeClass"])(this.referenceElm, 'focusing');
	      }
	    }
	  },
	  methods: {
	    show: function show() {
	      this.setExpectedState(true);
	      this.handleShowPopper();
	    },
	    hide: function hide() {
	      this.setExpectedState(false);
	      this.debounceClose();
	    },
	    handleFocus: function handleFocus() {
	      this.focusing = true;
	      this.show();
	    },
	    handleBlur: function handleBlur() {
	      this.focusing = false;
	      this.hide();
	    },
	    removeFocusing: function removeFocusing() {
	      this.focusing = false;
	    },
	    addTooltipClass: function addTooltipClass(prev) {
	      if (!prev) {
	        return 'el-tooltip';
	      } else {
	        return 'el-tooltip ' + prev.replace('el-tooltip', '');
	      }
	    },
	    handleShowPopper: function handleShowPopper() {
	      var _this4 = this;
	
	      if (!this.expectedState || this.manual) return;
	      clearTimeout(this.timeout);
	      this.timeout = setTimeout(function () {
	        _this4.showPopper = true;
	      }, this.openDelay);
	
	      if (this.hideAfter > 0) {
	        this.timeoutPending = setTimeout(function () {
	          _this4.showPopper = false;
	        }, this.hideAfter);
	      }
	    },
	    handleClosePopper: function handleClosePopper() {
	      if (this.enterable && this.expectedState || this.manual) return;
	      clearTimeout(this.timeout);
	
	      if (this.timeoutPending) {
	        clearTimeout(this.timeoutPending);
	      }
	      this.showPopper = false;
	
	      if (this.disabled) {
	        this.doDestroy();
	      }
	    },
	    setExpectedState: function setExpectedState(expectedState) {
	      if (expectedState === false) {
	        clearTimeout(this.timeoutPending);
	      }
	      this.expectedState = expectedState;
	    },
	    getFirstElement: function getFirstElement() {
	      var slots = this.$slots.default;
	      if (!Array.isArray(slots)) return null;
	      var element = null;
	      for (var index = 0; index < slots.length; index++) {
	        if (slots[index] && slots[index].tag) {
	          element = slots[index];
	        };
	      }
	      return element;
	    }
	  },
	
	  beforeDestroy: function beforeDestroy() {
	    this.popperVM && this.popperVM.$destroy();
	  },
	  destroyed: function destroyed() {
	    var reference = this.referenceElm;
	    if (reference.nodeType === 1) {
	      Object(dom_["off"])(reference, 'mouseenter', this.show);
	      Object(dom_["off"])(reference, 'mouseleave', this.hide);
	      Object(dom_["off"])(reference, 'focus', this.handleFocus);
	      Object(dom_["off"])(reference, 'blur', this.handleBlur);
	      Object(dom_["off"])(reference, 'click', this.removeFocusing);
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/tooltip/index.js
	
	
	/* istanbul ignore next */
	main.install = function (Vue) {
	  Vue.component(main.name, main);
	};
	
	/* harmony default export */ var tooltip = __webpack_exports__["default"] = (main);
	
	/***/ }),
	
	/***/ 17:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(95);
	
	/***/ }),
	
	/***/ 2:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(23);
	
	/***/ }),
	
	/***/ 3:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	
	/***/ 5:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(82);
	
	/***/ }),
	
	/***/ 7:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(1);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _dom = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var nodeList = [];
	var ctx = '@@clickoutsideContext';
	
	var startClick = void 0;
	var seed = 0;
	
	!_vue2.default.prototype.$isServer && (0, _dom.on)(document, 'mousedown', function (e) {
	  return startClick = e;
	});
	
	!_vue2.default.prototype.$isServer && (0, _dom.on)(document, 'mouseup', function (e) {
	  nodeList.forEach(function (node) {
	    return node[ctx].documentHandler(e, startClick);
	  });
	});
	
	function createDocumentHandler(el, binding, vnode) {
	  return function () {
	    var mouseup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var mousedown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	    if (!vnode || !vnode.context || !mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target || vnode.context.popperElm && (vnode.context.popperElm.contains(mouseup.target) || vnode.context.popperElm.contains(mousedown.target))) return;
	
	    if (binding.expression && el[ctx].methodName && vnode.context[el[ctx].methodName]) {
	      vnode.context[el[ctx].methodName]();
	    } else {
	      el[ctx].bindingFn && el[ctx].bindingFn();
	    }
	  };
	}
	
	/**
	 * v-clickoutside
	 * @desc 点击元素外面才会触发的事件
	 * @example
	 * ```vue
	 * <div v-element-clickoutside="handleClose">
	 * ```
	 */
	exports.default = {
	  bind: function bind(el, binding, vnode) {
	    nodeList.push(el);
	    var id = seed++;
	    el[ctx] = {
	      id: id,
	      documentHandler: createDocumentHandler(el, binding, vnode),
	      methodName: binding.expression,
	      bindingFn: binding.value
	    };
	  },
	  update: function update(el, binding, vnode) {
	    el[ctx].documentHandler = createDocumentHandler(el, binding, vnode);
	    el[ctx].methodName = binding.expression;
	    el[ctx].bindingFn = binding.value;
	  },
	  unbind: function unbind(el) {
	    var len = nodeList.length;
	
	    for (var i = 0; i < len; i++) {
	      if (nodeList[i][ctx].id === el[ctx].id) {
	        nodeList.splice(i, 1);
	        break;
	      }
	    }
	    delete el[ctx];
	  }
	};

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	exports.default = function () {
	  if (_vue2.default.prototype.$isServer) return 0;
	  if (scrollBarWidth !== undefined) return scrollBarWidth;
	
	  var outer = document.createElement('div');
	  outer.className = 'el-scrollbar__wrap';
	  outer.style.visibility = 'hidden';
	  outer.style.width = '100px';
	  outer.style.position = 'absolute';
	  outer.style.top = '-9999px';
	  document.body.appendChild(outer);
	
	  var widthNoScroll = outer.offsetWidth;
	  outer.style.overflow = 'scroll';
	
	  var inner = document.createElement('div');
	  inner.style.width = '100%';
	  outer.appendChild(inner);
	
	  var widthWithScroll = inner.offsetWidth;
	  outer.parentNode.removeChild(outer);
	  scrollBarWidth = widthNoScroll - widthWithScroll;
	
	  return scrollBarWidth;
	};
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var scrollBarWidth = void 0;
	
	;

/***/ }),
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _util = __webpack_require__(18);
	
	var util = _interopRequireWildcard(_util);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	/**
	 *  Rule for validating required fields.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function required(rule, value, source, errors, options, type) {
	  if (rule.required && (!source.hasOwnProperty(rule.field) || util.isEmptyValue(value, type || rule.type))) {
	    errors.push(util.format(options.messages.required, rule.fullField));
	  }
	}
	
	exports['default'] = required;
	module.exports = exports['default'];

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	var settle = __webpack_require__(218);
	var buildURL = __webpack_require__(221);
	var parseHeaders = __webpack_require__(227);
	var isURLSameOrigin = __webpack_require__(225);
	var createError = __webpack_require__(143);
	var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(220);
	
	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	
	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }
	
	    var request = new XMLHttpRequest();
	    var loadEvent = 'onreadystatechange';
	    var xDomain = false;
	
	    // For IE 8/9 CORS support
	    // Only supports POST and GET calls and doesn't returns the response headers.
	    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
	    if (("production") !== 'test' &&
	        typeof window !== 'undefined' &&
	        window.XDomainRequest && !('withCredentials' in request) &&
	        !isURLSameOrigin(config.url)) {
	      request = new window.XDomainRequest();
	      loadEvent = 'onload';
	      xDomain = true;
	      request.onprogress = function handleProgress() {};
	      request.ontimeout = function handleTimeout() {};
	    }
	
	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }
	
	    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);
	
	    // Set the request timeout in MS
	    request.timeout = config.timeout;
	
	    // Listen for ready state
	    request[loadEvent] = function handleLoad() {
	      if (!request || (request.readyState !== 4 && !xDomain)) {
	        return;
	      }
	
	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }
	
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	        status: request.status === 1223 ? 204 : request.status,
	        statusText: request.status === 1223 ? 'No Content' : request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };
	
	      settle(resolve, reject, response);
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(223);
	
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
	          cookies.read(config.xsrfCookieName) :
	          undefined;
	
	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }
	
	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }
	
	    // Add withCredentials to request if needed
	    if (config.withCredentials) {
	      request.withCredentials = true;
	    }
	
	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        if (request.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }
	
	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }
	
	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }
	
	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }
	
	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }
	
	    if (requestData === undefined) {
	      requestData = null;
	    }
	
	    // Send the request
	    request.send(requestData);
	  });
	};


/***/ }),
/* 141 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}
	
	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};
	
	Cancel.prototype.__CANCEL__ = true;
	
	module.exports = Cancel;


/***/ }),
/* 142 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var enhanceError = __webpack_require__(217);
	
	/**
	 * Create an Error with the specified message, config, error code, and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, response);
	};


/***/ }),
/* 144 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ }),
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(52);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(70)
	  , TAG = __webpack_require__(26)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(29).document && document.documentElement;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(47) && !__webpack_require__(63)(function(){
	  return Object.defineProperty(__webpack_require__(113)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(70);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(88)
	  , $export        = __webpack_require__(54)
	  , redefine       = __webpack_require__(170)
	  , hide           = __webpack_require__(56)
	  , has            = __webpack_require__(55)
	  , Iterators      = __webpack_require__(72)
	  , $iterCreate    = __webpack_require__(394)
	  , setToStringTag = __webpack_require__(90)
	  , getPrototypeOf = __webpack_require__(404)
	  , ITERATOR       = __webpack_require__(26)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(46)
	  , dPs         = __webpack_require__(401)
	  , enumBugKeys = __webpack_require__(114)
	  , IE_PROTO    = __webpack_require__(116)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(113)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(163).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(169)
	  , hiddenKeys = __webpack_require__(114).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(55)
	  , toIObject    = __webpack_require__(49)
	  , arrayIndexOf = __webpack_require__(387)(false)
	  , IE_PROTO     = __webpack_require__(116)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(56);

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(87)
	  , invoke             = __webpack_require__(390)
	  , html               = __webpack_require__(163)
	  , cel                = __webpack_require__(113)
	  , global             = __webpack_require__(29)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(70)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(118)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(162)
	  , ITERATOR  = __webpack_require__(26)('iterator')
	  , Iterators = __webpack_require__(72);
	module.exports = __webpack_require__(25).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ }),
/* 174 */
/***/ (function(module, exports) {



/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 114);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 10:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(21);
	
	/***/ }),
	
	/***/ 114:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/input-number/src/input-number.vue?vue&type=template&id=42f8cf66&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      class: [
	        "el-input-number",
	        _vm.inputNumberSize ? "el-input-number--" + _vm.inputNumberSize : "",
	        { "is-disabled": _vm.inputNumberDisabled },
	        { "is-without-controls": !_vm.controls },
	        { "is-controls-right": _vm.controlsAtRight }
	      ],
	      on: {
	        dragstart: function($event) {
	          $event.preventDefault()
	        }
	      }
	    },
	    [
	      _vm.controls
	        ? _c(
	            "span",
	            {
	              directives: [
	                {
	                  name: "repeat-click",
	                  rawName: "v-repeat-click",
	                  value: _vm.decrease,
	                  expression: "decrease"
	                }
	              ],
	              staticClass: "el-input-number__decrease",
	              class: { "is-disabled": _vm.minDisabled },
	              attrs: { role: "button" },
	              on: {
	                keydown: function($event) {
	                  if (
	                    !("button" in $event) &&
	                    _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
	                  ) {
	                    return null
	                  }
	                  return _vm.decrease($event)
	                }
	              }
	            },
	            [
	              _c("i", {
	                class:
	                  "el-icon-" + (_vm.controlsAtRight ? "arrow-down" : "minus")
	              })
	            ]
	          )
	        : _vm._e(),
	      _vm.controls
	        ? _c(
	            "span",
	            {
	              directives: [
	                {
	                  name: "repeat-click",
	                  rawName: "v-repeat-click",
	                  value: _vm.increase,
	                  expression: "increase"
	                }
	              ],
	              staticClass: "el-input-number__increase",
	              class: { "is-disabled": _vm.maxDisabled },
	              attrs: { role: "button" },
	              on: {
	                keydown: function($event) {
	                  if (
	                    !("button" in $event) &&
	                    _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
	                  ) {
	                    return null
	                  }
	                  return _vm.increase($event)
	                }
	              }
	            },
	            [
	              _c("i", {
	                class: "el-icon-" + (_vm.controlsAtRight ? "arrow-up" : "plus")
	              })
	            ]
	          )
	        : _vm._e(),
	      _c("el-input", {
	        ref: "input",
	        attrs: {
	          value: _vm.displayValue,
	          placeholder: _vm.placeholder,
	          disabled: _vm.inputNumberDisabled,
	          size: _vm.inputNumberSize,
	          max: _vm.max,
	          min: _vm.min,
	          name: _vm.name,
	          label: _vm.label
	        },
	        on: {
	          blur: _vm.handleBlur,
	          focus: _vm.handleFocus,
	          input: _vm.handleInput,
	          change: _vm.handleInputChange
	        },
	        nativeOn: {
	          keydown: [
	            function($event) {
	              if (
	                !("button" in $event) &&
	                _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])
	              ) {
	                return null
	              }
	              $event.preventDefault()
	              return _vm.increase($event)
	            },
	            function($event) {
	              if (
	                !("button" in $event) &&
	                _vm._k($event.keyCode, "down", 40, $event.key, [
	                  "Down",
	                  "ArrowDown"
	                ])
	              ) {
	                return null
	              }
	              $event.preventDefault()
	              return _vm.decrease($event)
	            }
	          ]
	        }
	      })
	    ],
	    1
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/input-number/src/input-number.vue?vue&type=template&id=42f8cf66&
	
	// EXTERNAL MODULE: external "element-ui/lib/input"
	var input_ = __webpack_require__(10);
	var input_default = /*#__PURE__*/__webpack_require__.n(input_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/focus"
	var focus_ = __webpack_require__(22);
	var focus_default = /*#__PURE__*/__webpack_require__.n(focus_);
	
	// EXTERNAL MODULE: ./src/directives/repeat-click.js
	var repeat_click = __webpack_require__(30);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/input-number/src/input-number.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	/* harmony default export */ var input_numbervue_type_script_lang_js_ = ({
	  name: 'ElInputNumber',
	  mixins: [focus_default()('input')],
	  inject: {
	    elForm: {
	      default: ''
	    },
	    elFormItem: {
	      default: ''
	    }
	  },
	  directives: {
	    repeatClick: repeat_click["a" /* default */]
	  },
	  components: {
	    ElInput: input_default.a
	  },
	  props: {
	    step: {
	      type: Number,
	      default: 1
	    },
	    stepStrictly: {
	      type: Boolean,
	      default: false
	    },
	    max: {
	      type: Number,
	      default: Infinity
	    },
	    min: {
	      type: Number,
	      default: -Infinity
	    },
	    value: {},
	    disabled: Boolean,
	    size: String,
	    controls: {
	      type: Boolean,
	      default: true
	    },
	    controlsPosition: {
	      type: String,
	      default: ''
	    },
	    name: String,
	    label: String,
	    placeholder: String,
	    precision: {
	      type: Number,
	      validator: function validator(val) {
	        return val >= 0 && val === parseInt(val, 10);
	      }
	    }
	  },
	  data: function data() {
	    return {
	      currentValue: 0,
	      userInput: null
	    };
	  },
	
	  watch: {
	    value: {
	      immediate: true,
	      handler: function handler(value) {
	        var newVal = value === undefined ? value : Number(value);
	        if (newVal !== undefined) {
	          if (isNaN(newVal)) {
	            return;
	          }
	
	          if (this.stepStrictly) {
	            var stepPrecision = this.getPrecision(this.step);
	            var precisionFactor = Math.pow(10, stepPrecision);
	            newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;
	          }
	
	          if (this.precision !== undefined) {
	            newVal = this.toPrecision(newVal, this.precision);
	          }
	        }
	        if (newVal >= this.max) newVal = this.max;
	        if (newVal <= this.min) newVal = this.min;
	        this.currentValue = newVal;
	        this.userInput = null;
	        this.$emit('input', newVal);
	      }
	    }
	  },
	  computed: {
	    minDisabled: function minDisabled() {
	      return this._decrease(this.value, this.step) < this.min;
	    },
	    maxDisabled: function maxDisabled() {
	      return this._increase(this.value, this.step) > this.max;
	    },
	    numPrecision: function numPrecision() {
	      var value = this.value,
	          step = this.step,
	          getPrecision = this.getPrecision,
	          precision = this.precision;
	
	      var stepPrecision = getPrecision(step);
	      if (precision !== undefined) {
	        if (stepPrecision > precision) {
	          console.warn('[Element Warn][InputNumber]precision should not be less than the decimal places of step');
	        }
	        return precision;
	      } else {
	        return Math.max(getPrecision(value), stepPrecision);
	      }
	    },
	    controlsAtRight: function controlsAtRight() {
	      return this.controls && this.controlsPosition === 'right';
	    },
	    _elFormItemSize: function _elFormItemSize() {
	      return (this.elFormItem || {}).elFormItemSize;
	    },
	    inputNumberSize: function inputNumberSize() {
	      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
	    },
	    inputNumberDisabled: function inputNumberDisabled() {
	      return this.disabled || !!(this.elForm || {}).disabled;
	    },
	    displayValue: function displayValue() {
	      if (this.userInput !== null) {
	        return this.userInput;
	      }
	
	      var currentValue = this.currentValue;
	
	      if (typeof currentValue === 'number') {
	        if (this.stepStrictly) {
	          var stepPrecision = this.getPrecision(this.step);
	          var precisionFactor = Math.pow(10, stepPrecision);
	          currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;
	        }
	
	        if (this.precision !== undefined) {
	          currentValue = currentValue.toFixed(this.precision);
	        }
	      }
	
	      return currentValue;
	    }
	  },
	  methods: {
	    toPrecision: function toPrecision(num, precision) {
	      if (precision === undefined) precision = this.numPrecision;
	      return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));
	    },
	    getPrecision: function getPrecision(value) {
	      if (value === undefined) return 0;
	      var valueString = value.toString();
	      var dotPosition = valueString.indexOf('.');
	      var precision = 0;
	      if (dotPosition !== -1) {
	        precision = valueString.length - dotPosition - 1;
	      }
	      return precision;
	    },
	    _increase: function _increase(val, step) {
	      if (typeof val !== 'number' && val !== undefined) return this.currentValue;
	
	      var precisionFactor = Math.pow(10, this.numPrecision);
	      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.
	      return this.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);
	    },
	    _decrease: function _decrease(val, step) {
	      if (typeof val !== 'number' && val !== undefined) return this.currentValue;
	
	      var precisionFactor = Math.pow(10, this.numPrecision);
	
	      return this.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);
	    },
	    increase: function increase() {
	      if (this.inputNumberDisabled || this.maxDisabled) return;
	      var value = this.value || 0;
	      var newVal = this._increase(value, this.step);
	      this.setCurrentValue(newVal);
	    },
	    decrease: function decrease() {
	      if (this.inputNumberDisabled || this.minDisabled) return;
	      var value = this.value || 0;
	      var newVal = this._decrease(value, this.step);
	      this.setCurrentValue(newVal);
	    },
	    handleBlur: function handleBlur(event) {
	      this.$emit('blur', event);
	    },
	    handleFocus: function handleFocus(event) {
	      this.$emit('focus', event);
	    },
	    setCurrentValue: function setCurrentValue(newVal) {
	      var oldVal = this.currentValue;
	      if (typeof newVal === 'number' && this.precision !== undefined) {
	        newVal = this.toPrecision(newVal, this.precision);
	      }
	      if (newVal >= this.max) newVal = this.max;
	      if (newVal <= this.min) newVal = this.min;
	      if (oldVal === newVal) return;
	      this.userInput = null;
	      this.$emit('input', newVal);
	      this.$emit('change', newVal, oldVal);
	      this.currentValue = newVal;
	    },
	    handleInput: function handleInput(value) {
	      this.userInput = value;
	    },
	    handleInputChange: function handleInputChange(value) {
	      var newVal = value === '' ? undefined : Number(value);
	      if (!isNaN(newVal) || value === '') {
	        this.setCurrentValue(newVal);
	      }
	      this.userInput = null;
	    },
	    select: function select() {
	      this.$refs.input.select();
	    }
	  },
	  mounted: function mounted() {
	    var innerInput = this.$refs.input.$refs.input;
	    innerInput.setAttribute('role', 'spinbutton');
	    innerInput.setAttribute('aria-valuemax', this.max);
	    innerInput.setAttribute('aria-valuemin', this.min);
	    innerInput.setAttribute('aria-valuenow', this.currentValue);
	    innerInput.setAttribute('aria-disabled', this.inputNumberDisabled);
	  },
	  updated: function updated() {
	    if (!this.$refs || !this.$refs.input) return;
	    var innerInput = this.$refs.input.$refs.input;
	    innerInput.setAttribute('aria-valuenow', this.currentValue);
	  }
	});
	// CONCATENATED MODULE: ./packages/input-number/src/input-number.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_input_numbervue_type_script_lang_js_ = (input_numbervue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/input-number/src/input-number.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_input_numbervue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/input-number/src/input-number.vue"
	/* harmony default export */ var input_number = (component.exports);
	// CONCATENATED MODULE: ./packages/input-number/index.js
	
	
	/* istanbul ignore next */
	input_number.install = function (Vue) {
	  Vue.component(input_number.name, input_number);
	};
	
	/* harmony default export */ var packages_input_number = __webpack_exports__["default"] = (input_number);
	
	/***/ }),
	
	/***/ 2:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(23);
	
	/***/ }),
	
	/***/ 22:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(176);
	
	/***/ }),
	
	/***/ 30:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
	/* harmony import */ var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__);
	
	
	/* harmony default export */ __webpack_exports__["a"] = ({
	  bind: function bind(el, binding, vnode) {
	    var interval = null;
	    var startTime = void 0;
	    var handler = function handler() {
	      return vnode.context[binding.expression].apply();
	    };
	    var clear = function clear() {
	      if (Date.now() - startTime < 100) {
	        handler();
	      }
	      clearInterval(interval);
	      interval = null;
	    };
	
	    Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["on"])(el, 'mousedown', function (e) {
	      if (e.button !== 0) return;
	      startTime = Date.now();
	      Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["once"])(document, 'mouseup', clear);
	      clearInterval(interval);
	      interval = setInterval(handler, 100);
	    });
	  }
	});
	
	/***/ })
	
	/******/ });

/***/ }),
/* 176 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (ref) {
	  return {
	    methods: {
	      focus: function focus() {
	        this.$refs[ref].focus();
	      }
	    }
	  };
	};
	
	;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 74);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 2:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(23);
	
	/***/ }),
	
	/***/ 3:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	
	/***/ 5:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(82);
	
	/***/ }),
	
	/***/ 7:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(1);
	
	/***/ }),
	
	/***/ 74:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/popover/src/main.vue?vue&type=template&id=52060272&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "span",
	    [
	      _c(
	        "transition",
	        {
	          attrs: { name: _vm.transition },
	          on: {
	            "after-enter": _vm.handleAfterEnter,
	            "after-leave": _vm.handleAfterLeave
	          }
	        },
	        [
	          _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "show",
	                  rawName: "v-show",
	                  value: !_vm.disabled && _vm.showPopper,
	                  expression: "!disabled && showPopper"
	                }
	              ],
	              ref: "popper",
	              staticClass: "el-popover el-popper",
	              class: [_vm.popperClass, _vm.content && "el-popover--plain"],
	              style: { width: _vm.width + "px" },
	              attrs: {
	                role: "tooltip",
	                id: _vm.tooltipId,
	                "aria-hidden":
	                  _vm.disabled || !_vm.showPopper ? "true" : "false"
	              }
	            },
	            [
	              _vm.title
	                ? _c("div", {
	                    staticClass: "el-popover__title",
	                    domProps: { textContent: _vm._s(_vm.title) }
	                  })
	                : _vm._e(),
	              _vm._t("default", [_vm._v(_vm._s(_vm.content))])
	            ],
	            2
	          )
	        ]
	      ),
	      _c(
	        "span",
	        { ref: "wrapper", staticClass: "el-popover__reference-wrapper" },
	        [_vm._t("reference")],
	        2
	      )
	    ],
	    1
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/popover/src/main.vue?vue&type=template&id=52060272&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/vue-popper"
	var vue_popper_ = __webpack_require__(5);
	var vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/dom"
	var dom_ = __webpack_require__(2);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/popover/src/main.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	/* harmony default export */ var mainvue_type_script_lang_js_ = ({
	  name: 'ElPopover',
	
	  mixins: [vue_popper_default.a],
	
	  props: {
	    trigger: {
	      type: String,
	      default: 'click',
	      validator: function validator(value) {
	        return ['click', 'focus', 'hover', 'manual'].indexOf(value) > -1;
	      }
	    },
	    openDelay: {
	      type: Number,
	      default: 0
	    },
	    closeDelay: {
	      type: Number,
	      default: 200
	    },
	    title: String,
	    disabled: Boolean,
	    content: String,
	    reference: {},
	    popperClass: String,
	    width: {},
	    visibleArrow: {
	      default: true
	    },
	    arrowOffset: {
	      type: Number,
	      default: 0
	    },
	    transition: {
	      type: String,
	      default: 'fade-in-linear'
	    },
	    tabindex: {
	      type: Number,
	      default: 0
	    }
	  },
	
	  computed: {
	    tooltipId: function tooltipId() {
	      return 'el-popover-' + Object(util_["generateId"])();
	    }
	  },
	  watch: {
	    showPopper: function showPopper(val) {
	      if (this.disabled) {
	        return;
	      }
	      val ? this.$emit('show') : this.$emit('hide');
	    }
	  },
	
	  mounted: function mounted() {
	    var _this = this;
	
	    var reference = this.referenceElm = this.reference || this.$refs.reference;
	    var popper = this.popper || this.$refs.popper;
	
	    if (!reference && this.$refs.wrapper.children) {
	      reference = this.referenceElm = this.$refs.wrapper.children[0];
	    }
	    // 可访问性
	    if (reference) {
	      Object(dom_["addClass"])(reference, 'el-popover__reference');
	      reference.setAttribute('aria-describedby', this.tooltipId);
	      reference.setAttribute('tabindex', this.tabindex); // tab序列
	      popper.setAttribute('tabindex', 0);
	
	      if (this.trigger !== 'click') {
	        Object(dom_["on"])(reference, 'focusin', function () {
	          _this.handleFocus();
	          var instance = reference.__vue__;
	          if (instance && typeof instance.focus === 'function') {
	            instance.focus();
	          }
	        });
	        Object(dom_["on"])(popper, 'focusin', this.handleFocus);
	        Object(dom_["on"])(reference, 'focusout', this.handleBlur);
	        Object(dom_["on"])(popper, 'focusout', this.handleBlur);
	      }
	      Object(dom_["on"])(reference, 'keydown', this.handleKeydown);
	      Object(dom_["on"])(reference, 'click', this.handleClick);
	    }
	    if (this.trigger === 'click') {
	      Object(dom_["on"])(reference, 'click', this.doToggle);
	      Object(dom_["on"])(document, 'click', this.handleDocumentClick);
	    } else if (this.trigger === 'hover') {
	      Object(dom_["on"])(reference, 'mouseenter', this.handleMouseEnter);
	      Object(dom_["on"])(popper, 'mouseenter', this.handleMouseEnter);
	      Object(dom_["on"])(reference, 'mouseleave', this.handleMouseLeave);
	      Object(dom_["on"])(popper, 'mouseleave', this.handleMouseLeave);
	    } else if (this.trigger === 'focus') {
	      if (this.tabindex < 0) {
	        console.warn('[Element Warn][Popover]a negative taindex means that the element cannot be focused by tab key');
	      }
	      if (reference.querySelector('input, textarea')) {
	        Object(dom_["on"])(reference, 'focusin', this.doShow);
	        Object(dom_["on"])(reference, 'focusout', this.doClose);
	      } else {
	        Object(dom_["on"])(reference, 'mousedown', this.doShow);
	        Object(dom_["on"])(reference, 'mouseup', this.doClose);
	      }
	    }
	  },
	  beforeDestroy: function beforeDestroy() {
	    this.cleanup();
	  },
	  deactivated: function deactivated() {
	    this.cleanup();
	  },
	
	
	  methods: {
	    doToggle: function doToggle() {
	      this.showPopper = !this.showPopper;
	    },
	    doShow: function doShow() {
	      this.showPopper = true;
	    },
	    doClose: function doClose() {
	      this.showPopper = false;
	    },
	    handleFocus: function handleFocus() {
	      Object(dom_["addClass"])(this.referenceElm, 'focusing');
	      if (this.trigger === 'click' || this.trigger === 'focus') this.showPopper = true;
	    },
	    handleClick: function handleClick() {
	      Object(dom_["removeClass"])(this.referenceElm, 'focusing');
	    },
	    handleBlur: function handleBlur() {
	      Object(dom_["removeClass"])(this.referenceElm, 'focusing');
	      if (this.trigger === 'click' || this.trigger === 'focus') this.showPopper = false;
	    },
	    handleMouseEnter: function handleMouseEnter() {
	      var _this2 = this;
	
	      clearTimeout(this._timer);
	      if (this.openDelay) {
	        this._timer = setTimeout(function () {
	          _this2.showPopper = true;
	        }, this.openDelay);
	      } else {
	        this.showPopper = true;
	      }
	    },
	    handleKeydown: function handleKeydown(ev) {
	      if (ev.keyCode === 27 && this.trigger !== 'manual') {
	        // esc
	        this.doClose();
	      }
	    },
	    handleMouseLeave: function handleMouseLeave() {
	      var _this3 = this;
	
	      clearTimeout(this._timer);
	      if (this.closeDelay) {
	        this._timer = setTimeout(function () {
	          _this3.showPopper = false;
	        }, this.closeDelay);
	      } else {
	        this.showPopper = false;
	      }
	    },
	    handleDocumentClick: function handleDocumentClick(e) {
	      var reference = this.reference || this.$refs.reference;
	      var popper = this.popper || this.$refs.popper;
	
	      if (!reference && this.$refs.wrapper.children) {
	        reference = this.referenceElm = this.$refs.wrapper.children[0];
	      }
	      if (!this.$el || !reference || this.$el.contains(e.target) || reference.contains(e.target) || !popper || popper.contains(e.target)) return;
	      this.showPopper = false;
	    },
	    handleAfterEnter: function handleAfterEnter() {
	      this.$emit('after-enter');
	    },
	    handleAfterLeave: function handleAfterLeave() {
	      this.$emit('after-leave');
	      this.doDestroy();
	    },
	    cleanup: function cleanup() {
	      if (this.openDelay || this.closeDelay) {
	        clearTimeout(this._timer);
	      }
	    }
	  },
	
	  destroyed: function destroyed() {
	    var reference = this.reference;
	
	    Object(dom_["off"])(reference, 'click', this.doToggle);
	    Object(dom_["off"])(reference, 'mouseup', this.doClose);
	    Object(dom_["off"])(reference, 'mousedown', this.doShow);
	    Object(dom_["off"])(reference, 'focusin', this.doShow);
	    Object(dom_["off"])(reference, 'focusout', this.doClose);
	    Object(dom_["off"])(reference, 'mousedown', this.doShow);
	    Object(dom_["off"])(reference, 'mouseup', this.doClose);
	    Object(dom_["off"])(reference, 'mouseleave', this.handleMouseLeave);
	    Object(dom_["off"])(reference, 'mouseenter', this.handleMouseEnter);
	    Object(dom_["off"])(document, 'click', this.handleDocumentClick);
	  }
	});
	// CONCATENATED MODULE: ./packages/popover/src/main.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/popover/src/main.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_mainvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/popover/src/main.vue"
	/* harmony default export */ var main = (component.exports);
	// CONCATENATED MODULE: ./packages/popover/src/directive.js
	var getReference = function getReference(el, binding, vnode) {
	  var _ref = binding.expression ? binding.value : binding.arg;
	  var popper = vnode.context.$refs[_ref];
	  if (popper) {
	    if (Array.isArray(popper)) {
	      popper[0].$refs.reference = el;
	    } else {
	      popper.$refs.reference = el;
	    }
	  }
	};
	
	/* harmony default export */ var directive = ({
	  bind: function bind(el, binding, vnode) {
	    getReference(el, binding, vnode);
	  },
	  inserted: function inserted(el, binding, vnode) {
	    getReference(el, binding, vnode);
	  }
	});
	// EXTERNAL MODULE: external "vue"
	var external_vue_ = __webpack_require__(7);
	var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);
	
	// CONCATENATED MODULE: ./packages/popover/index.js
	
	
	
	
	external_vue_default.a.directive('popover', directive);
	
	/* istanbul ignore next */
	main.install = function (Vue) {
	  Vue.directive('popover', directive);
	  Vue.component(main.name, main);
	};
	main.directive = directive;
	
	/* harmony default export */ var popover = __webpack_exports__["default"] = (main);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 62);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 29:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(131);
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 49:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(175);
	
	/***/ }),
	
	/***/ 62:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/main.vue?vue&type=template&id=32708644&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      staticClass: "el-slider",
	      class: {
	        "is-vertical": _vm.vertical,
	        "el-slider--with-input": _vm.showInput
	      },
	      attrs: {
	        role: "slider",
	        "aria-valuemin": _vm.min,
	        "aria-valuemax": _vm.max,
	        "aria-orientation": _vm.vertical ? "vertical" : "horizontal",
	        "aria-disabled": _vm.sliderDisabled
	      }
	    },
	    [
	      _vm.showInput && !_vm.range
	        ? _c("el-input-number", {
	            ref: "input",
	            staticClass: "el-slider__input",
	            attrs: {
	              step: _vm.step,
	              disabled: _vm.sliderDisabled,
	              controls: _vm.showInputControls,
	              min: _vm.min,
	              max: _vm.max,
	              debounce: _vm.debounce,
	              size: _vm.inputSize
	            },
	            on: { change: _vm.emitChange },
	            model: {
	              value: _vm.firstValue,
	              callback: function($$v) {
	                _vm.firstValue = $$v
	              },
	              expression: "firstValue"
	            }
	          })
	        : _vm._e(),
	      _c(
	        "div",
	        {
	          ref: "slider",
	          staticClass: "el-slider__runway",
	          class: { "show-input": _vm.showInput, disabled: _vm.sliderDisabled },
	          style: _vm.runwayStyle,
	          on: { click: _vm.onSliderClick }
	        },
	        [
	          _c("div", { staticClass: "el-slider__bar", style: _vm.barStyle }),
	          _c("slider-button", {
	            ref: "button1",
	            attrs: {
	              vertical: _vm.vertical,
	              "tooltip-class": _vm.tooltipClass
	            },
	            model: {
	              value: _vm.firstValue,
	              callback: function($$v) {
	                _vm.firstValue = $$v
	              },
	              expression: "firstValue"
	            }
	          }),
	          _vm.range
	            ? _c("slider-button", {
	                ref: "button2",
	                attrs: {
	                  vertical: _vm.vertical,
	                  "tooltip-class": _vm.tooltipClass
	                },
	                model: {
	                  value: _vm.secondValue,
	                  callback: function($$v) {
	                    _vm.secondValue = $$v
	                  },
	                  expression: "secondValue"
	                }
	              })
	            : _vm._e(),
	          _vm._l(_vm.stops, function(item, key) {
	            return _vm.showStops
	              ? _c("div", {
	                  key: key,
	                  staticClass: "el-slider__stop",
	                  style: _vm.getStopStyle(item)
	                })
	              : _vm._e()
	          }),
	          _vm.markList.length > 0
	            ? [
	                _c(
	                  "div",
	                  _vm._l(_vm.markList, function(item, key) {
	                    return _c("div", {
	                      key: key,
	                      staticClass: "el-slider__stop el-slider__marks-stop",
	                      style: _vm.getStopStyle(item.position)
	                    })
	                  }),
	                  0
	                ),
	                _c(
	                  "div",
	                  { staticClass: "el-slider__marks" },
	                  _vm._l(_vm.markList, function(item, key) {
	                    return _c("slider-marker", {
	                      key: key,
	                      style: _vm.getStopStyle(item.position),
	                      attrs: { mark: item.mark }
	                    })
	                  }),
	                  1
	                )
	              ]
	            : _vm._e()
	        ],
	        2
	      )
	    ],
	    1
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/slider/src/main.vue?vue&type=template&id=32708644&
	
	// EXTERNAL MODULE: external "element-ui/lib/input-number"
	var input_number_ = __webpack_require__(49);
	var input_number_default = /*#__PURE__*/__webpack_require__.n(input_number_);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/button.vue?vue&type=template&id=e72d2ad2&
	var buttonvue_type_template_id_e72d2ad2_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      ref: "button",
	      staticClass: "el-slider__button-wrapper",
	      class: { hover: _vm.hovering, dragging: _vm.dragging },
	      style: _vm.wrapperStyle,
	      attrs: { tabindex: "0" },
	      on: {
	        mouseenter: _vm.handleMouseEnter,
	        mouseleave: _vm.handleMouseLeave,
	        mousedown: _vm.onButtonDown,
	        touchstart: _vm.onButtonDown,
	        focus: _vm.handleMouseEnter,
	        blur: _vm.handleMouseLeave,
	        keydown: [
	          function($event) {
	            if (
	              !("button" in $event) &&
	              _vm._k($event.keyCode, "left", 37, $event.key, [
	                "Left",
	                "ArrowLeft"
	              ])
	            ) {
	              return null
	            }
	            if ("button" in $event && $event.button !== 0) {
	              return null
	            }
	            return _vm.onLeftKeyDown($event)
	          },
	          function($event) {
	            if (
	              !("button" in $event) &&
	              _vm._k($event.keyCode, "right", 39, $event.key, [
	                "Right",
	                "ArrowRight"
	              ])
	            ) {
	              return null
	            }
	            if ("button" in $event && $event.button !== 2) {
	              return null
	            }
	            return _vm.onRightKeyDown($event)
	          },
	          function($event) {
	            if (
	              !("button" in $event) &&
	              _vm._k($event.keyCode, "down", 40, $event.key, [
	                "Down",
	                "ArrowDown"
	              ])
	            ) {
	              return null
	            }
	            $event.preventDefault()
	            return _vm.onLeftKeyDown($event)
	          },
	          function($event) {
	            if (
	              !("button" in $event) &&
	              _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])
	            ) {
	              return null
	            }
	            $event.preventDefault()
	            return _vm.onRightKeyDown($event)
	          }
	        ]
	      }
	    },
	    [
	      _c(
	        "el-tooltip",
	        {
	          ref: "tooltip",
	          attrs: {
	            placement: "top",
	            "popper-class": _vm.tooltipClass,
	            disabled: !_vm.showTooltip
	          }
	        },
	        [
	          _c("span", { attrs: { slot: "content" }, slot: "content" }, [
	            _vm._v(_vm._s(_vm.formatValue))
	          ]),
	          _c("div", {
	            staticClass: "el-slider__button",
	            class: { hover: _vm.hovering, dragging: _vm.dragging }
	          })
	        ]
	      )
	    ],
	    1
	  )
	}
	var buttonvue_type_template_id_e72d2ad2_staticRenderFns = []
	buttonvue_type_template_id_e72d2ad2_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/slider/src/button.vue?vue&type=template&id=e72d2ad2&
	
	// EXTERNAL MODULE: external "element-ui/lib/tooltip"
	var tooltip_ = __webpack_require__(29);
	var tooltip_default = /*#__PURE__*/__webpack_require__.n(tooltip_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/button.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	/* harmony default export */ var buttonvue_type_script_lang_js_ = ({
	  name: 'ElSliderButton',
	
	  components: {
	    ElTooltip: tooltip_default.a
	  },
	
	  props: {
	    value: {
	      type: Number,
	      default: 0
	    },
	    vertical: {
	      type: Boolean,
	      default: false
	    },
	    tooltipClass: String
	  },
	
	  data: function data() {
	    return {
	      hovering: false,
	      dragging: false,
	      isClick: false,
	      startX: 0,
	      currentX: 0,
	      startY: 0,
	      currentY: 0,
	      startPosition: 0,
	      newPosition: null,
	      oldValue: this.value
	    };
	  },
	
	
	  computed: {
	    disabled: function disabled() {
	      return this.$parent.sliderDisabled;
	    },
	    max: function max() {
	      return this.$parent.max;
	    },
	    min: function min() {
	      return this.$parent.min;
	    },
	    step: function step() {
	      return this.$parent.step;
	    },
	    showTooltip: function showTooltip() {
	      return this.$parent.showTooltip;
	    },
	    precision: function precision() {
	      return this.$parent.precision;
	    },
	    currentPosition: function currentPosition() {
	      return (this.value - this.min) / (this.max - this.min) * 100 + '%';
	    },
	    enableFormat: function enableFormat() {
	      return this.$parent.formatTooltip instanceof Function;
	    },
	    formatValue: function formatValue() {
	      return this.enableFormat && this.$parent.formatTooltip(this.value) || this.value;
	    },
	    wrapperStyle: function wrapperStyle() {
	      return this.vertical ? { bottom: this.currentPosition } : { left: this.currentPosition };
	    }
	  },
	
	  watch: {
	    dragging: function dragging(val) {
	      this.$parent.dragging = val;
	    }
	  },
	
	  methods: {
	    displayTooltip: function displayTooltip() {
	      this.$refs.tooltip && (this.$refs.tooltip.showPopper = true);
	    },
	    hideTooltip: function hideTooltip() {
	      this.$refs.tooltip && (this.$refs.tooltip.showPopper = false);
	    },
	    handleMouseEnter: function handleMouseEnter() {
	      this.hovering = true;
	      this.displayTooltip();
	    },
	    handleMouseLeave: function handleMouseLeave() {
	      this.hovering = false;
	      this.hideTooltip();
	    },
	    onButtonDown: function onButtonDown(event) {
	      if (this.disabled) return;
	      event.preventDefault();
	      this.onDragStart(event);
	      window.addEventListener('mousemove', this.onDragging);
	      window.addEventListener('touchmove', this.onDragging);
	      window.addEventListener('mouseup', this.onDragEnd);
	      window.addEventListener('touchend', this.onDragEnd);
	      window.addEventListener('contextmenu', this.onDragEnd);
	    },
	    onLeftKeyDown: function onLeftKeyDown() {
	      if (this.disabled) return;
	      this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100;
	      this.setPosition(this.newPosition);
	      this.$parent.emitChange();
	    },
	    onRightKeyDown: function onRightKeyDown() {
	      if (this.disabled) return;
	      this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100;
	      this.setPosition(this.newPosition);
	      this.$parent.emitChange();
	    },
	    onDragStart: function onDragStart(event) {
	      this.dragging = true;
	      this.isClick = true;
	      if (event.type === 'touchstart') {
	        event.clientY = event.touches[0].clientY;
	        event.clientX = event.touches[0].clientX;
	      }
	      if (this.vertical) {
	        this.startY = event.clientY;
	      } else {
	        this.startX = event.clientX;
	      }
	      this.startPosition = parseFloat(this.currentPosition);
	      this.newPosition = this.startPosition;
	    },
	    onDragging: function onDragging(event) {
	      if (this.dragging) {
	        this.isClick = false;
	        this.displayTooltip();
	        this.$parent.resetSize();
	        var diff = 0;
	        if (event.type === 'touchmove') {
	          event.clientY = event.touches[0].clientY;
	          event.clientX = event.touches[0].clientX;
	        }
	        if (this.vertical) {
	          this.currentY = event.clientY;
	          diff = (this.startY - this.currentY) / this.$parent.sliderSize * 100;
	        } else {
	          this.currentX = event.clientX;
	          diff = (this.currentX - this.startX) / this.$parent.sliderSize * 100;
	        }
	        this.newPosition = this.startPosition + diff;
	        this.setPosition(this.newPosition);
	      }
	    },
	    onDragEnd: function onDragEnd() {
	      var _this = this;
	
	      if (this.dragging) {
	        /*
	         * 防止在 mouseup 后立即触发 click，导致滑块有几率产生一小段位移
	         * 不使用 preventDefault 是因为 mouseup 和 click 没有注册在同一个 DOM 上
	         */
	        setTimeout(function () {
	          _this.dragging = false;
	          _this.hideTooltip();
	          if (!_this.isClick) {
	            _this.setPosition(_this.newPosition);
	            _this.$parent.emitChange();
	          }
	        }, 0);
	        window.removeEventListener('mousemove', this.onDragging);
	        window.removeEventListener('touchmove', this.onDragging);
	        window.removeEventListener('mouseup', this.onDragEnd);
	        window.removeEventListener('touchend', this.onDragEnd);
	        window.removeEventListener('contextmenu', this.onDragEnd);
	      }
	    },
	    setPosition: function setPosition(newPosition) {
	      var _this2 = this;
	
	      if (newPosition === null || isNaN(newPosition)) return;
	      if (newPosition < 0) {
	        newPosition = 0;
	      } else if (newPosition > 100) {
	        newPosition = 100;
	      }
	      var lengthPerStep = 100 / ((this.max - this.min) / this.step);
	      var steps = Math.round(newPosition / lengthPerStep);
	      var value = steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min;
	      value = parseFloat(value.toFixed(this.precision));
	      this.$emit('input', value);
	      this.$nextTick(function () {
	        _this2.displayTooltip();
	        _this2.$refs.tooltip && _this2.$refs.tooltip.updatePopper();
	      });
	      if (!this.dragging && this.value !== this.oldValue) {
	        this.oldValue = this.value;
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/slider/src/button.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_buttonvue_type_script_lang_js_ = (buttonvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/slider/src/button.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_buttonvue_type_script_lang_js_,
	  buttonvue_type_template_id_e72d2ad2_render,
	  buttonvue_type_template_id_e72d2ad2_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/slider/src/button.vue"
	/* harmony default export */ var src_button = (component.exports);
	// CONCATENATED MODULE: ./packages/slider/src/marker.js
	/* harmony default export */ var marker = ({
	  name: 'ElMarker',
	
	  props: {
	    mark: {
	      type: [String, Object]
	    }
	  },
	  render: function render() {
	    var h = arguments[0];
	
	    var label = typeof this.mark === 'string' ? this.mark : this.mark.label;
	
	    return h(
	      'div',
	      { 'class': 'el-slider__marks-text', style: this.mark.style || {} },
	      [label]
	    );
	  }
	});
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/slider/src/main.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	/* harmony default export */ var mainvue_type_script_lang_js_ = ({
	  name: 'ElSlider',
	
	  mixins: [emitter_default.a],
	
	  inject: {
	    elForm: {
	      default: ''
	    }
	  },
	
	  props: {
	    min: {
	      type: Number,
	      default: 0
	    },
	    max: {
	      type: Number,
	      default: 100
	    },
	    step: {
	      type: Number,
	      default: 1
	    },
	    value: {
	      type: [Number, Array],
	      default: 0
	    },
	    showInput: {
	      type: Boolean,
	      default: false
	    },
	    showInputControls: {
	      type: Boolean,
	      default: true
	    },
	    inputSize: {
	      type: String,
	      default: 'small'
	    },
	    showStops: {
	      type: Boolean,
	      default: false
	    },
	    showTooltip: {
	      type: Boolean,
	      default: true
	    },
	    formatTooltip: Function,
	    disabled: {
	      type: Boolean,
	      default: false
	    },
	    range: {
	      type: Boolean,
	      default: false
	    },
	    vertical: {
	      type: Boolean,
	      default: false
	    },
	    height: {
	      type: String
	    },
	    debounce: {
	      type: Number,
	      default: 300
	    },
	    label: {
	      type: String
	    },
	    tooltipClass: String,
	    marks: Object
	  },
	
	  components: {
	    ElInputNumber: input_number_default.a,
	    SliderButton: src_button,
	    SliderMarker: marker
	  },
	
	  data: function data() {
	    return {
	      firstValue: null,
	      secondValue: null,
	      oldValue: null,
	      dragging: false,
	      sliderSize: 1
	    };
	  },
	
	
	  watch: {
	    value: function value(val, oldVal) {
	      if (this.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every(function (item, index) {
	        return item === oldVal[index];
	      })) {
	        return;
	      }
	      this.setValues();
	    },
	    dragging: function dragging(val) {
	      if (!val) {
	        this.setValues();
	      }
	    },
	    firstValue: function firstValue(val) {
	      if (this.range) {
	        this.$emit('input', [this.minValue, this.maxValue]);
	      } else {
	        this.$emit('input', val);
	      }
	    },
	    secondValue: function secondValue() {
	      if (this.range) {
	        this.$emit('input', [this.minValue, this.maxValue]);
	      }
	    },
	    min: function min() {
	      this.setValues();
	    },
	    max: function max() {
	      this.setValues();
	    }
	  },
	
	  methods: {
	    valueChanged: function valueChanged() {
	      var _this = this;
	
	      if (this.range) {
	        return ![this.minValue, this.maxValue].every(function (item, index) {
	          return item === _this.oldValue[index];
	        });
	      } else {
	        return this.value !== this.oldValue;
	      }
	    },
	    setValues: function setValues() {
	      if (this.min > this.max) {
	        console.error('[Element Error][Slider]min should not be greater than max.');
	        return;
	      }
	      var val = this.value;
	      if (this.range && Array.isArray(val)) {
	        if (val[1] < this.min) {
	          this.$emit('input', [this.min, this.min]);
	        } else if (val[0] > this.max) {
	          this.$emit('input', [this.max, this.max]);
	        } else if (val[0] < this.min) {
	          this.$emit('input', [this.min, val[1]]);
	        } else if (val[1] > this.max) {
	          this.$emit('input', [val[0], this.max]);
	        } else {
	          this.firstValue = val[0];
	          this.secondValue = val[1];
	          if (this.valueChanged()) {
	            this.dispatch('ElFormItem', 'el.form.change', [this.minValue, this.maxValue]);
	            this.oldValue = val.slice();
	          }
	        }
	      } else if (!this.range && typeof val === 'number' && !isNaN(val)) {
	        if (val < this.min) {
	          this.$emit('input', this.min);
	        } else if (val > this.max) {
	          this.$emit('input', this.max);
	        } else {
	          this.firstValue = val;
	          if (this.valueChanged()) {
	            this.dispatch('ElFormItem', 'el.form.change', val);
	            this.oldValue = val;
	          }
	        }
	      }
	    },
	    setPosition: function setPosition(percent) {
	      var targetValue = this.min + percent * (this.max - this.min) / 100;
	      if (!this.range) {
	        this.$refs.button1.setPosition(percent);
	        return;
	      }
	      var button = void 0;
	      if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {
	        button = this.firstValue < this.secondValue ? 'button1' : 'button2';
	      } else {
	        button = this.firstValue > this.secondValue ? 'button1' : 'button2';
	      }
	      this.$refs[button].setPosition(percent);
	    },
	    onSliderClick: function onSliderClick(event) {
	      if (this.sliderDisabled || this.dragging) return;
	      this.resetSize();
	      if (this.vertical) {
	        var sliderOffsetBottom = this.$refs.slider.getBoundingClientRect().bottom;
	        this.setPosition((sliderOffsetBottom - event.clientY) / this.sliderSize * 100);
	      } else {
	        var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;
	        this.setPosition((event.clientX - sliderOffsetLeft) / this.sliderSize * 100);
	      }
	      this.emitChange();
	    },
	    resetSize: function resetSize() {
	      if (this.$refs.slider) {
	        this.sliderSize = this.$refs.slider['client' + (this.vertical ? 'Height' : 'Width')];
	      }
	    },
	    emitChange: function emitChange() {
	      var _this2 = this;
	
	      this.$nextTick(function () {
	        _this2.$emit('change', _this2.range ? [_this2.minValue, _this2.maxValue] : _this2.value);
	      });
	    },
	    getStopStyle: function getStopStyle(position) {
	      return this.vertical ? { 'bottom': position + '%' } : { 'left': position + '%' };
	    }
	  },
	
	  computed: {
	    stops: function stops() {
	      var _this3 = this;
	
	      if (!this.showStops || this.min > this.max) return [];
	      if (this.step === 0) {
	         false && false;
	        return [];
	      }
	      var stopCount = (this.max - this.min) / this.step;
	      var stepWidth = 100 * this.step / (this.max - this.min);
	      var result = [];
	      for (var i = 1; i < stopCount; i++) {
	        result.push(i * stepWidth);
	      }
	      if (this.range) {
	        return result.filter(function (step) {
	          return step < 100 * (_this3.minValue - _this3.min) / (_this3.max - _this3.min) || step > 100 * (_this3.maxValue - _this3.min) / (_this3.max - _this3.min);
	        });
	      } else {
	        return result.filter(function (step) {
	          return step > 100 * (_this3.firstValue - _this3.min) / (_this3.max - _this3.min);
	        });
	      }
	    },
	    markList: function markList() {
	      var _this4 = this;
	
	      if (!this.marks) {
	        return [];
	      }
	
	      var marksKeys = Object.keys(this.marks);
	      return marksKeys.map(parseFloat).sort(function (a, b) {
	        return a - b;
	      }).filter(function (point) {
	        return point <= _this4.max && point >= _this4.min;
	      }).map(function (point) {
	        return {
	          point: point,
	          position: (point - _this4.min) * 100 / (_this4.max - _this4.min),
	          mark: _this4.marks[point]
	        };
	      });
	    },
	    minValue: function minValue() {
	      return Math.min(this.firstValue, this.secondValue);
	    },
	    maxValue: function maxValue() {
	      return Math.max(this.firstValue, this.secondValue);
	    },
	    barSize: function barSize() {
	      return this.range ? 100 * (this.maxValue - this.minValue) / (this.max - this.min) + '%' : 100 * (this.firstValue - this.min) / (this.max - this.min) + '%';
	    },
	    barStart: function barStart() {
	      return this.range ? 100 * (this.minValue - this.min) / (this.max - this.min) + '%' : '0%';
	    },
	    precision: function precision() {
	      var precisions = [this.min, this.max, this.step].map(function (item) {
	        var decimal = ('' + item).split('.')[1];
	        return decimal ? decimal.length : 0;
	      });
	      return Math.max.apply(null, precisions);
	    },
	    runwayStyle: function runwayStyle() {
	      return this.vertical ? { height: this.height } : {};
	    },
	    barStyle: function barStyle() {
	      return this.vertical ? {
	        height: this.barSize,
	        bottom: this.barStart
	      } : {
	        width: this.barSize,
	        left: this.barStart
	      };
	    },
	    sliderDisabled: function sliderDisabled() {
	      return this.disabled || (this.elForm || {}).disabled;
	    }
	  },
	
	  mounted: function mounted() {
	    var valuetext = void 0;
	    if (this.range) {
	      if (Array.isArray(this.value)) {
	        this.firstValue = Math.max(this.min, this.value[0]);
	        this.secondValue = Math.min(this.max, this.value[1]);
	      } else {
	        this.firstValue = this.min;
	        this.secondValue = this.max;
	      }
	      this.oldValue = [this.firstValue, this.secondValue];
	      valuetext = this.firstValue + '-' + this.secondValue;
	    } else {
	      if (typeof this.value !== 'number' || isNaN(this.value)) {
	        this.firstValue = this.min;
	      } else {
	        this.firstValue = Math.min(this.max, Math.max(this.min, this.value));
	      }
	      this.oldValue = this.firstValue;
	      valuetext = this.firstValue;
	    }
	    this.$el.setAttribute('aria-valuetext', valuetext);
	
	    // label screen reader
	    this.$el.setAttribute('aria-label', this.label ? this.label : 'slider between ' + this.min + ' and ' + this.max);
	
	    this.resetSize();
	    window.addEventListener('resize', this.resetSize);
	  },
	  beforeDestroy: function beforeDestroy() {
	    window.removeEventListener('resize', this.resetSize);
	  }
	});
	// CONCATENATED MODULE: ./packages/slider/src/main.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/slider/src/main.vue
	
	
	
	
	
	/* normalize component */
	
	var main_component = Object(componentNormalizer["a" /* default */])(
	  src_mainvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var main_api; }
	main_component.options.__file = "packages/slider/src/main.vue"
	/* harmony default export */ var main = (main_component.exports);
	// CONCATENATED MODULE: ./packages/slider/index.js
	
	
	/* istanbul ignore next */
	main.install = function (Vue) {
	  Vue.component(main.name, main);
	};
	
	/* harmony default export */ var slider = __webpack_exports__["default"] = (main);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 179 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.isDef = isDef;
	exports.isKorean = isKorean;
	function isDef(val) {
	  return val !== undefined && val !== null;
	}
	function isKorean(text) {
	  var reg = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
	  return reg.test(text);
	}

/***/ }),
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }),
/* 184 */,
/* 185 */
/***/ (function(module, exports) {

	/* eslint-disable no-undefined,no-param-reassign,no-shadow */
	
	/**
	 * Throttle execution of a function. Especially useful for rate limiting
	 * execution of handlers on events like resize and scroll.
	 *
	 * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
	 * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
	 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
	 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
	 *                                    the internal counter is reset)
	 * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
	 *                                    to `callback` when the throttled-function is executed.
	 * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
	 *                                    schedule `callback` to execute after `delay` ms.
	 *
	 * @return {Function}  A new, throttled, function.
	 */
	module.exports = function ( delay, noTrailing, callback, debounceMode ) {
	
		// After wrapper has stopped being called, this timeout ensures that
		// `callback` is executed at the proper times in `throttle` and `end`
		// debounce modes.
		var timeoutID;
	
		// Keep track of the last time `callback` was executed.
		var lastExec = 0;
	
		// `noTrailing` defaults to falsy.
		if ( typeof noTrailing !== 'boolean' ) {
			debounceMode = callback;
			callback = noTrailing;
			noTrailing = undefined;
		}
	
		// The `wrapper` function encapsulates all of the throttling / debouncing
		// functionality and when executed will limit the rate at which `callback`
		// is executed.
		function wrapper () {
	
			var self = this;
			var elapsed = Number(new Date()) - lastExec;
			var args = arguments;
	
			// Execute `callback` and update the `lastExec` timestamp.
			function exec () {
				lastExec = Number(new Date());
				callback.apply(self, args);
			}
	
			// If `debounceMode` is true (at begin) this is used to clear the flag
			// to allow future `callback` executions.
			function clear () {
				timeoutID = undefined;
			}
	
			if ( debounceMode && !timeoutID ) {
				// Since `wrapper` is being called for the first time and
				// `debounceMode` is true (at begin), execute `callback`.
				exec();
			}
	
			// Clear any existing timeout.
			if ( timeoutID ) {
				clearTimeout(timeoutID);
			}
	
			if ( debounceMode === undefined && elapsed > delay ) {
				// In throttle mode, if `delay` time has been exceeded, execute
				// `callback`.
				exec();
	
			} else if ( noTrailing !== true ) {
				// In trailing throttle mode, since `delay` time has not been
				// exceeded, schedule `callback` to execute `delay` ms after most
				// recent execution.
				//
				// If `debounceMode` is true (at begin), schedule `clear` to execute
				// after `delay` ms.
				//
				// If `debounceMode` is false (at end), schedule `callback` to
				// execute after `delay` ms.
				timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
			}
	
		}
	
		// Return the wrapper function.
		return wrapper;
	
	};


/***/ }),
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(161);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _typeof2 = __webpack_require__(69);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _util = __webpack_require__(18);
	
	var _validator = __webpack_require__(202);
	
	var _validator2 = _interopRequireDefault(_validator);
	
	var _messages2 = __webpack_require__(191);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Encapsulates a validation schema.
	 *
	 *  @param descriptor An object declaring validation rules
	 *  for this schema.
	 */
	function Schema(descriptor) {
	  this.rules = null;
	  this._messages = _messages2.messages;
	  this.define(descriptor);
	}
	
	Schema.prototype = {
	  messages: function messages(_messages) {
	    if (_messages) {
	      this._messages = (0, _util.deepMerge)((0, _messages2.newMessages)(), _messages);
	    }
	    return this._messages;
	  },
	  define: function define(rules) {
	    if (!rules) {
	      throw new Error('Cannot configure a schema with no rules');
	    }
	    if ((typeof rules === 'undefined' ? 'undefined' : (0, _typeof3['default'])(rules)) !== 'object' || Array.isArray(rules)) {
	      throw new Error('Rules must be an object');
	    }
	    this.rules = {};
	    var z = void 0;
	    var item = void 0;
	    for (z in rules) {
	      if (rules.hasOwnProperty(z)) {
	        item = rules[z];
	        this.rules[z] = Array.isArray(item) ? item : [item];
	      }
	    }
	  },
	  validate: function validate(source_) {
	    var _this = this;
	
	    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var oc = arguments[2];
	
	    var source = source_;
	    var options = o;
	    var callback = oc;
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }
	    if (!this.rules || Object.keys(this.rules).length === 0) {
	      if (callback) {
	        callback();
	      }
	      return;
	    }
	    function complete(results) {
	      var i = void 0;
	      var field = void 0;
	      var errors = [];
	      var fields = {};
	
	      function add(e) {
	        if (Array.isArray(e)) {
	          errors = errors.concat.apply(errors, e);
	        } else {
	          errors.push(e);
	        }
	      }
	
	      for (i = 0; i < results.length; i++) {
	        add(results[i]);
	      }
	      if (!errors.length) {
	        errors = null;
	        fields = null;
	      } else {
	        for (i = 0; i < errors.length; i++) {
	          field = errors[i].field;
	          fields[field] = fields[field] || [];
	          fields[field].push(errors[i]);
	        }
	      }
	      callback(errors, fields);
	    }
	
	    if (options.messages) {
	      var messages = this.messages();
	      if (messages === _messages2.messages) {
	        messages = (0, _messages2.newMessages)();
	      }
	      (0, _util.deepMerge)(messages, options.messages);
	      options.messages = messages;
	    } else {
	      options.messages = this.messages();
	    }
	    var arr = void 0;
	    var value = void 0;
	    var series = {};
	    var keys = options.keys || Object.keys(this.rules);
	    keys.forEach(function (z) {
	      arr = _this.rules[z];
	      value = source[z];
	      arr.forEach(function (r) {
	        var rule = r;
	        if (typeof rule.transform === 'function') {
	          if (source === source_) {
	            source = (0, _extends3['default'])({}, source);
	          }
	          value = source[z] = rule.transform(value);
	        }
	        if (typeof rule === 'function') {
	          rule = {
	            validator: rule
	          };
	        } else {
	          rule = (0, _extends3['default'])({}, rule);
	        }
	        rule.validator = _this.getValidationMethod(rule);
	        rule.field = z;
	        rule.fullField = rule.fullField || z;
	        rule.type = _this.getType(rule);
	        if (!rule.validator) {
	          return;
	        }
	        series[z] = series[z] || [];
	        series[z].push({
	          rule: rule,
	          value: value,
	          source: source,
	          field: z
	        });
	      });
	    });
	    var errorFields = {};
	    (0, _util.asyncMap)(series, options, function (data, doIt) {
	      var rule = data.rule;
	      var deep = (rule.type === 'object' || rule.type === 'array') && ((0, _typeof3['default'])(rule.fields) === 'object' || (0, _typeof3['default'])(rule.defaultField) === 'object');
	      deep = deep && (rule.required || !rule.required && data.value);
	      rule.field = data.field;
	      function addFullfield(key, schema) {
	        return (0, _extends3['default'])({}, schema, {
	          fullField: rule.fullField + '.' + key
	        });
	      }
	
	      function cb() {
	        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	        var errors = e;
	        if (!Array.isArray(errors)) {
	          errors = [errors];
	        }
	        if (errors.length) {
	          (0, _util.warning)('async-validator:', errors);
	        }
	        if (errors.length && rule.message) {
	          errors = [].concat(rule.message);
	        }
	
	        errors = errors.map((0, _util.complementError)(rule));
	
	        if (options.first && errors.length) {
	          errorFields[rule.field] = 1;
	          return doIt(errors);
	        }
	        if (!deep) {
	          doIt(errors);
	        } else {
	          // if rule is required but the target object
	          // does not exist fail at the rule level and don't
	          // go deeper
	          if (rule.required && !data.value) {
	            if (rule.message) {
	              errors = [].concat(rule.message).map((0, _util.complementError)(rule));
	            } else if (options.error) {
	              errors = [options.error(rule, (0, _util.format)(options.messages.required, rule.field))];
	            } else {
	              errors = [];
	            }
	            return doIt(errors);
	          }
	
	          var fieldsSchema = {};
	          if (rule.defaultField) {
	            for (var k in data.value) {
	              if (data.value.hasOwnProperty(k)) {
	                fieldsSchema[k] = rule.defaultField;
	              }
	            }
	          }
	          fieldsSchema = (0, _extends3['default'])({}, fieldsSchema, data.rule.fields);
	          for (var f in fieldsSchema) {
	            if (fieldsSchema.hasOwnProperty(f)) {
	              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
	              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
	            }
	          }
	          var schema = new Schema(fieldsSchema);
	          schema.messages(options.messages);
	          if (data.rule.options) {
	            data.rule.options.messages = options.messages;
	            data.rule.options.error = options.error;
	          }
	          schema.validate(data.value, data.rule.options || options, function (errs) {
	            doIt(errs && errs.length ? errors.concat(errs) : errs);
	          });
	        }
	      }
	
	      var res = rule.validator(rule, data.value, cb, data.source, options);
	      if (res && res.then) {
	        res.then(function () {
	          return cb();
	        }, function (e) {
	          return cb(e);
	        });
	      }
	    }, function (results) {
	      complete(results);
	    });
	  },
	  getType: function getType(rule) {
	    if (rule.type === undefined && rule.pattern instanceof RegExp) {
	      rule.type = 'pattern';
	    }
	    if (typeof rule.validator !== 'function' && rule.type && !_validator2['default'].hasOwnProperty(rule.type)) {
	      throw new Error((0, _util.format)('Unknown rule type %s', rule.type));
	    }
	    return rule.type || 'string';
	  },
	  getValidationMethod: function getValidationMethod(rule) {
	    if (typeof rule.validator === 'function') {
	      return rule.validator;
	    }
	    var keys = Object.keys(rule);
	    var messageIndex = keys.indexOf('message');
	    if (messageIndex !== -1) {
	      keys.splice(messageIndex, 1);
	    }
	    if (keys.length === 1 && keys[0] === 'required') {
	      return _validator2['default'].required;
	    }
	    return _validator2['default'][this.getType(rule)] || false;
	  }
	};
	
	Schema.register = function register(type, validator) {
	  if (typeof validator !== 'function') {
	    throw new Error('Cannot register a validator by type, validator is not a function');
	  }
	  _validator2['default'][type] = validator;
	};
	
	Schema.messages = _messages2.messages;
	
	exports['default'] = Schema;
	module.exports = exports['default'];

/***/ }),
/* 191 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newMessages = newMessages;
	function newMessages() {
	  return {
	    'default': 'Validation error on field %s',
	    required: '%s is required',
	    'enum': '%s must be one of %s',
	    whitespace: '%s cannot be empty',
	    date: {
	      format: '%s date %s is invalid for format %s',
	      parse: '%s date could not be parsed, %s is invalid ',
	      invalid: '%s date %s is invalid'
	    },
	    types: {
	      string: '%s is not a %s',
	      method: '%s is not a %s (function)',
	      array: '%s is not an %s',
	      object: '%s is not an %s',
	      number: '%s is not a %s',
	      date: '%s is not a %s',
	      boolean: '%s is not a %s',
	      integer: '%s is not an %s',
	      float: '%s is not a %s',
	      regexp: '%s is not a valid %s',
	      email: '%s is not a valid %s',
	      url: '%s is not a valid %s',
	      hex: '%s is not a valid %s'
	    },
	    string: {
	      len: '%s must be exactly %s characters',
	      min: '%s must be at least %s characters',
	      max: '%s cannot be longer than %s characters',
	      range: '%s must be between %s and %s characters'
	    },
	    number: {
	      len: '%s must equal %s',
	      min: '%s cannot be less than %s',
	      max: '%s cannot be greater than %s',
	      range: '%s must be between %s and %s'
	    },
	    array: {
	      len: '%s must be exactly %s in length',
	      min: '%s cannot be less than %s in length',
	      max: '%s cannot be greater than %s in length',
	      range: '%s must be between %s and %s in length'
	    },
	    pattern: {
	      mismatch: '%s value %s does not match pattern %s'
	    },
	    clone: function clone() {
	      var cloned = JSON.parse(JSON.stringify(this));
	      cloned.clone = this.clone;
	      return cloned;
	    }
	  };
	}
	
	var messages = exports.messages = newMessages();

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _util = __webpack_require__(18);
	
	var util = _interopRequireWildcard(_util);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	var ENUM = 'enum';
	
	/**
	 *  Rule for validating a value exists in an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function enumerable(rule, value, source, errors, options) {
	  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
	  if (rule[ENUM].indexOf(value) === -1) {
	    errors.push(util.format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
	  }
	}
	
	exports['default'] = enumerable;
	module.exports = exports['default'];

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _util = __webpack_require__(18);
	
	var util = _interopRequireWildcard(_util);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	/**
	 *  Rule for validating a regular expression pattern.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function pattern(rule, value, source, errors, options) {
	  if (rule.pattern) {
	    if (rule.pattern instanceof RegExp) {
	      // if a RegExp instance is passed, reset `lastIndex` in case its `global`
	      // flag is accidentally set to `true`, which in a validation scenario
	      // is not necessary and the result might be misleading
	      rule.pattern.lastIndex = 0;
	      if (!rule.pattern.test(value)) {
	        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    } else if (typeof rule.pattern === 'string') {
	      var _pattern = new RegExp(rule.pattern);
	      if (!_pattern.test(value)) {
	        errors.push(util.format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    }
	  }
	}
	
	exports['default'] = pattern;
	module.exports = exports['default'];

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _util = __webpack_require__(18);
	
	var util = _interopRequireWildcard(_util);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	/**
	 *  Rule for validating minimum and maximum allowed values.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function range(rule, value, source, errors, options) {
	  var len = typeof rule.len === 'number';
	  var min = typeof rule.min === 'number';
	  var max = typeof rule.max === 'number';
	  // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）
	  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	  var val = value;
	  var key = null;
	  var num = typeof value === 'number';
	  var str = typeof value === 'string';
	  var arr = Array.isArray(value);
	  if (num) {
	    key = 'number';
	  } else if (str) {
	    key = 'string';
	  } else if (arr) {
	    key = 'array';
	  }
	  // if the value is not of a supported type for range validation
	  // the validation rule rule should use the
	  // type property to also test for a particular type
	  if (!key) {
	    return false;
	  }
	  if (arr) {
	    val = value.length;
	  }
	  if (str) {
	    // 处理码点大于U+010000的文字length属性不准确的bug，如"𠮷𠮷𠮷".lenght !== 3
	    val = value.replace(spRegexp, '_').length;
	  }
	  if (len) {
	    if (val !== rule.len) {
	      errors.push(util.format(options.messages[key].len, rule.fullField, rule.len));
	    }
	  } else if (min && !max && val < rule.min) {
	    errors.push(util.format(options.messages[key].min, rule.fullField, rule.min));
	  } else if (max && !min && val > rule.max) {
	    errors.push(util.format(options.messages[key].max, rule.fullField, rule.max));
	  } else if (min && max && (val < rule.min || val > rule.max)) {
	    errors.push(util.format(options.messages[key].range, rule.fullField, rule.min, rule.max));
	  }
	}
	
	exports['default'] = range;
	module.exports = exports['default'];

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof2 = __webpack_require__(69);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _util = __webpack_require__(18);
	
	var util = _interopRequireWildcard(_util);
	
	var _required = __webpack_require__(139);
	
	var _required2 = _interopRequireDefault(_required);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/* eslint max-len:0 */
	
	var pattern = {
	  // http://emailregex.com/
	  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
	  url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$', 'i'),
	  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
	};
	
	var types = {
	  integer: function integer(value) {
	    return types.number(value) && parseInt(value, 10) === value;
	  },
	  float: function float(value) {
	    return types.number(value) && !types.integer(value);
	  },
	  array: function array(value) {
	    return Array.isArray(value);
	  },
	  regexp: function regexp(value) {
	    if (value instanceof RegExp) {
	      return true;
	    }
	    try {
	      return !!new RegExp(value);
	    } catch (e) {
	      return false;
	    }
	  },
	  date: function date(value) {
	    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function';
	  },
	  number: function number(value) {
	    if (isNaN(value)) {
	      return false;
	    }
	    return typeof value === 'number';
	  },
	  object: function object(value) {
	    return (typeof value === 'undefined' ? 'undefined' : (0, _typeof3['default'])(value)) === 'object' && !types.array(value);
	  },
	  method: function method(value) {
	    return typeof value === 'function';
	  },
	  email: function email(value) {
	    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
	  },
	  url: function url(value) {
	    return typeof value === 'string' && !!value.match(pattern.url);
	  },
	  hex: function hex(value) {
	    return typeof value === 'string' && !!value.match(pattern.hex);
	  }
	};
	
	/**
	 *  Rule for validating the type of a value.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function type(rule, value, source, errors, options) {
	  if (rule.required && value === undefined) {
	    (0, _required2['default'])(rule, value, source, errors, options);
	    return;
	  }
	  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];
	  var ruleType = rule.type;
	  if (custom.indexOf(ruleType) > -1) {
	    if (!types[ruleType](value)) {
	      errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));
	    }
	    // straight typeof check
	  } else if (ruleType && (typeof value === 'undefined' ? 'undefined' : (0, _typeof3['default'])(value)) !== rule.type) {
	    errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));
	  }
	}
	
	exports['default'] = type;
	module.exports = exports['default'];

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _util = __webpack_require__(18);
	
	var util = _interopRequireWildcard(_util);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	/**
	 *  Rule for validating whitespace.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function whitespace(rule, value, source, errors, options) {
	  if (/^\s+$/.test(value) || value === '') {
	    errors.push(util.format(options.messages.whitespace, rule.fullField));
	  }
	}
	
	exports['default'] = whitespace;
	module.exports = exports['default'];

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates an array.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function array(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value, 'array') && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options, 'array');
	    if (!(0, _util.isEmptyValue)(value, 'array')) {
	      _rule2['default'].type(rule, value, source, errors, options);
	      _rule2['default'].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = array;
	module.exports = exports['default'];

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _util = __webpack_require__(18);
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates a boolean.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function boolean(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      _rule2['default'].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = boolean;
	module.exports = exports['default'];

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function date(rule, value, callback, source, options) {
	  // console.log('integer rule called %j', rule);
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  // console.log('validate on %s value', value);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (!(0, _util.isEmptyValue)(value)) {
	      var dateObject = void 0;
	
	      if (typeof value === 'number') {
	        dateObject = new Date(value);
	      } else {
	        dateObject = value;
	      }
	
	      _rule2['default'].type(rule, dateObject, source, errors, options);
	      if (dateObject) {
	        _rule2['default'].range(rule, dateObject.getTime(), source, errors, options);
	      }
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = date;
	module.exports = exports['default'];

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var ENUM = 'enum';
	
	/**
	 *  Validates an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function enumerable(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (value) {
	      _rule2['default'][ENUM](rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = enumerable;
	module.exports = exports['default'];

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates a number is a floating point number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function floatFn(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      _rule2['default'].type(rule, value, source, errors, options);
	      _rule2['default'].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = floatFn;
	module.exports = exports['default'];

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _string = __webpack_require__(210);
	
	var _string2 = _interopRequireDefault(_string);
	
	var _method = __webpack_require__(204);
	
	var _method2 = _interopRequireDefault(_method);
	
	var _number = __webpack_require__(205);
	
	var _number2 = _interopRequireDefault(_number);
	
	var _boolean = __webpack_require__(198);
	
	var _boolean2 = _interopRequireDefault(_boolean);
	
	var _regexp = __webpack_require__(208);
	
	var _regexp2 = _interopRequireDefault(_regexp);
	
	var _integer = __webpack_require__(203);
	
	var _integer2 = _interopRequireDefault(_integer);
	
	var _float = __webpack_require__(201);
	
	var _float2 = _interopRequireDefault(_float);
	
	var _array = __webpack_require__(197);
	
	var _array2 = _interopRequireDefault(_array);
	
	var _object = __webpack_require__(206);
	
	var _object2 = _interopRequireDefault(_object);
	
	var _enum = __webpack_require__(200);
	
	var _enum2 = _interopRequireDefault(_enum);
	
	var _pattern = __webpack_require__(207);
	
	var _pattern2 = _interopRequireDefault(_pattern);
	
	var _date = __webpack_require__(199);
	
	var _date2 = _interopRequireDefault(_date);
	
	var _required = __webpack_require__(209);
	
	var _required2 = _interopRequireDefault(_required);
	
	var _type = __webpack_require__(211);
	
	var _type2 = _interopRequireDefault(_type);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = {
	  string: _string2['default'],
	  method: _method2['default'],
	  number: _number2['default'],
	  boolean: _boolean2['default'],
	  regexp: _regexp2['default'],
	  integer: _integer2['default'],
	  float: _float2['default'],
	  array: _array2['default'],
	  object: _object2['default'],
	  'enum': _enum2['default'],
	  pattern: _pattern2['default'],
	  date: _date2['default'],
	  url: _type2['default'],
	  hex: _type2['default'],
	  email: _type2['default'],
	  required: _required2['default']
	};
	module.exports = exports['default'];

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates a number is an integer.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function integer(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      _rule2['default'].type(rule, value, source, errors, options);
	      _rule2['default'].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = integer;
	module.exports = exports['default'];

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates a function.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function method(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      _rule2['default'].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = method;
	module.exports = exports['default'];

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates a number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function number(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      _rule2['default'].type(rule, value, source, errors, options);
	      _rule2['default'].range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = number;
	module.exports = exports['default'];

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates an object.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function object(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      _rule2['default'].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = object;
	module.exports = exports['default'];

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates a regular expression pattern.
	 *
	 *  Performs validation when a rule only contains
	 *  a pattern property but is not declared as a string type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function pattern(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value, 'string') && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (!(0, _util.isEmptyValue)(value, 'string')) {
	      _rule2['default'].pattern(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = pattern;
	module.exports = exports['default'];

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Validates the regular expression type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function regexp(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options);
	    if (!(0, _util.isEmptyValue)(value)) {
	      _rule2['default'].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = regexp;
	module.exports = exports['default'];

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof2 = __webpack_require__(69);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function required(rule, value, callback, source, options) {
	  var errors = [];
	  var type = Array.isArray(value) ? 'array' : typeof value === 'undefined' ? 'undefined' : (0, _typeof3['default'])(value);
	  _rule2['default'].required(rule, value, source, errors, options, type);
	  callback(errors);
	}
	
	exports['default'] = required;
	module.exports = exports['default'];

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 *  Performs validation for string types.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function string(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value, 'string') && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options, 'string');
	    if (!(0, _util.isEmptyValue)(value, 'string')) {
	      _rule2['default'].type(rule, value, source, errors, options);
	      _rule2['default'].range(rule, value, source, errors, options);
	      _rule2['default'].pattern(rule, value, source, errors, options);
	      if (rule.whitespace === true) {
	        _rule2['default'].whitespace(rule, value, source, errors, options);
	      }
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = string;
	module.exports = exports['default'];

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _rule = __webpack_require__(24);
	
	var _rule2 = _interopRequireDefault(_rule);
	
	var _util = __webpack_require__(18);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function type(rule, value, callback, source, options) {
	  var ruleType = rule.type;
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if ((0, _util.isEmptyValue)(value, ruleType) && !rule.required) {
	      return callback();
	    }
	    _rule2['default'].required(rule, value, source, errors, options, ruleType);
	    if (!(0, _util.isEmptyValue)(value, ruleType)) {
	      _rule2['default'].type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}
	
	exports['default'] = type;
	module.exports = exports['default'];

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	var bind = __webpack_require__(144);
	var Axios = __webpack_require__(214);
	var defaults = __webpack_require__(97);
	
	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);
	
	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);
	
	  // Copy context to instance
	  utils.extend(instance, context);
	
	  return instance;
	}
	
	// Create the default instance to be exported
	var axios = createInstance(defaults);
	
	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;
	
	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(utils.merge(defaults, instanceConfig));
	};
	
	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(141);
	axios.CancelToken = __webpack_require__(213);
	axios.isCancel = __webpack_require__(142);
	
	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(228);
	
	module.exports = axios;
	
	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Cancel = __webpack_require__(141);
	
	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }
	
	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });
	
	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }
	
	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};
	
	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};
	
	module.exports = CancelToken;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var defaults = __webpack_require__(97);
	var utils = __webpack_require__(27);
	var InterceptorManager = __webpack_require__(215);
	var dispatchRequest = __webpack_require__(216);
	var isAbsoluteURL = __webpack_require__(224);
	var combineURLs = __webpack_require__(222);
	
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}
	
	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }
	
	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
	
	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }
	
	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);
	
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }
	
	  return promise;
	};
	
	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});
	
	module.exports = Axios;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	
	function InterceptorManager() {
	  this.handlers = [];
	}
	
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};
	
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};
	
	module.exports = InterceptorManager;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	var transformData = __webpack_require__(219);
	var isCancel = __webpack_require__(142);
	var defaults = __webpack_require__(97);
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}
	
	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);
	
	  // Ensure headers exist
	  config.headers = config.headers || {};
	
	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );
	
	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );
	
	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );
	
	  var adapter = config.adapter || defaults.adapter;
	
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);
	
	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );
	
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);
	
	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }
	
	    return Promise.reject(reason);
	  });
	};


/***/ }),
/* 217 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 @ @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	  error.response = response;
	  return error;
	};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var createError = __webpack_require__(143);
	
	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  // Note: status is not exposed by XDomainRequest
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response
	    ));
	  }
	};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	
	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });
	
	  return data;
	};


/***/ }),
/* 220 */
/***/ (function(module, exports) {

	'use strict';
	
	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js
	
	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	function E() {
	  this.message = 'String contains an invalid character';
	}
	E.prototype = new Error;
	E.prototype.code = 5;
	E.prototype.name = 'InvalidCharacterError';
	
	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new E();
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}
	
	module.exports = btoa;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	
	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}
	
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	
	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }
	
	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }
	
	      if (!utils.isArray(val)) {
	        val = [val];
	      }
	
	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	
	    serializedParams = parts.join('&');
	  }
	
	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }
	
	  return url;
	};


/***/ }),
/* 222 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));
	
	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }
	
	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }
	
	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }
	
	        if (secure === true) {
	          cookie.push('secure');
	        }
	
	        document.cookie = cookie.join('; ');
	      },
	
	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },
	
	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :
	
	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ }),
/* 224 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;
	
	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;
	
	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }
	
	      urlParsingNode.setAttribute('href', href);
	
	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }
	
	    originURL = resolveURL(window.location.href);
	
	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :
	
	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	
	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(27);
	
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;
	
	  if (!headers) { return parsed; }
	
	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));
	
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });
	
	  return parsed;
	};


/***/ }),
/* 228 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ }),
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(381), __esModule: true };

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(383), __esModule: true };

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(384), __esModule: true };

/***/ }),
/* 376 */,
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(124);
	__webpack_require__(123);
	module.exports = __webpack_require__(412);

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(414);
	module.exports = __webpack_require__(25).Object.assign;

/***/ }),
/* 379 */,
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(416);
	module.exports = __webpack_require__(25).Object.keys;

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(419);
	module.exports = __webpack_require__(25).Object.values;

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(174);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(417);
	module.exports = __webpack_require__(25).Promise;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(418);
	__webpack_require__(174);
	__webpack_require__(420);
	__webpack_require__(421);
	module.exports = __webpack_require__(25).Symbol;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(123);
	__webpack_require__(124);
	module.exports = __webpack_require__(122).f('iterator');

/***/ }),
/* 385 */
/***/ (function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ }),
/* 386 */
/***/ (function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(49)
	  , toLength  = __webpack_require__(172)
	  , toIndex   = __webpack_require__(411);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(57)
	  , gOPS    = __webpack_require__(115)
	  , pIE     = __webpack_require__(73);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(87)
	  , call        = __webpack_require__(393)
	  , isArrayIter = __webpack_require__(391)
	  , anObject    = __webpack_require__(46)
	  , toLength    = __webpack_require__(172)
	  , getIterFn   = __webpack_require__(173)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ }),
/* 390 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(72)
	  , ITERATOR   = __webpack_require__(26)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(70);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(46);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(167)
	  , descriptor     = __webpack_require__(89)
	  , setToStringTag = __webpack_require__(90)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(56)(IteratorPrototype, __webpack_require__(26)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(26)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ }),
/* 396 */
/***/ (function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(57)
	  , toIObject = __webpack_require__(49);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(91)('meta')
	  , isObject = __webpack_require__(71)
	  , has      = __webpack_require__(55)
	  , setDesc  = __webpack_require__(48).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(63)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(29)
	  , macrotask = __webpack_require__(171).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(70)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(57)
	  , gOPS     = __webpack_require__(115)
	  , pIE      = __webpack_require__(73)
	  , toObject = __webpack_require__(119)
	  , IObject  = __webpack_require__(165)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(63)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(48)
	  , anObject = __webpack_require__(46)
	  , getKeys  = __webpack_require__(57);
	
	module.exports = __webpack_require__(47) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(73)
	  , createDesc     = __webpack_require__(89)
	  , toIObject      = __webpack_require__(49)
	  , toPrimitive    = __webpack_require__(120)
	  , has            = __webpack_require__(55)
	  , IE8_DOM_DEFINE = __webpack_require__(164)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(47) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(49)
	  , gOPN      = __webpack_require__(168).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(55)
	  , toObject    = __webpack_require__(119)
	  , IE_PROTO    = __webpack_require__(116)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(54)
	  , core    = __webpack_require__(25)
	  , fails   = __webpack_require__(63);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(57)
	  , toIObject = __webpack_require__(49)
	  , isEnum    = __webpack_require__(73).f;
	module.exports = function(isEntries){
	  return function(it){
	    var O      = toIObject(it)
	      , keys   = getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = []
	      , key;
	    while(length > i)if(isEnum.call(O, key = keys[i++])){
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(56);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(29)
	  , core        = __webpack_require__(25)
	  , dP          = __webpack_require__(48)
	  , DESCRIPTORS = __webpack_require__(47)
	  , SPECIES     = __webpack_require__(26)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(46)
	  , aFunction = __webpack_require__(111)
	  , SPECIES   = __webpack_require__(26)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(118)
	  , defined   = __webpack_require__(112);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(118)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(46)
	  , get      = __webpack_require__(173);
	module.exports = __webpack_require__(25).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(385)
	  , step             = __webpack_require__(396)
	  , Iterators        = __webpack_require__(72)
	  , toIObject        = __webpack_require__(49);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(166)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(54);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(400)});

/***/ }),
/* 415 */,
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(119)
	  , $keys    = __webpack_require__(57);
	
	__webpack_require__(405)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(88)
	  , global             = __webpack_require__(29)
	  , ctx                = __webpack_require__(87)
	  , classof            = __webpack_require__(162)
	  , $export            = __webpack_require__(54)
	  , isObject           = __webpack_require__(71)
	  , aFunction          = __webpack_require__(111)
	  , anInstance         = __webpack_require__(386)
	  , forOf              = __webpack_require__(389)
	  , speciesConstructor = __webpack_require__(409)
	  , task               = __webpack_require__(171).set
	  , microtask          = __webpack_require__(399)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(26)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(407)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(90)($Promise, PROMISE);
	__webpack_require__(408)(PROMISE);
	Wrapper = __webpack_require__(25)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(395)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(29)
	  , has            = __webpack_require__(55)
	  , DESCRIPTORS    = __webpack_require__(47)
	  , $export        = __webpack_require__(54)
	  , redefine       = __webpack_require__(170)
	  , META           = __webpack_require__(398).KEY
	  , $fails         = __webpack_require__(63)
	  , shared         = __webpack_require__(117)
	  , setToStringTag = __webpack_require__(90)
	  , uid            = __webpack_require__(91)
	  , wks            = __webpack_require__(26)
	  , wksExt         = __webpack_require__(122)
	  , wksDefine      = __webpack_require__(121)
	  , keyOf          = __webpack_require__(397)
	  , enumKeys       = __webpack_require__(388)
	  , isArray        = __webpack_require__(392)
	  , anObject       = __webpack_require__(46)
	  , toIObject      = __webpack_require__(49)
	  , toPrimitive    = __webpack_require__(120)
	  , createDesc     = __webpack_require__(89)
	  , _create        = __webpack_require__(167)
	  , gOPNExt        = __webpack_require__(403)
	  , $GOPD          = __webpack_require__(402)
	  , $DP            = __webpack_require__(48)
	  , $keys          = __webpack_require__(57)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(168).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(73).f  = $propertyIsEnumerable;
	  __webpack_require__(115).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(88)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(56)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(54)
	  , $values = __webpack_require__(406)(false);
	
	$export($export.S, 'Object', {
	  values: function values(it){
	    return $values(it);
	  }
	});

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(121)('asyncIterator');

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(121)('observable');

/***/ }),
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */
/***/ (function(module, exports) {

	'use strict';
	
	var isMergeableObject = function isMergeableObject(value) {
		return isNonNullObject(value)
			&& !isSpecial(value)
	};
	
	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}
	
	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);
	
		return stringValue === '[object RegExp]'
			|| stringValue === '[object Date]'
			|| isReactElement(value)
	}
	
	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
	
	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE
	}
	
	function emptyTarget(val) {
	    return Array.isArray(val) ? [] : {}
	}
	
	function cloneIfNecessary(value, optionsArgument) {
	    var clone = optionsArgument && optionsArgument.clone === true;
	    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
	}
	
	function defaultArrayMerge(target, source, optionsArgument) {
	    var destination = target.slice();
	    source.forEach(function(e, i) {
	        if (typeof destination[i] === 'undefined') {
	            destination[i] = cloneIfNecessary(e, optionsArgument);
	        } else if (isMergeableObject(e)) {
	            destination[i] = deepmerge(target[i], e, optionsArgument);
	        } else if (target.indexOf(e) === -1) {
	            destination.push(cloneIfNecessary(e, optionsArgument));
	        }
	    });
	    return destination
	}
	
	function mergeObject(target, source, optionsArgument) {
	    var destination = {};
	    if (isMergeableObject(target)) {
	        Object.keys(target).forEach(function(key) {
	            destination[key] = cloneIfNecessary(target[key], optionsArgument);
	        });
	    }
	    Object.keys(source).forEach(function(key) {
	        if (!isMergeableObject(source[key]) || !target[key]) {
	            destination[key] = cloneIfNecessary(source[key], optionsArgument);
	        } else {
	            destination[key] = deepmerge(target[key], source[key], optionsArgument);
	        }
	    });
	    return destination
	}
	
	function deepmerge(target, source, optionsArgument) {
	    var sourceIsArray = Array.isArray(source);
	    var targetIsArray = Array.isArray(target);
	    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
	    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
	
	    if (!sourceAndTargetTypesMatch) {
	        return cloneIfNecessary(source, optionsArgument)
	    } else if (sourceIsArray) {
	        var arrayMerge = options.arrayMerge || defaultArrayMerge;
	        return arrayMerge(target, source, optionsArgument)
	    } else {
	        return mergeObject(target, source, optionsArgument)
	    }
	}
	
	deepmerge.all = function deepmergeAll(array, optionsArgument) {
	    if (!Array.isArray(array) || array.length < 2) {
	        throw new Error('first argument should be an array with at least two elements')
	    }
	
	    // we are sure there are at least 2 values, so it is safe to have no initial value
	    return array.reduce(function(prev, next) {
	        return deepmerge(prev, next, optionsArgument)
	    })
	};
	
	var deepmerge_1 = deepmerge;
	
	module.exports = deepmerge_1;


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 86);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 86:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox-group.vue?vue&type=template&id=7289a290&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      staticClass: "el-checkbox-group",
	      attrs: { role: "group", "aria-label": "checkbox-group" }
	    },
	    [_vm._t("default")],
	    2
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-group.vue?vue&type=template&id=7289a290&
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox/src/checkbox-group.vue?vue&type=script&lang=js&
	
	
	
	/* harmony default export */ var checkbox_groupvue_type_script_lang_js_ = ({
	  name: 'ElCheckboxGroup',
	
	  componentName: 'ElCheckboxGroup',
	
	  mixins: [emitter_default.a],
	
	  inject: {
	    elFormItem: {
	      default: ''
	    }
	  },
	
	  props: {
	    value: {},
	    disabled: Boolean,
	    min: Number,
	    max: Number,
	    size: String,
	    fill: String,
	    textColor: String
	  },
	
	  computed: {
	    _elFormItemSize: function _elFormItemSize() {
	      return (this.elFormItem || {}).elFormItemSize;
	    },
	    checkboxGroupSize: function checkboxGroupSize() {
	      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
	    }
	  },
	
	  watch: {
	    value: function value(_value) {
	      this.dispatch('ElFormItem', 'el.form.change', [_value]);
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-group.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_checkbox_groupvue_type_script_lang_js_ = (checkbox_groupvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/checkbox/src/checkbox-group.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_checkbox_groupvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/checkbox/src/checkbox-group.vue"
	/* harmony default export */ var checkbox_group = (component.exports);
	// CONCATENATED MODULE: ./packages/checkbox-group/index.js
	
	
	/* istanbul ignore next */
	checkbox_group.install = function (Vue) {
	  Vue.component(checkbox_group.name, checkbox_group);
	};
	
	/* harmony default export */ var packages_checkbox_group = __webpack_exports__["default"] = (checkbox_group);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 55);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(489);
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(23);
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(20);
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(82);
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(59);
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(1);
	
	/***/ }),
	/* 8 */,
	/* 9 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(38);
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(21);
	
	/***/ }),
	/* 11 */,
	/* 12 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(132);
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(8);
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(128);
	
	/***/ }),
	/* 15 */,
	/* 16 */,
	/* 17 */,
	/* 18 */,
	/* 19 */,
	/* 20 */,
	/* 21 */,
	/* 22 */,
	/* 23 */,
	/* 24 */,
	/* 25 */,
	/* 26 */,
	/* 27 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/time.vue?vue&type=template&id=3d939089&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "transition",
	    {
	      attrs: { name: "el-zoom-in-top" },
	      on: {
	        "after-leave": function($event) {
	          _vm.$emit("dodestroy")
	        }
	      }
	    },
	    [
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.visible,
	              expression: "visible"
	            }
	          ],
	          staticClass: "el-time-panel el-popper",
	          class: _vm.popperClass
	        },
	        [
	          _c(
	            "div",
	            {
	              staticClass: "el-time-panel__content",
	              class: { "has-seconds": _vm.showSeconds }
	            },
	            [
	              _c("time-spinner", {
	                ref: "spinner",
	                attrs: {
	                  "arrow-control": _vm.useArrow,
	                  "show-seconds": _vm.showSeconds,
	                  "am-pm-mode": _vm.amPmMode,
	                  date: _vm.date
	                },
	                on: {
	                  change: _vm.handleChange,
	                  "select-range": _vm.setSelectionRange
	                }
	              })
	            ],
	            1
	          ),
	          _c("div", { staticClass: "el-time-panel__footer" }, [
	            _c(
	              "button",
	              {
	                staticClass: "el-time-panel__btn cancel",
	                attrs: { type: "button" },
	                on: { click: _vm.handleCancel }
	              },
	              [_vm._v(_vm._s(_vm.t("el.datepicker.cancel")))]
	            ),
	            _c(
	              "button",
	              {
	                staticClass: "el-time-panel__btn",
	                class: { confirm: !_vm.disabled },
	                attrs: { type: "button" },
	                on: {
	                  click: function($event) {
	                    _vm.handleConfirm()
	                  }
	                }
	              },
	              [_vm._v(_vm._s(_vm.t("el.datepicker.confirm")))]
	            )
	          ])
	        ]
	      )
	    ]
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/time.vue?vue&type=template&id=3d939089&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/date-util"
	var date_util_ = __webpack_require__(1);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/locale"
	var locale_ = __webpack_require__(6);
	var locale_default = /*#__PURE__*/__webpack_require__.n(locale_);
	
	// EXTERNAL MODULE: ./packages/date-picker/src/basic/time-spinner.vue + 4 modules
	var time_spinner = __webpack_require__(34);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/time.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	/* harmony default export */ var timevue_type_script_lang_js_ = ({
	  mixins: [locale_default.a],
	
	  components: {
	    TimeSpinner: time_spinner["a" /* default */]
	  },
	
	  props: {
	    visible: Boolean,
	    timeArrowControl: Boolean
	  },
	
	  watch: {
	    visible: function visible(val) {
	      var _this = this;
	
	      if (val) {
	        this.oldValue = this.value;
	        this.$nextTick(function () {
	          return _this.$refs.spinner.emitSelectRange('hours');
	        });
	      } else {
	        this.needInitAdjust = true;
	      }
	    },
	    value: function value(newVal) {
	      var _this2 = this;
	
	      var date = void 0;
	      if (newVal instanceof Date) {
	        date = Object(date_util_["limitTimeRange"])(newVal, this.selectableRange, this.format);
	      } else if (!newVal) {
	        date = this.defaultValue ? new Date(this.defaultValue) : new Date();
	      }
	
	      this.date = date;
	      if (this.visible && this.needInitAdjust) {
	        this.$nextTick(function (_) {
	          return _this2.adjustSpinners();
	        });
	        this.needInitAdjust = false;
	      }
	    },
	    selectableRange: function selectableRange(val) {
	      this.$refs.spinner.selectableRange = val;
	    },
	    defaultValue: function defaultValue(val) {
	      if (!Object(date_util_["isDate"])(this.value)) {
	        this.date = val ? new Date(val) : new Date();
	      }
	    }
	  },
	
	  data: function data() {
	    return {
	      popperClass: '',
	      format: 'HH:mm:ss',
	      value: '',
	      defaultValue: null,
	      date: new Date(),
	      oldValue: new Date(),
	      selectableRange: [],
	      selectionRange: [0, 2],
	      disabled: false,
	      arrowControl: false,
	      needInitAdjust: true
	    };
	  },
	
	
	  computed: {
	    showSeconds: function showSeconds() {
	      return (this.format || '').indexOf('ss') !== -1;
	    },
	    useArrow: function useArrow() {
	      return this.arrowControl || this.timeArrowControl || false;
	    },
	    amPmMode: function amPmMode() {
	      if ((this.format || '').indexOf('A') !== -1) return 'A';
	      if ((this.format || '').indexOf('a') !== -1) return 'a';
	      return '';
	    }
	  },
	
	  methods: {
	    handleCancel: function handleCancel() {
	      this.$emit('pick', this.oldValue, false);
	    },
	    handleChange: function handleChange(date) {
	      // this.visible avoids edge cases, when use scrolls during panel closing animation
	      if (this.visible) {
	        this.date = Object(date_util_["clearMilliseconds"])(date);
	        // if date is out of range, do not emit
	        if (this.isValidValue(this.date)) {
	          this.$emit('pick', this.date, true);
	        }
	      }
	    },
	    setSelectionRange: function setSelectionRange(start, end) {
	      this.$emit('select-range', start, end);
	      this.selectionRange = [start, end];
	    },
	    handleConfirm: function handleConfirm() {
	      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	      var first = arguments[1];
	
	      if (first) return;
	      var date = Object(date_util_["clearMilliseconds"])(Object(date_util_["limitTimeRange"])(this.date, this.selectableRange, this.format));
	      this.$emit('pick', date, visible, first);
	    },
	    handleKeydown: function handleKeydown(event) {
	      var keyCode = event.keyCode;
	      var mapping = { 38: -1, 40: 1, 37: -1, 39: 1 };
	
	      // Left or Right
	      if (keyCode === 37 || keyCode === 39) {
	        var step = mapping[keyCode];
	        this.changeSelectionRange(step);
	        event.preventDefault();
	        return;
	      }
	
	      // Up or Down
	      if (keyCode === 38 || keyCode === 40) {
	        var _step = mapping[keyCode];
	        this.$refs.spinner.scrollDown(_step);
	        event.preventDefault();
	        return;
	      }
	    },
	    isValidValue: function isValidValue(date) {
	      return Object(date_util_["timeWithinRange"])(date, this.selectableRange, this.format);
	    },
	    adjustSpinners: function adjustSpinners() {
	      return this.$refs.spinner.adjustSpinners();
	    },
	    changeSelectionRange: function changeSelectionRange(step) {
	      var list = [0, 3].concat(this.showSeconds ? [6] : []);
	      var mapping = ['hours', 'minutes'].concat(this.showSeconds ? ['seconds'] : []);
	      var index = list.indexOf(this.selectionRange[0]);
	      var next = (index + step + list.length) % list.length;
	      this.$refs.spinner.emitSelectRange(mapping[next]);
	    }
	  },
	
	  mounted: function mounted() {
	    var _this3 = this;
	
	    this.$nextTick(function () {
	      return _this3.handleConfirm(true, true);
	    });
	    this.$emit('mounted');
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/time.vue?vue&type=script&lang=js&
	 /* harmony default export */ var panel_timevue_type_script_lang_js_ = (timevue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/time.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  panel_timevue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/date-picker/src/panel/time.vue"
	/* harmony default export */ var time = __webpack_exports__["a"] = (component.exports);
	
	/***/ }),
	/* 28 */,
	/* 29 */,
	/* 30 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony import */ var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
	/* harmony import */ var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__);
	
	
	/* harmony default export */ __webpack_exports__["a"] = ({
	  bind: function bind(el, binding, vnode) {
	    var interval = null;
	    var startTime = void 0;
	    var handler = function handler() {
	      return vnode.context[binding.expression].apply();
	    };
	    var clear = function clear() {
	      if (Date.now() - startTime < 100) {
	        handler();
	      }
	      clearInterval(interval);
	      interval = null;
	    };
	
	    Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["on"])(el, 'mousedown', function (e) {
	      if (e.button !== 0) return;
	      startTime = Date.now();
	      Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["once"])(document, 'mouseup', clear);
	      clearInterval(interval);
	      interval = setInterval(handler, 100);
	    });
	  }
	});
	
	/***/ }),
	/* 31 */,
	/* 32 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/picker.vue?vue&type=template&id=79ae069f&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return !_vm.ranged
	    ? _c(
	        "el-input",
	        _vm._b(
	          {
	            directives: [
	              {
	                name: "clickoutside",
	                rawName: "v-clickoutside",
	                value: _vm.handleClose,
	                expression: "handleClose"
	              }
	            ],
	            ref: "reference",
	            staticClass: "el-date-editor",
	            class: "el-date-editor--" + _vm.type,
	            attrs: {
	              readonly:
	                !_vm.editable ||
	                _vm.readonly ||
	                _vm.type === "dates" ||
	                _vm.type === "week",
	              disabled: _vm.pickerDisabled,
	              size: _vm.pickerSize,
	              name: _vm.name,
	              placeholder: _vm.placeholder,
	              value: _vm.displayValue,
	              validateEvent: false
	            },
	            on: {
	              focus: _vm.handleFocus,
	              input: function(value) {
	                return (_vm.userInput = value)
	              },
	              change: _vm.handleChange
	            },
	            nativeOn: {
	              keydown: function($event) {
	                return _vm.handleKeydown($event)
	              },
	              mouseenter: function($event) {
	                return _vm.handleMouseEnter($event)
	              },
	              mouseleave: function($event) {
	                _vm.showClose = false
	              }
	            }
	          },
	          "el-input",
	          _vm.firstInputId,
	          false
	        ),
	        [
	          _c("i", {
	            staticClass: "el-input__icon",
	            class: _vm.triggerClass,
	            attrs: { slot: "prefix" },
	            on: { click: _vm.handleFocus },
	            slot: "prefix"
	          }),
	          _vm.haveTrigger
	            ? _c("i", {
	                staticClass: "el-input__icon",
	                class: [_vm.showClose ? "" + _vm.clearIcon : ""],
	                attrs: { slot: "suffix" },
	                on: { click: _vm.handleClickIcon },
	                slot: "suffix"
	              })
	            : _vm._e()
	        ]
	      )
	    : _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "clickoutside",
	              rawName: "v-clickoutside",
	              value: _vm.handleClose,
	              expression: "handleClose"
	            }
	          ],
	          ref: "reference",
	          staticClass: "el-date-editor el-range-editor el-input__inner",
	          class: [
	            "el-date-editor--" + _vm.type,
	            _vm.pickerSize ? "el-range-editor--" + _vm.pickerSize : "",
	            _vm.pickerDisabled ? "is-disabled" : "",
	            _vm.pickerVisible ? "is-active" : ""
	          ],
	          on: {
	            click: _vm.handleRangeClick,
	            mouseenter: _vm.handleMouseEnter,
	            mouseleave: function($event) {
	              _vm.showClose = false
	            },
	            keydown: _vm.handleKeydown
	          }
	        },
	        [
	          _c("i", {
	            class: ["el-input__icon", "el-range__icon", _vm.triggerClass]
	          }),
	          _c(
	            "input",
	            _vm._b(
	              {
	                staticClass: "el-range-input",
	                attrs: {
	                  autocomplete: "off",
	                  placeholder: _vm.startPlaceholder,
	                  disabled: _vm.pickerDisabled,
	                  readonly: !_vm.editable || _vm.readonly,
	                  name: _vm.name && _vm.name[0]
	                },
	                domProps: { value: _vm.displayValue && _vm.displayValue[0] },
	                on: {
	                  input: _vm.handleStartInput,
	                  change: _vm.handleStartChange,
	                  focus: _vm.handleFocus
	                }
	              },
	              "input",
	              _vm.firstInputId,
	              false
	            )
	          ),
	          _vm._t("range-separator", [
	            _c("span", { staticClass: "el-range-separator" }, [
	              _vm._v(_vm._s(_vm.rangeSeparator))
	            ])
	          ]),
	          _c(
	            "input",
	            _vm._b(
	              {
	                staticClass: "el-range-input",
	                attrs: {
	                  autocomplete: "off",
	                  placeholder: _vm.endPlaceholder,
	                  disabled: _vm.pickerDisabled,
	                  readonly: !_vm.editable || _vm.readonly,
	                  name: _vm.name && _vm.name[1]
	                },
	                domProps: { value: _vm.displayValue && _vm.displayValue[1] },
	                on: {
	                  input: _vm.handleEndInput,
	                  change: _vm.handleEndChange,
	                  focus: _vm.handleFocus
	                }
	              },
	              "input",
	              _vm.secondInputId,
	              false
	            )
	          ),
	          _vm.haveTrigger
	            ? _c("i", {
	                staticClass: "el-input__icon el-range__close-icon",
	                class: [_vm.showClose ? "" + _vm.clearIcon : ""],
	                on: { click: _vm.handleClickIcon }
	              })
	            : _vm._e()
	        ],
	        2
	      )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/picker.vue?vue&type=template&id=79ae069f&
	
	// EXTERNAL MODULE: external "vue"
	var external_vue_ = __webpack_require__(7);
	var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/clickoutside"
	var clickoutside_ = __webpack_require__(12);
	var clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/date-util"
	var date_util_ = __webpack_require__(1);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/vue-popper"
	var vue_popper_ = __webpack_require__(5);
	var vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// EXTERNAL MODULE: external "element-ui/lib/input"
	var input_ = __webpack_require__(10);
	var input_default = /*#__PURE__*/__webpack_require__.n(input_);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/merge"
	var merge_ = __webpack_require__(9);
	var merge_default = /*#__PURE__*/__webpack_require__.n(merge_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/picker.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	
	
	var NewPopper = {
	  props: {
	    appendToBody: vue_popper_default.a.props.appendToBody,
	    offset: vue_popper_default.a.props.offset,
	    boundariesPadding: vue_popper_default.a.props.boundariesPadding,
	    arrowOffset: vue_popper_default.a.props.arrowOffset
	  },
	  methods: vue_popper_default.a.methods,
	  data: function data() {
	    return merge_default()({ visibleArrow: true }, vue_popper_default.a.data);
	  },
	
	  beforeDestroy: vue_popper_default.a.beforeDestroy
	};
	
	var DEFAULT_FORMATS = {
	  date: 'yyyy-MM-dd',
	  month: 'yyyy-MM',
	  datetime: 'yyyy-MM-dd HH:mm:ss',
	  time: 'HH:mm:ss',
	  week: 'yyyywWW',
	  timerange: 'HH:mm:ss',
	  daterange: 'yyyy-MM-dd',
	  monthrange: 'yyyy-MM',
	  datetimerange: 'yyyy-MM-dd HH:mm:ss',
	  year: 'yyyy'
	};
	var HAVE_TRIGGER_TYPES = ['date', 'datetime', 'time', 'time-select', 'week', 'month', 'year', 'daterange', 'monthrange', 'timerange', 'datetimerange', 'dates'];
	var pickervue_type_script_lang_js_DATE_FORMATTER = function DATE_FORMATTER(value, format) {
	  if (format === 'timestamp') return value.getTime();
	  return Object(date_util_["formatDate"])(value, format);
	};
	var pickervue_type_script_lang_js_DATE_PARSER = function DATE_PARSER(text, format) {
	  if (format === 'timestamp') return new Date(Number(text));
	  return Object(date_util_["parseDate"])(text, format);
	};
	var RANGE_FORMATTER = function RANGE_FORMATTER(value, format) {
	  if (Array.isArray(value) && value.length === 2) {
	    var start = value[0];
	    var end = value[1];
	
	    if (start && end) {
	      return [pickervue_type_script_lang_js_DATE_FORMATTER(start, format), pickervue_type_script_lang_js_DATE_FORMATTER(end, format)];
	    }
	  }
	  return '';
	};
	var RANGE_PARSER = function RANGE_PARSER(array, format, separator) {
	  if (!Array.isArray(array)) {
	    array = array.split(separator);
	  }
	  if (array.length === 2) {
	    var range1 = array[0];
	    var range2 = array[1];
	
	    return [pickervue_type_script_lang_js_DATE_PARSER(range1, format), pickervue_type_script_lang_js_DATE_PARSER(range2, format)];
	  }
	  return [];
	};
	var TYPE_VALUE_RESOLVER_MAP = {
	  default: {
	    formatter: function formatter(value) {
	      if (!value) return '';
	      return '' + value;
	    },
	    parser: function parser(text) {
	      if (text === undefined || text === '') return null;
	      return text;
	    }
	  },
	  week: {
	    formatter: function formatter(value, format) {
	      var week = Object(date_util_["getWeekNumber"])(value);
	      var month = value.getMonth();
	      var trueDate = new Date(value);
	      if (week === 1 && month === 11) {
	        trueDate.setHours(0, 0, 0, 0);
	        trueDate.setDate(trueDate.getDate() + 3 - (trueDate.getDay() + 6) % 7);
	      }
	      var date = Object(date_util_["formatDate"])(trueDate, format);
	
	      date = /WW/.test(date) ? date.replace(/WW/, week < 10 ? '0' + week : week) : date.replace(/W/, week);
	      return date;
	    },
	    parser: function parser(text, format) {
	      // parse as if a normal date
	      return TYPE_VALUE_RESOLVER_MAP.date.parser(text, format);
	    }
	  },
	  date: {
	    formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
	    parser: pickervue_type_script_lang_js_DATE_PARSER
	  },
	  datetime: {
	    formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
	    parser: pickervue_type_script_lang_js_DATE_PARSER
	  },
	  daterange: {
	    formatter: RANGE_FORMATTER,
	    parser: RANGE_PARSER
	  },
	  monthrange: {
	    formatter: RANGE_FORMATTER,
	    parser: RANGE_PARSER
	  },
	  datetimerange: {
	    formatter: RANGE_FORMATTER,
	    parser: RANGE_PARSER
	  },
	  timerange: {
	    formatter: RANGE_FORMATTER,
	    parser: RANGE_PARSER
	  },
	  time: {
	    formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
	    parser: pickervue_type_script_lang_js_DATE_PARSER
	  },
	  month: {
	    formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
	    parser: pickervue_type_script_lang_js_DATE_PARSER
	  },
	  year: {
	    formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
	    parser: pickervue_type_script_lang_js_DATE_PARSER
	  },
	  number: {
	    formatter: function formatter(value) {
	      if (!value) return '';
	      return '' + value;
	    },
	    parser: function parser(text) {
	      var result = Number(text);
	
	      if (!isNaN(text)) {
	        return result;
	      } else {
	        return null;
	      }
	    }
	  },
	  dates: {
	    formatter: function formatter(value, format) {
	      return value.map(function (date) {
	        return pickervue_type_script_lang_js_DATE_FORMATTER(date, format);
	      });
	    },
	    parser: function parser(value, format) {
	      return (typeof value === 'string' ? value.split(', ') : value).map(function (date) {
	        return date instanceof Date ? date : pickervue_type_script_lang_js_DATE_PARSER(date, format);
	      });
	    }
	  }
	};
	var PLACEMENT_MAP = {
	  left: 'bottom-start',
	  center: 'bottom',
	  right: 'bottom-end'
	};
	
	var parseAsFormatAndType = function parseAsFormatAndType(value, customFormat, type) {
	  var rangeSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-';
	
	  if (!value) return null;
	  var parser = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).parser;
	  var format = customFormat || DEFAULT_FORMATS[type];
	  return parser(value, format, rangeSeparator);
	};
	
	var formatAsFormatAndType = function formatAsFormatAndType(value, customFormat, type) {
	  if (!value) return null;
	  var formatter = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP['default']).formatter;
	  var format = customFormat || DEFAULT_FORMATS[type];
	  return formatter(value, format);
	};
	
	/*
	 * Considers:
	 *   1. Date object
	 *   2. date string
	 *   3. array of 1 or 2
	 */
	var valueEquals = function valueEquals(a, b) {
	  // considers Date object and string
	  var dateEquals = function dateEquals(a, b) {
	    var aIsDate = a instanceof Date;
	    var bIsDate = b instanceof Date;
	    if (aIsDate && bIsDate) {
	      return a.getTime() === b.getTime();
	    }
	    if (!aIsDate && !bIsDate) {
	      return a === b;
	    }
	    return false;
	  };
	
	  var aIsArray = a instanceof Array;
	  var bIsArray = b instanceof Array;
	  if (aIsArray && bIsArray) {
	    if (a.length !== b.length) {
	      return false;
	    }
	    return a.every(function (item, index) {
	      return dateEquals(item, b[index]);
	    });
	  }
	  if (!aIsArray && !bIsArray) {
	    return dateEquals(a, b);
	  }
	  return false;
	};
	
	var isString = function isString(val) {
	  return typeof val === 'string' || val instanceof String;
	};
	
	var validator = function validator(val) {
	  // either: String, Array of String, null / undefined
	  return val === null || val === undefined || isString(val) || Array.isArray(val) && val.length === 2 && val.every(isString);
	};
	
	/* harmony default export */ var pickervue_type_script_lang_js_ = ({
	  mixins: [emitter_default.a, NewPopper],
	
	  inject: {
	    elForm: {
	      default: ''
	    },
	    elFormItem: {
	      default: ''
	    }
	  },
	
	  props: {
	    size: String,
	    format: String,
	    valueFormat: String,
	    readonly: Boolean,
	    placeholder: String,
	    startPlaceholder: String,
	    endPlaceholder: String,
	    prefixIcon: String,
	    clearIcon: {
	      type: String,
	      default: 'el-icon-circle-close'
	    },
	    name: {
	      default: '',
	      validator: validator
	    },
	    disabled: Boolean,
	    clearable: {
	      type: Boolean,
	      default: true
	    },
	    id: {
	      default: '',
	      validator: validator
	    },
	    popperClass: String,
	    editable: {
	      type: Boolean,
	      default: true
	    },
	    align: {
	      type: String,
	      default: 'left'
	    },
	    value: {},
	    defaultValue: {},
	    defaultTime: {},
	    rangeSeparator: {
	      default: '-'
	    },
	    pickerOptions: {},
	    unlinkPanels: Boolean,
	    validateEvent: {
	      type: Boolean,
	      default: true
	    }
	  },
	
	  components: { ElInput: input_default.a },
	
	  directives: { Clickoutside: clickoutside_default.a },
	
	  data: function data() {
	    return {
	      pickerVisible: false,
	      showClose: false,
	      userInput: null,
	      valueOnOpen: null, // value when picker opens, used to determine whether to emit change
	      unwatchPickerOptions: null
	    };
	  },
	
	
	  watch: {
	    pickerVisible: function pickerVisible(val) {
	      if (this.readonly || this.pickerDisabled) return;
	      if (val) {
	        this.showPicker();
	        this.valueOnOpen = Array.isArray(this.value) ? [].concat(this.value) : this.value;
	      } else {
	        this.hidePicker();
	        this.emitChange(this.value);
	        this.userInput = null;
	        if (this.validateEvent) {
	          this.dispatch('ElFormItem', 'el.form.blur');
	        }
	        this.$emit('blur', this);
	        this.blur();
	      }
	    },
	
	    parsedValue: {
	      immediate: true,
	      handler: function handler(val) {
	        if (this.picker) {
	          this.picker.value = val;
	        }
	      }
	    },
	    defaultValue: function defaultValue(val) {
	      // NOTE: should eventually move to jsx style picker + panel ?
	      if (this.picker) {
	        this.picker.defaultValue = val;
	      }
	    },
	    value: function value(val, oldVal) {
	      if (!valueEquals(val, oldVal) && !this.pickerVisible && this.validateEvent) {
	        this.dispatch('ElFormItem', 'el.form.change', val);
	      }
	    }
	  },
	
	  computed: {
	    ranged: function ranged() {
	      return this.type.indexOf('range') > -1;
	    },
	    reference: function reference() {
	      var reference = this.$refs.reference;
	      return reference.$el || reference;
	    },
	    refInput: function refInput() {
	      if (this.reference) {
	        return [].slice.call(this.reference.querySelectorAll('input'));
	      }
	      return [];
	    },
	    valueIsEmpty: function valueIsEmpty() {
	      var val = this.value;
	      if (Array.isArray(val)) {
	        for (var i = 0, len = val.length; i < len; i++) {
	          if (val[i]) {
	            return false;
	          }
	        }
	      } else {
	        if (val) {
	          return false;
	        }
	      }
	      return true;
	    },
	    triggerClass: function triggerClass() {
	      return this.prefixIcon || (this.type.indexOf('time') !== -1 ? 'el-icon-time' : 'el-icon-date');
	    },
	    selectionMode: function selectionMode() {
	      if (this.type === 'week') {
	        return 'week';
	      } else if (this.type === 'month') {
	        return 'month';
	      } else if (this.type === 'year') {
	        return 'year';
	      } else if (this.type === 'dates') {
	        return 'dates';
	      }
	
	      return 'day';
	    },
	    haveTrigger: function haveTrigger() {
	      if (typeof this.showTrigger !== 'undefined') {
	        return this.showTrigger;
	      }
	      return HAVE_TRIGGER_TYPES.indexOf(this.type) !== -1;
	    },
	    displayValue: function displayValue() {
	      var formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);
	      if (Array.isArray(this.userInput)) {
	        return [this.userInput[0] || formattedValue && formattedValue[0] || '', this.userInput[1] || formattedValue && formattedValue[1] || ''];
	      } else if (this.userInput !== null) {
	        return this.userInput;
	      } else if (formattedValue) {
	        return this.type === 'dates' ? formattedValue.join(', ') : formattedValue;
	      } else {
	        return '';
	      }
	    },
	    parsedValue: function parsedValue() {
	      if (!this.value) return this.value; // component value is not set
	      if (this.type === 'time-select') return this.value; // time-select does not require parsing, this might change in next major version
	
	      var valueIsDateObject = Object(date_util_["isDateObject"])(this.value) || Array.isArray(this.value) && this.value.every(date_util_["isDateObject"]);
	      if (valueIsDateObject) {
	        return this.value;
	      }
	
	      if (this.valueFormat) {
	        return parseAsFormatAndType(this.value, this.valueFormat, this.type, this.rangeSeparator) || this.value;
	      }
	
	      // NOTE: deal with common but incorrect usage, should remove in next major version
	      // user might provide string / timestamp without value-format, coerce them into date (or array of date)
	      return Array.isArray(this.value) ? this.value.map(function (val) {
	        return new Date(val);
	      }) : new Date(this.value);
	    },
	    _elFormItemSize: function _elFormItemSize() {
	      return (this.elFormItem || {}).elFormItemSize;
	    },
	    pickerSize: function pickerSize() {
	      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
	    },
	    pickerDisabled: function pickerDisabled() {
	      return this.disabled || (this.elForm || {}).disabled;
	    },
	    firstInputId: function firstInputId() {
	      var obj = {};
	      var id = void 0;
	      if (this.ranged) {
	        id = this.id && this.id[0];
	      } else {
	        id = this.id;
	      }
	      if (id) obj.id = id;
	      return obj;
	    },
	    secondInputId: function secondInputId() {
	      var obj = {};
	      var id = void 0;
	      if (this.ranged) {
	        id = this.id && this.id[1];
	      }
	      if (id) obj.id = id;
	      return obj;
	    }
	  },
	
	  created: function created() {
	    // vue-popper
	    this.popperOptions = {
	      boundariesPadding: 0,
	      gpuAcceleration: false
	    };
	    this.placement = PLACEMENT_MAP[this.align] || PLACEMENT_MAP.left;
	
	    this.$on('fieldReset', this.handleFieldReset);
	  },
	
	
	  methods: {
	    focus: function focus() {
	      if (!this.ranged) {
	        this.$refs.reference.focus();
	      } else {
	        this.handleFocus();
	      }
	    },
	    blur: function blur() {
	      this.refInput.forEach(function (input) {
	        return input.blur();
	      });
	    },
	
	
	    // {parse, formatTo} Value deals maps component value with internal Date
	    parseValue: function parseValue(value) {
	      var isParsed = Object(date_util_["isDateObject"])(value) || Array.isArray(value) && value.every(date_util_["isDateObject"]);
	      if (this.valueFormat && !isParsed) {
	        return parseAsFormatAndType(value, this.valueFormat, this.type, this.rangeSeparator) || value;
	      } else {
	        return value;
	      }
	    },
	    formatToValue: function formatToValue(date) {
	      var isFormattable = Object(date_util_["isDateObject"])(date) || Array.isArray(date) && date.every(date_util_["isDateObject"]);
	      if (this.valueFormat && isFormattable) {
	        return formatAsFormatAndType(date, this.valueFormat, this.type, this.rangeSeparator);
	      } else {
	        return date;
	      }
	    },
	
	
	    // {parse, formatTo} String deals with user input
	    parseString: function parseString(value) {
	      var type = Array.isArray(value) ? this.type : this.type.replace('range', '');
	      return parseAsFormatAndType(value, this.format, type);
	    },
	    formatToString: function formatToString(value) {
	      var type = Array.isArray(value) ? this.type : this.type.replace('range', '');
	      return formatAsFormatAndType(value, this.format, type);
	    },
	    handleMouseEnter: function handleMouseEnter() {
	      if (this.readonly || this.pickerDisabled) return;
	      if (!this.valueIsEmpty && this.clearable) {
	        this.showClose = true;
	      }
	    },
	    handleChange: function handleChange() {
	      if (this.userInput) {
	        var value = this.parseString(this.displayValue);
	        if (value) {
	          this.picker.value = value;
	          if (this.isValidValue(value)) {
	            this.emitInput(value);
	            this.userInput = null;
	          }
	        }
	      }
	      if (this.userInput === '') {
	        this.emitInput(null);
	        this.emitChange(null);
	        this.userInput = null;
	      }
	    },
	    handleStartInput: function handleStartInput(event) {
	      if (this.userInput) {
	        this.userInput = [event.target.value, this.userInput[1]];
	      } else {
	        this.userInput = [event.target.value, null];
	      }
	    },
	    handleEndInput: function handleEndInput(event) {
	      if (this.userInput) {
	        this.userInput = [this.userInput[0], event.target.value];
	      } else {
	        this.userInput = [null, event.target.value];
	      }
	    },
	    handleStartChange: function handleStartChange(event) {
	      var value = this.parseString(this.userInput && this.userInput[0]);
	      if (value) {
	        this.userInput = [this.formatToString(value), this.displayValue[1]];
	        var newValue = [value, this.picker.value && this.picker.value[1]];
	        this.picker.value = newValue;
	        if (this.isValidValue(newValue)) {
	          this.emitInput(newValue);
	          this.userInput = null;
	        }
	      }
	    },
	    handleEndChange: function handleEndChange(event) {
	      var value = this.parseString(this.userInput && this.userInput[1]);
	      if (value) {
	        this.userInput = [this.displayValue[0], this.formatToString(value)];
	        var newValue = [this.picker.value && this.picker.value[0], value];
	        this.picker.value = newValue;
	        if (this.isValidValue(newValue)) {
	          this.emitInput(newValue);
	          this.userInput = null;
	        }
	      }
	    },
	    handleClickIcon: function handleClickIcon(event) {
	      if (this.readonly || this.pickerDisabled) return;
	      if (this.showClose) {
	        this.valueOnOpen = this.value;
	        event.stopPropagation();
	        this.emitInput(null);
	        this.emitChange(null);
	        this.showClose = false;
	        if (this.picker && typeof this.picker.handleClear === 'function') {
	          this.picker.handleClear();
	        }
	      } else {
	        this.pickerVisible = !this.pickerVisible;
	      }
	    },
	    handleClose: function handleClose() {
	      if (!this.pickerVisible) return;
	      this.pickerVisible = false;
	
	      if (this.type === 'dates') {
	        // restore to former value
	        var oldValue = parseAsFormatAndType(this.valueOnOpen, this.valueFormat, this.type, this.rangeSeparator) || this.valueOnOpen;
	        this.emitInput(oldValue);
	      }
	    },
	    handleFieldReset: function handleFieldReset(initialValue) {
	      this.userInput = initialValue === '' ? null : initialValue;
	    },
	    handleFocus: function handleFocus() {
	      var type = this.type;
	
	      if (HAVE_TRIGGER_TYPES.indexOf(type) !== -1 && !this.pickerVisible) {
	        this.pickerVisible = true;
	      }
	      this.$emit('focus', this);
	    },
	    handleKeydown: function handleKeydown(event) {
	      var _this = this;
	
	      var keyCode = event.keyCode;
	
	      // ESC
	      if (keyCode === 27) {
	        this.pickerVisible = false;
	        event.stopPropagation();
	        return;
	      }
	
	      // Tab
	      if (keyCode === 9) {
	        if (!this.ranged) {
	          this.handleChange();
	          this.pickerVisible = this.picker.visible = false;
	          this.blur();
	          event.stopPropagation();
	        } else {
	          // user may change focus between two input
	          setTimeout(function () {
	            if (_this.refInput.indexOf(document.activeElement) === -1) {
	              _this.pickerVisible = false;
	              _this.blur();
	              event.stopPropagation();
	            }
	          }, 0);
	        }
	        return;
	      }
	
	      // Enter
	      if (keyCode === 13) {
	        if (this.userInput === '' || this.isValidValue(this.parseString(this.displayValue))) {
	          this.handleChange();
	          this.pickerVisible = this.picker.visible = false;
	          this.blur();
	        }
	        event.stopPropagation();
	        return;
	      }
	
	      // if user is typing, do not let picker handle key input
	      if (this.userInput) {
	        event.stopPropagation();
	        return;
	      }
	
	      // delegate other keys to panel
	      if (this.picker && this.picker.handleKeydown) {
	        this.picker.handleKeydown(event);
	      }
	    },
	    handleRangeClick: function handleRangeClick() {
	      var type = this.type;
	
	      if (HAVE_TRIGGER_TYPES.indexOf(type) !== -1 && !this.pickerVisible) {
	        this.pickerVisible = true;
	      }
	      this.$emit('focus', this);
	    },
	    hidePicker: function hidePicker() {
	      if (this.picker) {
	        this.picker.resetView && this.picker.resetView();
	        this.pickerVisible = this.picker.visible = false;
	        this.destroyPopper();
	      }
	    },
	    showPicker: function showPicker() {
	      var _this2 = this;
	
	      if (this.$isServer) return;
	      if (!this.picker) {
	        this.mountPicker();
	      }
	      this.pickerVisible = this.picker.visible = true;
	
	      this.updatePopper();
	
	      this.picker.value = this.parsedValue;
	      this.picker.resetView && this.picker.resetView();
	
	      this.$nextTick(function () {
	        _this2.picker.adjustSpinners && _this2.picker.adjustSpinners();
	      });
	    },
	    mountPicker: function mountPicker() {
	      var _this3 = this;
	
	      this.picker = new external_vue_default.a(this.panel).$mount();
	      this.picker.defaultValue = this.defaultValue;
	      this.picker.defaultTime = this.defaultTime;
	      this.picker.popperClass = this.popperClass;
	      this.popperElm = this.picker.$el;
	      this.picker.width = this.reference.getBoundingClientRect().width;
	      this.picker.showTime = this.type === 'datetime' || this.type === 'datetimerange';
	      this.picker.selectionMode = this.selectionMode;
	      this.picker.unlinkPanels = this.unlinkPanels;
	      this.picker.arrowControl = this.arrowControl || this.timeArrowControl || false;
	      this.$watch('format', function (format) {
	        _this3.picker.format = format;
	      });
	
	      var updateOptions = function updateOptions() {
	        var options = _this3.pickerOptions;
	
	        if (options && options.selectableRange) {
	          var ranges = options.selectableRange;
	          var parser = TYPE_VALUE_RESOLVER_MAP.datetimerange.parser;
	          var format = DEFAULT_FORMATS.timerange;
	
	          ranges = Array.isArray(ranges) ? ranges : [ranges];
	          _this3.picker.selectableRange = ranges.map(function (range) {
	            return parser(range, format, _this3.rangeSeparator);
	          });
	        }
	
	        for (var option in options) {
	          if (options.hasOwnProperty(option) &&
	          // 忽略 time-picker 的该配置项
	          option !== 'selectableRange') {
	            _this3.picker[option] = options[option];
	          }
	        }
	
	        // main format must prevail over undocumented pickerOptions.format
	        if (_this3.format) {
	          _this3.picker.format = _this3.format;
	        }
	      };
	      updateOptions();
	      this.unwatchPickerOptions = this.$watch('pickerOptions', function () {
	        return updateOptions();
	      }, { deep: true });
	      this.$el.appendChild(this.picker.$el);
	      this.picker.resetView && this.picker.resetView();
	
	      this.picker.$on('dodestroy', this.doDestroy);
	      this.picker.$on('pick', function () {
	        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	        var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	        _this3.userInput = null;
	        _this3.pickerVisible = _this3.picker.visible = visible;
	        _this3.emitInput(date);
	        _this3.picker.resetView && _this3.picker.resetView();
	      });
	
	      this.picker.$on('select-range', function (start, end, pos) {
	        if (_this3.refInput.length === 0) return;
	        if (!pos || pos === 'min') {
	          _this3.refInput[0].setSelectionRange(start, end);
	          _this3.refInput[0].focus();
	        } else if (pos === 'max') {
	          _this3.refInput[1].setSelectionRange(start, end);
	          _this3.refInput[1].focus();
	        }
	      });
	    },
	    unmountPicker: function unmountPicker() {
	      if (this.picker) {
	        this.picker.$destroy();
	        this.picker.$off();
	        if (typeof this.unwatchPickerOptions === 'function') {
	          this.unwatchPickerOptions();
	        }
	        this.picker.$el.parentNode.removeChild(this.picker.$el);
	      }
	    },
	    emitChange: function emitChange(val) {
	      // determine user real change only
	      if (!valueEquals(val, this.valueOnOpen)) {
	        this.$emit('change', val);
	        this.valueOnOpen = val;
	        if (this.validateEvent) {
	          this.dispatch('ElFormItem', 'el.form.change', val);
	        }
	      }
	    },
	    emitInput: function emitInput(val) {
	      var formatted = this.formatToValue(val);
	      if (!valueEquals(this.value, formatted)) {
	        this.$emit('input', formatted);
	      }
	    },
	    isValidValue: function isValidValue(value) {
	      if (!this.picker) {
	        this.mountPicker();
	      }
	      if (this.picker.isValidValue) {
	        return value && this.picker.isValidValue(value);
	      } else {
	        return true;
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/picker.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_pickervue_type_script_lang_js_ = (pickervue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/date-picker/src/picker.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_pickervue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/date-picker/src/picker.vue"
	/* harmony default export */ var picker = __webpack_exports__["a"] = (component.exports);
	
	/***/ }),
	/* 33 */,
	/* 34 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/time-spinner.vue?vue&type=template&id=1facadeb&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "div",
	    {
	      staticClass: "el-time-spinner",
	      class: { "has-seconds": _vm.showSeconds }
	    },
	    [
	      !_vm.arrowControl
	        ? [
	            _c(
	              "el-scrollbar",
	              {
	                ref: "hours",
	                staticClass: "el-time-spinner__wrapper",
	                attrs: {
	                  "wrap-style": "max-height: inherit;",
	                  "view-class": "el-time-spinner__list",
	                  noresize: "",
	                  tag: "ul"
	                },
	                nativeOn: {
	                  mouseenter: function($event) {
	                    _vm.emitSelectRange("hours")
	                  },
	                  mousemove: function($event) {
	                    _vm.adjustCurrentSpinner("hours")
	                  }
	                }
	              },
	              _vm._l(_vm.hoursList, function(disabled, hour) {
	                return _c(
	                  "li",
	                  {
	                    key: hour,
	                    staticClass: "el-time-spinner__item",
	                    class: { active: hour === _vm.hours, disabled: disabled },
	                    on: {
	                      click: function($event) {
	                        _vm.handleClick("hours", {
	                          value: hour,
	                          disabled: disabled
	                        })
	                      }
	                    }
	                  },
	                  [
	                    _vm._v(
	                      _vm._s(
	                        ("0" + (_vm.amPmMode ? hour % 12 || 12 : hour)).slice(
	                          -2
	                        )
	                      ) + _vm._s(_vm.amPm(hour))
	                    )
	                  ]
	                )
	              }),
	              0
	            ),
	            _c(
	              "el-scrollbar",
	              {
	                ref: "minutes",
	                staticClass: "el-time-spinner__wrapper",
	                attrs: {
	                  "wrap-style": "max-height: inherit;",
	                  "view-class": "el-time-spinner__list",
	                  noresize: "",
	                  tag: "ul"
	                },
	                nativeOn: {
	                  mouseenter: function($event) {
	                    _vm.emitSelectRange("minutes")
	                  },
	                  mousemove: function($event) {
	                    _vm.adjustCurrentSpinner("minutes")
	                  }
	                }
	              },
	              _vm._l(_vm.minutesList, function(enabled, key) {
	                return _c(
	                  "li",
	                  {
	                    key: key,
	                    staticClass: "el-time-spinner__item",
	                    class: { active: key === _vm.minutes, disabled: !enabled },
	                    on: {
	                      click: function($event) {
	                        _vm.handleClick("minutes", {
	                          value: key,
	                          disabled: false
	                        })
	                      }
	                    }
	                  },
	                  [_vm._v(_vm._s(("0" + key).slice(-2)))]
	                )
	              }),
	              0
	            ),
	            _c(
	              "el-scrollbar",
	              {
	                directives: [
	                  {
	                    name: "show",
	                    rawName: "v-show",
	                    value: _vm.showSeconds,
	                    expression: "showSeconds"
	                  }
	                ],
	                ref: "seconds",
	                staticClass: "el-time-spinner__wrapper",
	                attrs: {
	                  "wrap-style": "max-height: inherit;",
	                  "view-class": "el-time-spinner__list",
	                  noresize: "",
	                  tag: "ul"
	                },
	                nativeOn: {
	                  mouseenter: function($event) {
	                    _vm.emitSelectRange("seconds")
	                  },
	                  mousemove: function($event) {
	                    _vm.adjustCurrentSpinner("seconds")
	                  }
	                }
	              },
	              _vm._l(60, function(second, key) {
	                return _c(
	                  "li",
	                  {
	                    key: key,
	                    staticClass: "el-time-spinner__item",
	                    class: { active: key === _vm.seconds },
	                    on: {
	                      click: function($event) {
	                        _vm.handleClick("seconds", {
	                          value: key,
	                          disabled: false
	                        })
	                      }
	                    }
	                  },
	                  [_vm._v(_vm._s(("0" + key).slice(-2)))]
	                )
	              }),
	              0
	            )
	          ]
	        : _vm._e(),
	      _vm.arrowControl
	        ? [
	            _c(
	              "div",
	              {
	                staticClass: "el-time-spinner__wrapper is-arrow",
	                on: {
	                  mouseenter: function($event) {
	                    _vm.emitSelectRange("hours")
	                  }
	                }
	              },
	              [
	                _c("i", {
	                  directives: [
	                    {
	                      name: "repeat-click",
	                      rawName: "v-repeat-click",
	                      value: _vm.decrease,
	                      expression: "decrease"
	                    }
	                  ],
	                  staticClass: "el-time-spinner__arrow el-icon-arrow-up"
	                }),
	                _c("i", {
	                  directives: [
	                    {
	                      name: "repeat-click",
	                      rawName: "v-repeat-click",
	                      value: _vm.increase,
	                      expression: "increase"
	                    }
	                  ],
	                  staticClass: "el-time-spinner__arrow el-icon-arrow-down"
	                }),
	                _c(
	                  "ul",
	                  { ref: "hours", staticClass: "el-time-spinner__list" },
	                  _vm._l(_vm.arrowHourList, function(hour, key) {
	                    return _c(
	                      "li",
	                      {
	                        key: key,
	                        staticClass: "el-time-spinner__item",
	                        class: {
	                          active: hour === _vm.hours,
	                          disabled: _vm.hoursList[hour]
	                        }
	                      },
	                      [
	                        _vm._v(
	                          _vm._s(
	                            hour === undefined
	                              ? ""
	                              : (
	                                  "0" + (_vm.amPmMode ? hour % 12 || 12 : hour)
	                                ).slice(-2) + _vm.amPm(hour)
	                          )
	                        )
	                      ]
	                    )
	                  }),
	                  0
	                )
	              ]
	            ),
	            _c(
	              "div",
	              {
	                staticClass: "el-time-spinner__wrapper is-arrow",
	                on: {
	                  mouseenter: function($event) {
	                    _vm.emitSelectRange("minutes")
	                  }
	                }
	              },
	              [
	                _c("i", {
	                  directives: [
	                    {
	                      name: "repeat-click",
	                      rawName: "v-repeat-click",
	                      value: _vm.decrease,
	                      expression: "decrease"
	                    }
	                  ],
	                  staticClass: "el-time-spinner__arrow el-icon-arrow-up"
	                }),
	                _c("i", {
	                  directives: [
	                    {
	                      name: "repeat-click",
	                      rawName: "v-repeat-click",
	                      value: _vm.increase,
	                      expression: "increase"
	                    }
	                  ],
	                  staticClass: "el-time-spinner__arrow el-icon-arrow-down"
	                }),
	                _c(
	                  "ul",
	                  { ref: "minutes", staticClass: "el-time-spinner__list" },
	                  _vm._l(_vm.arrowMinuteList, function(minute, key) {
	                    return _c(
	                      "li",
	                      {
	                        key: key,
	                        staticClass: "el-time-spinner__item",
	                        class: { active: minute === _vm.minutes }
	                      },
	                      [
	                        _vm._v(
	                          "\n          " +
	                            _vm._s(
	                              minute === undefined
	                                ? ""
	                                : ("0" + minute).slice(-2)
	                            ) +
	                            "\n        "
	                        )
	                      ]
	                    )
	                  }),
	                  0
	                )
	              ]
	            ),
	            _vm.showSeconds
	              ? _c(
	                  "div",
	                  {
	                    staticClass: "el-time-spinner__wrapper is-arrow",
	                    on: {
	                      mouseenter: function($event) {
	                        _vm.emitSelectRange("seconds")
	                      }
	                    }
	                  },
	                  [
	                    _c("i", {
	                      directives: [
	                        {
	                          name: "repeat-click",
	                          rawName: "v-repeat-click",
	                          value: _vm.decrease,
	                          expression: "decrease"
	                        }
	                      ],
	                      staticClass: "el-time-spinner__arrow el-icon-arrow-up"
	                    }),
	                    _c("i", {
	                      directives: [
	                        {
	                          name: "repeat-click",
	                          rawName: "v-repeat-click",
	                          value: _vm.increase,
	                          expression: "increase"
	                        }
	                      ],
	                      staticClass: "el-time-spinner__arrow el-icon-arrow-down"
	                    }),
	                    _c(
	                      "ul",
	                      { ref: "seconds", staticClass: "el-time-spinner__list" },
	                      _vm._l(_vm.arrowSecondList, function(second, key) {
	                        return _c(
	                          "li",
	                          {
	                            key: key,
	                            staticClass: "el-time-spinner__item",
	                            class: { active: second === _vm.seconds }
	                          },
	                          [
	                            _vm._v(
	                              "\n          " +
	                                _vm._s(
	                                  second === undefined
	                                    ? ""
	                                    : ("0" + second).slice(-2)
	                                ) +
	                                "\n        "
	                            )
	                          ]
	                        )
	                      }),
	                      0
	                    )
	                  ]
	                )
	              : _vm._e()
	          ]
	        : _vm._e()
	    ],
	    2
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/time-spinner.vue?vue&type=template&id=1facadeb&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/date-util"
	var date_util_ = __webpack_require__(1);
	
	// EXTERNAL MODULE: external "element-ui/lib/scrollbar"
	var scrollbar_ = __webpack_require__(14);
	var scrollbar_default = /*#__PURE__*/__webpack_require__.n(scrollbar_);
	
	// EXTERNAL MODULE: ./src/directives/repeat-click.js
	var repeat_click = __webpack_require__(30);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/time-spinner.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	/* harmony default export */ var time_spinnervue_type_script_lang_js_ = ({
	  components: { ElScrollbar: scrollbar_default.a },
	
	  directives: {
	    repeatClick: repeat_click["a" /* default */]
	  },
	
	  props: {
	    date: {},
	    defaultValue: {}, // reserved for future use
	    showSeconds: {
	      type: Boolean,
	      default: true
	    },
	    arrowControl: Boolean,
	    amPmMode: {
	      type: String,
	      default: '' // 'a': am/pm; 'A': AM/PM
	    }
	  },
	
	  computed: {
	    hours: function hours() {
	      return this.date.getHours();
	    },
	    minutes: function minutes() {
	      return this.date.getMinutes();
	    },
	    seconds: function seconds() {
	      return this.date.getSeconds();
	    },
	    hoursList: function hoursList() {
	      return Object(date_util_["getRangeHours"])(this.selectableRange);
	    },
	    minutesList: function minutesList() {
	      return Object(date_util_["getRangeMinutes"])(this.selectableRange, this.hours);
	    },
	    arrowHourList: function arrowHourList() {
	      var hours = this.hours;
	      return [hours > 0 ? hours - 1 : undefined, hours, hours < 23 ? hours + 1 : undefined];
	    },
	    arrowMinuteList: function arrowMinuteList() {
	      var minutes = this.minutes;
	      return [minutes > 0 ? minutes - 1 : undefined, minutes, minutes < 59 ? minutes + 1 : undefined];
	    },
	    arrowSecondList: function arrowSecondList() {
	      var seconds = this.seconds;
	      return [seconds > 0 ? seconds - 1 : undefined, seconds, seconds < 59 ? seconds + 1 : undefined];
	    }
	  },
	
	  data: function data() {
	    return {
	      selectableRange: [],
	      currentScrollbar: null
	    };
	  },
	  mounted: function mounted() {
	    var _this = this;
	
	    this.$nextTick(function () {
	      !_this.arrowControl && _this.bindScrollEvent();
	    });
	  },
	
	
	  methods: {
	    increase: function increase() {
	      this.scrollDown(1);
	    },
	    decrease: function decrease() {
	      this.scrollDown(-1);
	    },
	    modifyDateField: function modifyDateField(type, value) {
	      switch (type) {
	        case 'hours':
	          this.$emit('change', Object(date_util_["modifyTime"])(this.date, value, this.minutes, this.seconds));break;
	        case 'minutes':
	          this.$emit('change', Object(date_util_["modifyTime"])(this.date, this.hours, value, this.seconds));break;
	        case 'seconds':
	          this.$emit('change', Object(date_util_["modifyTime"])(this.date, this.hours, this.minutes, value));break;
	      }
	    },
	    handleClick: function handleClick(type, _ref) {
	      var value = _ref.value,
	          disabled = _ref.disabled;
	
	      if (!disabled) {
	        this.modifyDateField(type, value);
	        this.emitSelectRange(type);
	        this.adjustSpinner(type, value);
	      }
	    },
	    emitSelectRange: function emitSelectRange(type) {
	      if (type === 'hours') {
	        this.$emit('select-range', 0, 2);
	      } else if (type === 'minutes') {
	        this.$emit('select-range', 3, 5);
	      } else if (type === 'seconds') {
	        this.$emit('select-range', 6, 8);
	      }
	      this.currentScrollbar = type;
	    },
	    bindScrollEvent: function bindScrollEvent() {
	      var _this2 = this;
	
	      var bindFuntion = function bindFuntion(type) {
	        _this2.$refs[type].wrap.onscroll = function (e) {
	          // TODO: scroll is emitted when set scrollTop programatically
	          // should find better solutions in the future!
	          _this2.handleScroll(type, e);
	        };
	      };
	      bindFuntion('hours');
	      bindFuntion('minutes');
	      bindFuntion('seconds');
	    },
	    handleScroll: function handleScroll(type) {
	      var value = Math.min(Math.round((this.$refs[type].wrap.scrollTop - (this.scrollBarHeight(type) * 0.5 - 10) / this.typeItemHeight(type) + 3) / this.typeItemHeight(type)), type === 'hours' ? 23 : 59);
	      this.modifyDateField(type, value);
	    },
	
	
	    // NOTE: used by datetime / date-range panel
	    //       renamed from adjustScrollTop
	    //       should try to refactory it
	    adjustSpinners: function adjustSpinners() {
	      this.adjustSpinner('hours', this.hours);
	      this.adjustSpinner('minutes', this.minutes);
	      this.adjustSpinner('seconds', this.seconds);
	    },
	    adjustCurrentSpinner: function adjustCurrentSpinner(type) {
	      this.adjustSpinner(type, this[type]);
	    },
	    adjustSpinner: function adjustSpinner(type, value) {
	      if (this.arrowControl) return;
	      var el = this.$refs[type].wrap;
	      if (el) {
	        el.scrollTop = Math.max(0, value * this.typeItemHeight(type));
	      }
	    },
	    scrollDown: function scrollDown(step) {
	      var _this3 = this;
	
	      if (!this.currentScrollbar) {
	        this.emitSelectRange('hours');
	      }
	
	      var label = this.currentScrollbar;
	      var hoursList = this.hoursList;
	      var now = this[label];
	
	      if (this.currentScrollbar === 'hours') {
	        var total = Math.abs(step);
	        step = step > 0 ? 1 : -1;
	        var length = hoursList.length;
	        while (length-- && total) {
	          now = (now + step + hoursList.length) % hoursList.length;
	          if (hoursList[now]) {
	            continue;
	          }
	          total--;
	        }
	        if (hoursList[now]) return;
	      } else {
	        now = (now + step + 60) % 60;
	      }
	
	      this.modifyDateField(label, now);
	      this.adjustSpinner(label, now);
	      this.$nextTick(function () {
	        return _this3.emitSelectRange(_this3.currentScrollbar);
	      });
	    },
	    amPm: function amPm(hour) {
	      var shouldShowAmPm = this.amPmMode.toLowerCase() === 'a';
	      if (!shouldShowAmPm) return '';
	      var isCapital = this.amPmMode === 'A';
	      var content = hour < 12 ? ' am' : ' pm';
	      if (isCapital) content = content.toUpperCase();
	      return content;
	    },
	    typeItemHeight: function typeItemHeight(type) {
	      return this.$refs[type].$el.querySelector('li').offsetHeight;
	    },
	    scrollBarHeight: function scrollBarHeight(type) {
	      return this.$refs[type].$el.offsetHeight;
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/time-spinner.vue?vue&type=script&lang=js&
	 /* harmony default export */ var basic_time_spinnervue_type_script_lang_js_ = (time_spinnervue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/time-spinner.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  basic_time_spinnervue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/date-picker/src/basic/time-spinner.vue"
	/* harmony default export */ var time_spinner = __webpack_exports__["a"] = (component.exports);
	
	/***/ }),
	/* 35 */,
	/* 36 */,
	/* 37 */,
	/* 38 */,
	/* 39 */,
	/* 40 */,
	/* 41 */,
	/* 42 */,
	/* 43 */,
	/* 44 */,
	/* 45 */,
	/* 46 */,
	/* 47 */,
	/* 48 */,
	/* 49 */,
	/* 50 */,
	/* 51 */,
	/* 52 */,
	/* 53 */,
	/* 54 */,
	/* 55 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// EXTERNAL MODULE: ./packages/date-picker/src/picker.vue + 4 modules
	var picker = __webpack_require__(32);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/date.vue?vue&type=template&id=2440d4ea&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "transition",
	    {
	      attrs: { name: "el-zoom-in-top" },
	      on: { "after-enter": _vm.handleEnter, "after-leave": _vm.handleLeave }
	    },
	    [
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.visible,
	              expression: "visible"
	            }
	          ],
	          staticClass: "el-picker-panel el-date-picker el-popper",
	          class: [
	            {
	              "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
	              "has-time": _vm.showTime
	            },
	            _vm.popperClass
	          ]
	        },
	        [
	          _c(
	            "div",
	            { staticClass: "el-picker-panel__body-wrapper" },
	            [
	              _vm._t("sidebar"),
	              _vm.shortcuts
	                ? _c(
	                    "div",
	                    { staticClass: "el-picker-panel__sidebar" },
	                    _vm._l(_vm.shortcuts, function(shortcut, key) {
	                      return _c(
	                        "button",
	                        {
	                          key: key,
	                          staticClass: "el-picker-panel__shortcut",
	                          attrs: { type: "button" },
	                          on: {
	                            click: function($event) {
	                              _vm.handleShortcutClick(shortcut)
	                            }
	                          }
	                        },
	                        [_vm._v(_vm._s(shortcut.text))]
	                      )
	                    }),
	                    0
	                  )
	                : _vm._e(),
	              _c("div", { staticClass: "el-picker-panel__body" }, [
	                _vm.showTime
	                  ? _c("div", { staticClass: "el-date-picker__time-header" }, [
	                      _c(
	                        "span",
	                        { staticClass: "el-date-picker__editor-wrap" },
	                        [
	                          _c("el-input", {
	                            attrs: {
	                              placeholder: _vm.t("el.datepicker.selectDate"),
	                              value: _vm.visibleDate,
	                              size: "small"
	                            },
	                            on: {
	                              input: function(val) {
	                                return (_vm.userInputDate = val)
	                              },
	                              change: _vm.handleVisibleDateChange
	                            }
	                          })
	                        ],
	                        1
	                      ),
	                      _c(
	                        "span",
	                        {
	                          directives: [
	                            {
	                              name: "clickoutside",
	                              rawName: "v-clickoutside",
	                              value: _vm.handleTimePickClose,
	                              expression: "handleTimePickClose"
	                            }
	                          ],
	                          staticClass: "el-date-picker__editor-wrap"
	                        },
	                        [
	                          _c("el-input", {
	                            ref: "input",
	                            attrs: {
	                              placeholder: _vm.t("el.datepicker.selectTime"),
	                              value: _vm.visibleTime,
	                              size: "small"
	                            },
	                            on: {
	                              focus: function($event) {
	                                _vm.timePickerVisible = true
	                              },
	                              input: function(val) {
	                                return (_vm.userInputTime = val)
	                              },
	                              change: _vm.handleVisibleTimeChange
	                            }
	                          }),
	                          _c("time-picker", {
	                            ref: "timepicker",
	                            attrs: {
	                              "time-arrow-control": _vm.arrowControl,
	                              visible: _vm.timePickerVisible
	                            },
	                            on: {
	                              pick: _vm.handleTimePick,
	                              mounted: _vm.proxyTimePickerDataProperties
	                            }
	                          })
	                        ],
	                        1
	                      )
	                    ])
	                  : _vm._e(),
	                _c(
	                  "div",
	                  {
	                    directives: [
	                      {
	                        name: "show",
	                        rawName: "v-show",
	                        value: _vm.currentView !== "time",
	                        expression: "currentView !== 'time'"
	                      }
	                    ],
	                    staticClass: "el-date-picker__header",
	                    class: {
	                      "el-date-picker__header--bordered":
	                        _vm.currentView === "year" ||
	                        _vm.currentView === "month"
	                    }
	                  },
	                  [
	                    _c("button", {
	                      staticClass:
	                        "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left",
	                      attrs: {
	                        type: "button",
	                        "aria-label": _vm.t("el.datepicker.prevYear")
	                      },
	                      on: { click: _vm.prevYear }
	                    }),
	                    _c("button", {
	                      directives: [
	                        {
	                          name: "show",
	                          rawName: "v-show",
	                          value: _vm.currentView === "date",
	                          expression: "currentView === 'date'"
	                        }
	                      ],
	                      staticClass:
	                        "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left",
	                      attrs: {
	                        type: "button",
	                        "aria-label": _vm.t("el.datepicker.prevMonth")
	                      },
	                      on: { click: _vm.prevMonth }
	                    }),
	                    _c(
	                      "span",
	                      {
	                        staticClass: "el-date-picker__header-label",
	                        attrs: { role: "button" },
	                        on: { click: _vm.showYearPicker }
	                      },
	                      [_vm._v(_vm._s(_vm.yearLabel))]
	                    ),
	                    _c(
	                      "span",
	                      {
	                        directives: [
	                          {
	                            name: "show",
	                            rawName: "v-show",
	                            value: _vm.currentView === "date",
	                            expression: "currentView === 'date'"
	                          }
	                        ],
	                        staticClass: "el-date-picker__header-label",
	                        class: { active: _vm.currentView === "month" },
	                        attrs: { role: "button" },
	                        on: { click: _vm.showMonthPicker }
	                      },
	                      [
	                        _vm._v(
	                          _vm._s(_vm.t("el.datepicker.month" + (_vm.month + 1)))
	                        )
	                      ]
	                    ),
	                    _c("button", {
	                      staticClass:
	                        "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right",
	                      attrs: {
	                        type: "button",
	                        "aria-label": _vm.t("el.datepicker.nextYear")
	                      },
	                      on: { click: _vm.nextYear }
	                    }),
	                    _c("button", {
	                      directives: [
	                        {
	                          name: "show",
	                          rawName: "v-show",
	                          value: _vm.currentView === "date",
	                          expression: "currentView === 'date'"
	                        }
	                      ],
	                      staticClass:
	                        "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right",
	                      attrs: {
	                        type: "button",
	                        "aria-label": _vm.t("el.datepicker.nextMonth")
	                      },
	                      on: { click: _vm.nextMonth }
	                    })
	                  ]
	                ),
	                _c(
	                  "div",
	                  { staticClass: "el-picker-panel__content" },
	                  [
	                    _c("date-table", {
	                      directives: [
	                        {
	                          name: "show",
	                          rawName: "v-show",
	                          value: _vm.currentView === "date",
	                          expression: "currentView === 'date'"
	                        }
	                      ],
	                      attrs: {
	                        "selection-mode": _vm.selectionMode,
	                        "first-day-of-week": _vm.firstDayOfWeek,
	                        value: _vm.value,
	                        "default-value": _vm.defaultValue
	                          ? new Date(_vm.defaultValue)
	                          : null,
	                        date: _vm.date,
	                        "cell-class-name": _vm.cellClassName,
	                        "disabled-date": _vm.disabledDate
	                      },
	                      on: { pick: _vm.handleDatePick }
	                    }),
	                    _c("year-table", {
	                      directives: [
	                        {
	                          name: "show",
	                          rawName: "v-show",
	                          value: _vm.currentView === "year",
	                          expression: "currentView === 'year'"
	                        }
	                      ],
	                      attrs: {
	                        value: _vm.value,
	                        "default-value": _vm.defaultValue
	                          ? new Date(_vm.defaultValue)
	                          : null,
	                        date: _vm.date,
	                        "disabled-date": _vm.disabledDate
	                      },
	                      on: { pick: _vm.handleYearPick }
	                    }),
	                    _c("month-table", {
	                      directives: [
	                        {
	                          name: "show",
	                          rawName: "v-show",
	                          value: _vm.currentView === "month",
	                          expression: "currentView === 'month'"
	                        }
	                      ],
	                      attrs: {
	                        value: _vm.value,
	                        "default-value": _vm.defaultValue
	                          ? new Date(_vm.defaultValue)
	                          : null,
	                        date: _vm.date,
	                        "disabled-date": _vm.disabledDate
	                      },
	                      on: { pick: _vm.handleMonthPick }
	                    })
	                  ],
	                  1
	                )
	              ])
	            ],
	            2
	          ),
	          _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "show",
	                  rawName: "v-show",
	                  value: _vm.footerVisible && _vm.currentView === "date",
	                  expression: "footerVisible && currentView === 'date'"
	                }
	              ],
	              staticClass: "el-picker-panel__footer"
	            },
	            [
	              _c(
	                "el-button",
	                {
	                  directives: [
	                    {
	                      name: "show",
	                      rawName: "v-show",
	                      value: _vm.selectionMode !== "dates",
	                      expression: "selectionMode !== 'dates'"
	                    }
	                  ],
	                  staticClass: "el-picker-panel__link-btn",
	                  attrs: { size: "mini", type: "text" },
	                  on: { click: _vm.changeToNow }
	                },
	                [
	                  _vm._v(
	                    "\n        " +
	                      _vm._s(_vm.t("el.datepicker.now")) +
	                      "\n      "
	                  )
	                ]
	              ),
	              _c(
	                "el-button",
	                {
	                  staticClass: "el-picker-panel__link-btn",
	                  attrs: { plain: "", size: "mini" },
	                  on: { click: _vm.confirm }
	                },
	                [
	                  _vm._v(
	                    "\n        " +
	                      _vm._s(_vm.t("el.datepicker.confirm")) +
	                      "\n      "
	                  )
	                ]
	              )
	            ],
	            1
	          )
	        ]
	      )
	    ]
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/date.vue?vue&type=template&id=2440d4ea&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/date-util"
	var date_util_ = __webpack_require__(1);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/clickoutside"
	var clickoutside_ = __webpack_require__(12);
	var clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/locale"
	var locale_ = __webpack_require__(6);
	var locale_default = /*#__PURE__*/__webpack_require__.n(locale_);
	
	// EXTERNAL MODULE: external "element-ui/lib/input"
	var input_ = __webpack_require__(10);
	var input_default = /*#__PURE__*/__webpack_require__.n(input_);
	
	// EXTERNAL MODULE: external "element-ui/lib/button"
	var button_ = __webpack_require__(13);
	var button_default = /*#__PURE__*/__webpack_require__.n(button_);
	
	// EXTERNAL MODULE: ./packages/date-picker/src/panel/time.vue + 4 modules
	var panel_time = __webpack_require__(27);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/year-table.vue?vue&type=template&id=c86ab5e0&
	var year_tablevue_type_template_id_c86ab5e0_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "table",
	    { staticClass: "el-year-table", on: { click: _vm.handleYearTableClick } },
	    [
	      _c("tbody", [
	        _c("tr", [
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 0)
	            },
	            [_c("a", { staticClass: "cell" }, [_vm._v(_vm._s(_vm.startYear))])]
	          ),
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 1)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 1))
	              ])
	            ]
	          ),
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 2)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 2))
	              ])
	            ]
	          ),
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 3)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 3))
	              ])
	            ]
	          )
	        ]),
	        _c("tr", [
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 4)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 4))
	              ])
	            ]
	          ),
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 5)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 5))
	              ])
	            ]
	          ),
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 6)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 6))
	              ])
	            ]
	          ),
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 7)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 7))
	              ])
	            ]
	          )
	        ]),
	        _c("tr", [
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 8)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 8))
	              ])
	            ]
	          ),
	          _c(
	            "td",
	            {
	              staticClass: "available",
	              class: _vm.getCellStyle(_vm.startYear + 9)
	            },
	            [
	              _c("a", { staticClass: "cell" }, [
	                _vm._v(_vm._s(_vm.startYear + 9))
	              ])
	            ]
	          ),
	          _c("td"),
	          _c("td")
	        ])
	      ])
	    ]
	  )
	}
	var year_tablevue_type_template_id_c86ab5e0_staticRenderFns = []
	year_tablevue_type_template_id_c86ab5e0_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/year-table.vue?vue&type=template&id=c86ab5e0&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/dom"
	var dom_ = __webpack_require__(2);
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/util"
	var util_ = __webpack_require__(3);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/year-table.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	var year_tablevue_type_script_lang_js_datesInYear = function datesInYear(year) {
	  var numOfDays = Object(date_util_["getDayCountOfYear"])(year);
	  var firstDay = new Date(year, 0, 1);
	  return Object(date_util_["range"])(numOfDays).map(function (n) {
	    return Object(date_util_["nextDate"])(firstDay, n);
	  });
	};
	
	/* harmony default export */ var year_tablevue_type_script_lang_js_ = ({
	  props: {
	    disabledDate: {},
	    value: {},
	    defaultValue: {
	      validator: function validator(val) {
	        // null or valid Date Object
	        return val === null || val instanceof Date && Object(date_util_["isDate"])(val);
	      }
	    },
	    date: {}
	  },
	
	  computed: {
	    startYear: function startYear() {
	      return Math.floor(this.date.getFullYear() / 10) * 10;
	    }
	  },
	
	  methods: {
	    getCellStyle: function getCellStyle(year) {
	      var style = {};
	      var today = new Date();
	
	      style.disabled = typeof this.disabledDate === 'function' ? year_tablevue_type_script_lang_js_datesInYear(year).every(this.disabledDate) : false;
	      style.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function (date) {
	        return date.getFullYear() === year;
	      }) >= 0;
	      style.today = today.getFullYear() === year;
	      style.default = this.defaultValue && this.defaultValue.getFullYear() === year;
	
	      return style;
	    },
	    handleYearTableClick: function handleYearTableClick(event) {
	      var target = event.target;
	      if (target.tagName === 'A') {
	        if (Object(dom_["hasClass"])(target.parentNode, 'disabled')) return;
	        var year = target.textContent || target.innerText;
	        this.$emit('pick', Number(year));
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/year-table.vue?vue&type=script&lang=js&
	 /* harmony default export */ var basic_year_tablevue_type_script_lang_js_ = (year_tablevue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/year-table.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  basic_year_tablevue_type_script_lang_js_,
	  year_tablevue_type_template_id_c86ab5e0_render,
	  year_tablevue_type_template_id_c86ab5e0_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/date-picker/src/basic/year-table.vue"
	/* harmony default export */ var year_table = (component.exports);
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/month-table.vue?vue&type=template&id=654d4f42&
	var month_tablevue_type_template_id_654d4f42_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "table",
	    {
	      staticClass: "el-month-table",
	      on: { click: _vm.handleMonthTableClick, mousemove: _vm.handleMouseMove }
	    },
	    [
	      _c(
	        "tbody",
	        _vm._l(_vm.rows, function(row, key) {
	          return _c(
	            "tr",
	            { key: key },
	            _vm._l(row, function(cell, key) {
	              return _c("td", { key: key, class: _vm.getCellStyle(cell) }, [
	                _c("div", [
	                  _c("a", { staticClass: "cell" }, [
	                    _vm._v(
	                      _vm._s(
	                        _vm.t("el.datepicker.months." + _vm.months[cell.text])
	                      )
	                    )
	                  ])
	                ])
	              ])
	            }),
	            0
	          )
	        }),
	        0
	      )
	    ]
	  )
	}
	var month_tablevue_type_template_id_654d4f42_staticRenderFns = []
	month_tablevue_type_template_id_654d4f42_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/month-table.vue?vue&type=template&id=654d4f42&
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/month-table.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	var month_tablevue_type_script_lang_js_datesInMonth = function datesInMonth(year, month) {
	  var numOfDays = Object(date_util_["getDayCountOfMonth"])(year, month);
	  var firstDay = new Date(year, month, 1);
	  return Object(date_util_["range"])(numOfDays).map(function (n) {
	    return Object(date_util_["nextDate"])(firstDay, n);
	  });
	};
	
	var clearDate = function clearDate(date) {
	  return new Date(date.getFullYear(), date.getMonth());
	};
	
	var getMonthTimestamp = function getMonthTimestamp(time) {
	  if (typeof time === 'number' || typeof time === 'string') {
	    return clearDate(new Date(time)).getTime();
	  } else if (time instanceof Date) {
	    return clearDate(time).getTime();
	  } else {
	    return NaN;
	  }
	};
	/* harmony default export */ var month_tablevue_type_script_lang_js_ = ({
	  props: {
	    disabledDate: {},
	    value: {},
	    selectionMode: {
	      default: 'month'
	    },
	    minDate: {},
	
	    maxDate: {},
	    defaultValue: {
	      validator: function validator(val) {
	        // null or valid Date Object
	        return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
	      }
	    },
	    date: {},
	    rangeState: {
	      default: function _default() {
	        return {
	          endDate: null,
	          selecting: false
	        };
	      }
	    }
	  },
	
	  mixins: [locale_default.a],
	
	  watch: {
	    'rangeState.endDate': function rangeStateEndDate(newVal) {
	      this.markRange(this.minDate, newVal);
	    },
	    minDate: function minDate(newVal, oldVal) {
	      if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
	        this.markRange(this.minDate, this.maxDate);
	      }
	    },
	    maxDate: function maxDate(newVal, oldVal) {
	      if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
	        this.markRange(this.minDate, this.maxDate);
	      }
	    }
	  },
	
	  data: function data() {
	    return {
	      months: ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'],
	      tableRows: [[], [], []],
	      lastRow: null,
	      lastColumn: null
	    };
	  },
	
	
	  methods: {
	    cellMatchesDate: function cellMatchesDate(cell, date) {
	      var value = new Date(date);
	      return this.date.getFullYear() === value.getFullYear() && Number(cell.text) === value.getMonth();
	    },
	    getCellStyle: function getCellStyle(cell) {
	      var _this = this;
	
	      var style = {};
	      var year = this.date.getFullYear();
	      var today = new Date();
	      var month = cell.text;
	      var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
	      style.disabled = typeof this.disabledDate === 'function' ? month_tablevue_type_script_lang_js_datesInMonth(year, month).every(this.disabledDate) : false;
	      style.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function (date) {
	        return date.getFullYear() === year && date.getMonth() === month;
	      }) >= 0;
	      style.today = today.getFullYear() === year && today.getMonth() === month;
	      style.default = defaultValue.some(function (date) {
	        return _this.cellMatchesDate(cell, date);
	      });
	
	      if (cell.inRange) {
	        style['in-range'] = true;
	
	        if (cell.start) {
	          style['start-date'] = true;
	        }
	
	        if (cell.end) {
	          style['end-date'] = true;
	        }
	      }
	      return style;
	    },
	    getMonthOfCell: function getMonthOfCell(month) {
	      var year = this.date.getFullYear();
	      return new Date(year, month, 1);
	    },
	    markRange: function markRange(minDate, maxDate) {
	      minDate = getMonthTimestamp(minDate);
	      maxDate = getMonthTimestamp(maxDate) || minDate;
	      var _ref = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
	      minDate = _ref[0];
	      maxDate = _ref[1];
	
	      var rows = this.rows;
	      for (var i = 0, k = rows.length; i < k; i++) {
	        var row = rows[i];
	        for (var j = 0, l = row.length; j < l; j++) {
	
	          var cell = row[j];
	          var index = i * 4 + j;
	          var time = new Date(this.date.getFullYear(), index).getTime();
	
	          cell.inRange = minDate && time >= minDate && time <= maxDate;
	          cell.start = minDate && time === minDate;
	          cell.end = maxDate && time === maxDate;
	        }
	      }
	    },
	    handleMouseMove: function handleMouseMove(event) {
	      if (!this.rangeState.selecting) return;
	
	      var target = event.target;
	      if (target.tagName === 'A') {
	        target = target.parentNode.parentNode;
	      }
	      if (target.tagName === 'DIV') {
	        target = target.parentNode;
	      }
	      if (target.tagName !== 'TD') return;
	
	      var row = target.parentNode.rowIndex;
	      var column = target.cellIndex;
	      // can not select disabled date
	      if (this.rows[row][column].disabled) return;
	
	      // only update rangeState when mouse moves to a new cell
	      // this avoids frequent Date object creation and improves performance
	      if (row !== this.lastRow || column !== this.lastColumn) {
	        this.lastRow = row;
	        this.lastColumn = column;
	        this.$emit('changerange', {
	          minDate: this.minDate,
	          maxDate: this.maxDate,
	          rangeState: {
	            selecting: true,
	            endDate: this.getMonthOfCell(row * 4 + column)
	          }
	        });
	      }
	    },
	    handleMonthTableClick: function handleMonthTableClick(event) {
	      var target = event.target;
	      if (target.tagName === 'A') {
	        target = target.parentNode.parentNode;
	      }
	      if (target.tagName === 'DIV') {
	        target = target.parentNode;
	      }
	      if (target.tagName !== 'TD') return;
	      if (Object(dom_["hasClass"])(target, 'disabled')) return;
	      var column = target.cellIndex;
	      var row = target.parentNode.rowIndex;
	      var month = row * 4 + column;
	      var newDate = this.getMonthOfCell(month);
	      if (this.selectionMode === 'range') {
	        if (!this.rangeState.selecting) {
	          this.$emit('pick', { minDate: newDate, maxDate: null });
	          this.rangeState.selecting = true;
	        } else {
	          if (newDate >= this.minDate) {
	            this.$emit('pick', { minDate: this.minDate, maxDate: newDate });
	          } else {
	            this.$emit('pick', { minDate: newDate, maxDate: this.minDate });
	          }
	          this.rangeState.selecting = false;
	        }
	      } else {
	        this.$emit('pick', month);
	      }
	    }
	  },
	
	  computed: {
	    rows: function rows() {
	      var _this2 = this;
	
	      // TODO: refactory rows / getCellClasses
	      var rows = this.tableRows;
	      var disabledDate = this.disabledDate;
	      var selectedDate = [];
	      var now = getMonthTimestamp(new Date());
	
	      for (var i = 0; i < 3; i++) {
	        var row = rows[i];
	
	        var _loop = function _loop(j) {
	          var cell = row[j];
	          if (!cell) {
	            cell = { row: i, column: j, type: 'normal', inRange: false, start: false, end: false };
	          }
	
	          cell.type = 'normal';
	
	          var index = i * 4 + j;
	          var time = new Date(_this2.date.getFullYear(), index).getTime();
	          cell.inRange = time >= getMonthTimestamp(_this2.minDate) && time <= getMonthTimestamp(_this2.maxDate);
	          cell.start = _this2.minDate && time === getMonthTimestamp(_this2.minDate);
	          cell.end = _this2.maxDate && time === getMonthTimestamp(_this2.maxDate);
	          var isToday = time === now;
	
	          if (isToday) {
	            cell.type = 'today';
	          }
	          cell.text = index;
	          var cellDate = new Date(time);
	          cell.disabled = typeof disabledDate === 'function' && disabledDate(cellDate);
	          cell.selected = Object(util_["arrayFind"])(selectedDate, function (date) {
	            return date.getTime() === cellDate.getTime();
	          });
	
	          _this2.$set(row, j, cell);
	        };
	
	        for (var j = 0; j < 4; j++) {
	          _loop(j);
	        }
	      }
	      return rows;
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/month-table.vue?vue&type=script&lang=js&
	 /* harmony default export */ var basic_month_tablevue_type_script_lang_js_ = (month_tablevue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/month-table.vue
	
	
	
	
	
	/* normalize component */
	
	var month_table_component = Object(componentNormalizer["a" /* default */])(
	  basic_month_tablevue_type_script_lang_js_,
	  month_tablevue_type_template_id_654d4f42_render,
	  month_tablevue_type_template_id_654d4f42_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var month_table_api; }
	month_table_component.options.__file = "packages/date-picker/src/basic/month-table.vue"
	/* harmony default export */ var month_table = (month_table_component.exports);
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/date-table.vue?vue&type=template&id=5d1f3341&
	var date_tablevue_type_template_id_5d1f3341_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "table",
	    {
	      staticClass: "el-date-table",
	      class: { "is-week-mode": _vm.selectionMode === "week" },
	      attrs: { cellspacing: "0", cellpadding: "0" },
	      on: { click: _vm.handleClick, mousemove: _vm.handleMouseMove }
	    },
	    [
	      _c(
	        "tbody",
	        [
	          _c(
	            "tr",
	            [
	              _vm.showWeekNumber
	                ? _c("th", [_vm._v(_vm._s(_vm.t("el.datepicker.week")))])
	                : _vm._e(),
	              _vm._l(_vm.WEEKS, function(week, key) {
	                return _c("th", { key: key }, [
	                  _vm._v(_vm._s(_vm.t("el.datepicker.weeks." + week)))
	                ])
	              })
	            ],
	            2
	          ),
	          _vm._l(_vm.rows, function(row, key) {
	            return _c(
	              "tr",
	              {
	                key: key,
	                staticClass: "el-date-table__row",
	                class: { current: _vm.isWeekActive(row[1]) }
	              },
	              _vm._l(row, function(cell, key) {
	                return _c("td", { key: key, class: _vm.getCellClasses(cell) }, [
	                  _c("div", [
	                    _c("span", [
	                      _vm._v("\n          " + _vm._s(cell.text) + "\n        ")
	                    ])
	                  ])
	                ])
	              }),
	              0
	            )
	          })
	        ],
	        2
	      )
	    ]
	  )
	}
	var date_tablevue_type_template_id_5d1f3341_staticRenderFns = []
	date_tablevue_type_template_id_5d1f3341_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/date-table.vue?vue&type=template&id=5d1f3341&
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/basic/date-table.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	var _WEEKS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
	var date_tablevue_type_script_lang_js_getDateTimestamp = function getDateTimestamp(time) {
	  if (typeof time === 'number' || typeof time === 'string') {
	    return Object(date_util_["clearTime"])(new Date(time)).getTime();
	  } else if (time instanceof Date) {
	    return Object(date_util_["clearTime"])(time).getTime();
	  } else {
	    return NaN;
	  }
	};
	
	// remove the first element that satisfies `pred` from arr
	// return a new array if modification occurs
	// return the original array otherwise
	var date_tablevue_type_script_lang_js_removeFromArray = function removeFromArray(arr, pred) {
	  var idx = typeof pred === 'function' ? Object(util_["arrayFindIndex"])(arr, pred) : arr.indexOf(pred);
	  return idx >= 0 ? [].concat(arr.slice(0, idx), arr.slice(idx + 1)) : arr;
	};
	
	/* harmony default export */ var date_tablevue_type_script_lang_js_ = ({
	  mixins: [locale_default.a],
	
	  props: {
	    firstDayOfWeek: {
	      default: 7,
	      type: Number,
	      validator: function validator(val) {
	        return val >= 1 && val <= 7;
	      }
	    },
	
	    value: {},
	
	    defaultValue: {
	      validator: function validator(val) {
	        // either: null, valid Date object, Array of valid Date objects
	        return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
	      }
	    },
	
	    date: {},
	
	    selectionMode: {
	      default: 'day'
	    },
	
	    showWeekNumber: {
	      type: Boolean,
	      default: false
	    },
	
	    disabledDate: {},
	
	    cellClassName: {},
	
	    minDate: {},
	
	    maxDate: {},
	
	    rangeState: {
	      default: function _default() {
	        return {
	          endDate: null,
	          selecting: false
	        };
	      }
	    }
	  },
	
	  computed: {
	    offsetDay: function offsetDay() {
	      var week = this.firstDayOfWeek;
	      // 周日为界限，左右偏移的天数，3217654 例如周一就是 -1，目的是调整前两行日期的位置
	      return week > 3 ? 7 - week : -week;
	    },
	    WEEKS: function WEEKS() {
	      var week = this.firstDayOfWeek;
	      return _WEEKS.concat(_WEEKS).slice(week, week + 7);
	    },
	    year: function year() {
	      return this.date.getFullYear();
	    },
	    month: function month() {
	      return this.date.getMonth();
	    },
	    startDate: function startDate() {
	      return Object(date_util_["getStartDateOfMonth"])(this.year, this.month);
	    },
	    rows: function rows() {
	      var _this = this;
	
	      // TODO: refactory rows / getCellClasses
	      var date = new Date(this.year, this.month, 1);
	      var day = Object(date_util_["getFirstDayOfMonth"])(date); // day of first day
	      var dateCountOfMonth = Object(date_util_["getDayCountOfMonth"])(date.getFullYear(), date.getMonth());
	      var dateCountOfLastMonth = Object(date_util_["getDayCountOfMonth"])(date.getFullYear(), date.getMonth() === 0 ? 11 : date.getMonth() - 1);
	
	      day = day === 0 ? 7 : day;
	
	      var offset = this.offsetDay;
	      var rows = this.tableRows;
	      var count = 1;
	
	      var startDate = this.startDate;
	      var disabledDate = this.disabledDate;
	      var cellClassName = this.cellClassName;
	      var selectedDate = this.selectionMode === 'dates' ? Object(util_["coerceTruthyValueToArray"])(this.value) : [];
	      var now = date_tablevue_type_script_lang_js_getDateTimestamp(new Date());
	
	      for (var i = 0; i < 6; i++) {
	        var row = rows[i];
	
	        if (this.showWeekNumber) {
	          if (!row[0]) {
	            row[0] = { type: 'week', text: Object(date_util_["getWeekNumber"])(Object(date_util_["nextDate"])(startDate, i * 7 + 1)) };
	          }
	        }
	
	        var _loop = function _loop(j) {
	          var cell = row[_this.showWeekNumber ? j + 1 : j];
	          if (!cell) {
	            cell = { row: i, column: j, type: 'normal', inRange: false, start: false, end: false };
	          }
	
	          cell.type = 'normal';
	
	          var index = i * 7 + j;
	          var time = Object(date_util_["nextDate"])(startDate, index - offset).getTime();
	          cell.inRange = time >= date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate) && time <= date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
	          cell.start = _this.minDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate);
	          cell.end = _this.maxDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
	          var isToday = time === now;
	
	          if (isToday) {
	            cell.type = 'today';
	          }
	
	          if (i >= 0 && i <= 1) {
	            var numberOfDaysFromPreviousMonth = day + offset < 0 ? 7 + day + offset : day + offset;
	
	            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {
	              cell.text = count++;
	            } else {
	              cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j % 7) + 1 + i * 7;
	              cell.type = 'prev-month';
	            }
	          } else {
	            if (count <= dateCountOfMonth) {
	              cell.text = count++;
	            } else {
	              cell.text = count++ - dateCountOfMonth;
	              cell.type = 'next-month';
	            }
	          }
	
	          var cellDate = new Date(time);
	          cell.disabled = typeof disabledDate === 'function' && disabledDate(cellDate);
	          cell.selected = Object(util_["arrayFind"])(selectedDate, function (date) {
	            return date.getTime() === cellDate.getTime();
	          });
	          cell.customClass = typeof cellClassName === 'function' && cellClassName(cellDate);
	          _this.$set(row, _this.showWeekNumber ? j + 1 : j, cell);
	        };
	
	        for (var j = 0; j < 7; j++) {
	          _loop(j);
	        }
	
	        if (this.selectionMode === 'week') {
	          var start = this.showWeekNumber ? 1 : 0;
	          var end = this.showWeekNumber ? 7 : 6;
	          var isWeekActive = this.isWeekActive(row[start + 1]);
	
	          row[start].inRange = isWeekActive;
	          row[start].start = isWeekActive;
	          row[end].inRange = isWeekActive;
	          row[end].end = isWeekActive;
	        }
	      }
	
	      return rows;
	    }
	  },
	
	  watch: {
	    'rangeState.endDate': function rangeStateEndDate(newVal) {
	      this.markRange(this.minDate, newVal);
	    },
	    minDate: function minDate(newVal, oldVal) {
	      if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
	        this.markRange(this.minDate, this.maxDate);
	      }
	    },
	    maxDate: function maxDate(newVal, oldVal) {
	      if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
	        this.markRange(this.minDate, this.maxDate);
	      }
	    }
	  },
	
	  data: function data() {
	    return {
	      tableRows: [[], [], [], [], [], []],
	      lastRow: null,
	      lastColumn: null
	    };
	  },
	
	
	  methods: {
	    cellMatchesDate: function cellMatchesDate(cell, date) {
	      var value = new Date(date);
	      return this.year === value.getFullYear() && this.month === value.getMonth() && Number(cell.text) === value.getDate();
	    },
	    getCellClasses: function getCellClasses(cell) {
	      var _this2 = this;
	
	      var selectionMode = this.selectionMode;
	      var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
	
	      var classes = [];
	      if ((cell.type === 'normal' || cell.type === 'today') && !cell.disabled) {
	        classes.push('available');
	        if (cell.type === 'today') {
	          classes.push('today');
	        }
	      } else {
	        classes.push(cell.type);
	      }
	
	      if (cell.type === 'normal' && defaultValue.some(function (date) {
	        return _this2.cellMatchesDate(cell, date);
	      })) {
	        classes.push('default');
	      }
	
	      if (selectionMode === 'day' && (cell.type === 'normal' || cell.type === 'today') && this.cellMatchesDate(cell, this.value)) {
	        classes.push('current');
	      }
	
	      if (cell.inRange && (cell.type === 'normal' || cell.type === 'today' || this.selectionMode === 'week')) {
	        classes.push('in-range');
	
	        if (cell.start) {
	          classes.push('start-date');
	        }
	
	        if (cell.end) {
	          classes.push('end-date');
	        }
	      }
	
	      if (cell.disabled) {
	        classes.push('disabled');
	      }
	
	      if (cell.selected) {
	        classes.push('selected');
	      }
	
	      if (cell.customClass) {
	        classes.push(cell.customClass);
	      }
	
	      return classes.join(' ');
	    },
	    getDateOfCell: function getDateOfCell(row, column) {
	      var offsetFromStart = row * 7 + (column - (this.showWeekNumber ? 1 : 0)) - this.offsetDay;
	      return Object(date_util_["nextDate"])(this.startDate, offsetFromStart);
	    },
	    isWeekActive: function isWeekActive(cell) {
	      if (this.selectionMode !== 'week') return false;
	      var newDate = new Date(this.year, this.month, 1);
	      var year = newDate.getFullYear();
	      var month = newDate.getMonth();
	
	      if (cell.type === 'prev-month') {
	        newDate.setMonth(month === 0 ? 11 : month - 1);
	        newDate.setFullYear(month === 0 ? year - 1 : year);
	      }
	
	      if (cell.type === 'next-month') {
	        newDate.setMonth(month === 11 ? 0 : month + 1);
	        newDate.setFullYear(month === 11 ? year + 1 : year);
	      }
	
	      newDate.setDate(parseInt(cell.text, 10));
	
	      if (Object(date_util_["isDate"])(this.value)) {
	        var dayOffset = (this.value.getDay() - this.firstDayOfWeek + 7) % 7 - 1;
	        var weekDate = Object(date_util_["prevDate"])(this.value, dayOffset);
	        return weekDate.getTime() === newDate.getTime();
	      }
	      return false;
	    },
	    markRange: function markRange(minDate, maxDate) {
	      minDate = date_tablevue_type_script_lang_js_getDateTimestamp(minDate);
	      maxDate = date_tablevue_type_script_lang_js_getDateTimestamp(maxDate) || minDate;
	      var _ref = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
	      minDate = _ref[0];
	      maxDate = _ref[1];
	
	
	      var startDate = this.startDate;
	      var rows = this.rows;
	      for (var i = 0, k = rows.length; i < k; i++) {
	        var row = rows[i];
	        for (var j = 0, l = row.length; j < l; j++) {
	          if (this.showWeekNumber && j === 0) continue;
	
	          var _cell = row[j];
	          var index = i * 7 + j + (this.showWeekNumber ? -1 : 0);
	          var time = Object(date_util_["nextDate"])(startDate, index - this.offsetDay).getTime();
	
	          _cell.inRange = minDate && time >= minDate && time <= maxDate;
	          _cell.start = minDate && time === minDate;
	          _cell.end = maxDate && time === maxDate;
	        }
	      }
	    },
	    handleMouseMove: function handleMouseMove(event) {
	      if (!this.rangeState.selecting) return;
	
	      var target = event.target;
	      if (target.tagName === 'SPAN') {
	        target = target.parentNode.parentNode;
	      }
	      if (target.tagName === 'DIV') {
	        target = target.parentNode;
	      }
	      if (target.tagName !== 'TD') return;
	
	      var row = target.parentNode.rowIndex - 1;
	      var column = target.cellIndex;
	
	      // can not select disabled date
	      if (this.rows[row][column].disabled) return;
	
	      // only update rangeState when mouse moves to a new cell
	      // this avoids frequent Date object creation and improves performance
	      if (row !== this.lastRow || column !== this.lastColumn) {
	        this.lastRow = row;
	        this.lastColumn = column;
	        this.$emit('changerange', {
	          minDate: this.minDate,
	          maxDate: this.maxDate,
	          rangeState: {
	            selecting: true,
	            endDate: this.getDateOfCell(row, column)
	          }
	        });
	      }
	    },
	    handleClick: function handleClick(event) {
	      var target = event.target;
	      if (target.tagName === 'SPAN') {
	        target = target.parentNode.parentNode;
	      }
	      if (target.tagName === 'DIV') {
	        target = target.parentNode;
	      }
	
	      if (target.tagName !== 'TD') return;
	
	      var row = target.parentNode.rowIndex - 1;
	      var column = this.selectionMode === 'week' ? 1 : target.cellIndex;
	      var cell = this.rows[row][column];
	
	      if (cell.disabled || cell.type === 'week') return;
	
	      var newDate = this.getDateOfCell(row, column);
	
	      if (this.selectionMode === 'range') {
	        if (!this.rangeState.selecting) {
	          this.$emit('pick', { minDate: newDate, maxDate: null });
	          this.rangeState.selecting = true;
	        } else {
	          if (newDate >= this.minDate) {
	            this.$emit('pick', { minDate: this.minDate, maxDate: newDate });
	          } else {
	            this.$emit('pick', { minDate: newDate, maxDate: this.minDate });
	          }
	          this.rangeState.selecting = false;
	        }
	      } else if (this.selectionMode === 'day') {
	        this.$emit('pick', newDate);
	      } else if (this.selectionMode === 'week') {
	        var weekNumber = Object(date_util_["getWeekNumber"])(newDate);
	        var value = newDate.getFullYear() + 'w' + weekNumber;
	        this.$emit('pick', {
	          year: newDate.getFullYear(),
	          week: weekNumber,
	          value: value,
	          date: newDate
	        });
	      } else if (this.selectionMode === 'dates') {
	        var _value = this.value || [];
	        var newValue = cell.selected ? date_tablevue_type_script_lang_js_removeFromArray(_value, function (date) {
	          return date.getTime() === newDate.getTime();
	        }) : [].concat(_value, [newDate]);
	        this.$emit('pick', newValue);
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/date-table.vue?vue&type=script&lang=js&
	 /* harmony default export */ var basic_date_tablevue_type_script_lang_js_ = (date_tablevue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/date-picker/src/basic/date-table.vue
	
	
	
	
	
	/* normalize component */
	
	var date_table_component = Object(componentNormalizer["a" /* default */])(
	  basic_date_tablevue_type_script_lang_js_,
	  date_tablevue_type_template_id_5d1f3341_render,
	  date_tablevue_type_template_id_5d1f3341_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var date_table_api; }
	date_table_component.options.__file = "packages/date-picker/src/basic/date-table.vue"
	/* harmony default export */ var date_table = (date_table_component.exports);
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/date.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	
	
	
	
	/* harmony default export */ var datevue_type_script_lang_js_ = ({
	  mixins: [locale_default.a],
	
	  directives: { Clickoutside: clickoutside_default.a },
	
	  watch: {
	    showTime: function showTime(val) {
	      var _this = this;
	
	      /* istanbul ignore if */
	      if (!val) return;
	      this.$nextTick(function (_) {
	        var inputElm = _this.$refs.input.$el;
	        if (inputElm) {
	          _this.pickerWidth = inputElm.getBoundingClientRect().width + 10;
	        }
	      });
	    },
	    value: function value(val) {
	      if (this.selectionMode === 'dates' && this.value) return;
	      if (Object(date_util_["isDate"])(val)) {
	        this.date = new Date(val);
	      } else {
	        this.date = this.getDefaultValue();
	      }
	    },
	    defaultValue: function defaultValue(val) {
	      if (!Object(date_util_["isDate"])(this.value)) {
	        this.date = val ? new Date(val) : new Date();
	      }
	    },
	    timePickerVisible: function timePickerVisible(val) {
	      var _this2 = this;
	
	      if (val) this.$nextTick(function () {
	        return _this2.$refs.timepicker.adjustSpinners();
	      });
	    },
	    selectionMode: function selectionMode(newVal) {
	      if (newVal === 'month') {
	        /* istanbul ignore next */
	        if (this.currentView !== 'year' || this.currentView !== 'month') {
	          this.currentView = 'month';
	        }
	      } else if (newVal === 'dates') {
	        this.currentView = 'date';
	      }
	    }
	  },
	
	  methods: {
	    proxyTimePickerDataProperties: function proxyTimePickerDataProperties() {
	      var _this3 = this;
	
	      var format = function format(timeFormat) {
	        _this3.$refs.timepicker.format = timeFormat;
	      };
	      var value = function value(_value) {
	        _this3.$refs.timepicker.value = _value;
	      };
	      var date = function date(_date) {
	        _this3.$refs.timepicker.date = _date;
	      };
	      var selectableRange = function selectableRange(_selectableRange) {
	        _this3.$refs.timepicker.selectableRange = _selectableRange;
	      };
	
	      this.$watch('value', value);
	      this.$watch('date', date);
	      this.$watch('selectableRange', selectableRange);
	
	      format(this.timeFormat);
	      value(this.value);
	      date(this.date);
	      selectableRange(this.selectableRange);
	    },
	    handleClear: function handleClear() {
	      this.date = this.getDefaultValue();
	      this.$emit('pick', null);
	    },
	    emit: function emit(value) {
	      var _this4 = this;
	
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      if (!value) {
	        this.$emit.apply(this, ['pick', value].concat(args));
	      } else if (Array.isArray(value)) {
	        var dates = value.map(function (date) {
	          return _this4.showTime ? Object(date_util_["clearMilliseconds"])(date) : Object(date_util_["clearTime"])(date);
	        });
	        this.$emit.apply(this, ['pick', dates].concat(args));
	      } else {
	        this.$emit.apply(this, ['pick', this.showTime ? Object(date_util_["clearMilliseconds"])(value) : Object(date_util_["clearTime"])(value)].concat(args));
	      }
	      this.userInputDate = null;
	      this.userInputTime = null;
	    },
	
	
	    // resetDate() {
	    //   this.date = new Date(this.date);
	    // },
	
	    showMonthPicker: function showMonthPicker() {
	      this.currentView = 'month';
	    },
	    showYearPicker: function showYearPicker() {
	      this.currentView = 'year';
	    },
	
	
	    // XXX: 没用到
	    // handleLabelClick() {
	    //   if (this.currentView === 'date') {
	    //     this.showMonthPicker();
	    //   } else if (this.currentView === 'month') {
	    //     this.showYearPicker();
	    //   }
	    // },
	
	    prevMonth: function prevMonth() {
	      this.date = Object(date_util_["prevMonth"])(this.date);
	    },
	    nextMonth: function nextMonth() {
	      this.date = Object(date_util_["nextMonth"])(this.date);
	    },
	    prevYear: function prevYear() {
	      if (this.currentView === 'year') {
	        this.date = Object(date_util_["prevYear"])(this.date, 10);
	      } else {
	        this.date = Object(date_util_["prevYear"])(this.date);
	      }
	    },
	    nextYear: function nextYear() {
	      if (this.currentView === 'year') {
	        this.date = Object(date_util_["nextYear"])(this.date, 10);
	      } else {
	        this.date = Object(date_util_["nextYear"])(this.date);
	      }
	    },
	    handleShortcutClick: function handleShortcutClick(shortcut) {
	      if (shortcut.onClick) {
	        shortcut.onClick(this);
	      }
	    },
	    handleTimePick: function handleTimePick(value, visible, first) {
	      if (Object(date_util_["isDate"])(value)) {
	        var newDate = this.value ? Object(date_util_["modifyTime"])(this.value, value.getHours(), value.getMinutes(), value.getSeconds()) : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
	        this.date = newDate;
	        this.emit(this.date, true);
	      } else {
	        this.emit(value, true);
	      }
	      if (!first) {
	        this.timePickerVisible = visible;
	      }
	    },
	    handleTimePickClose: function handleTimePickClose() {
	      this.timePickerVisible = false;
	    },
	    handleMonthPick: function handleMonthPick(month) {
	      if (this.selectionMode === 'month') {
	        this.date = Object(date_util_["modifyDate"])(this.date, this.year, month, 1);
	        this.emit(this.date);
	      } else {
	        this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, this.year, month);
	        // TODO: should emit intermediate value ??
	        // this.emit(this.date);
	        this.currentView = 'date';
	      }
	    },
	    handleDatePick: function handleDatePick(value) {
	      if (this.selectionMode === 'day') {
	        var newDate = this.value ? Object(date_util_["modifyDate"])(this.value, value.getFullYear(), value.getMonth(), value.getDate()) : Object(date_util_["modifyWithTimeString"])(value, this.defaultTime);
	        // change default time while out of selectableRange
	        if (!this.checkDateWithinRange(newDate)) {
	          newDate = Object(date_util_["modifyDate"])(this.selectableRange[0][0], value.getFullYear(), value.getMonth(), value.getDate());
	        }
	        this.date = newDate;
	        this.emit(this.date, this.showTime);
	      } else if (this.selectionMode === 'week') {
	        this.emit(value.date);
	      } else if (this.selectionMode === 'dates') {
	        this.emit(value, true); // set false to keep panel open
	      }
	    },
	    handleYearPick: function handleYearPick(year) {
	      if (this.selectionMode === 'year') {
	        this.date = Object(date_util_["modifyDate"])(this.date, year, 0, 1);
	        this.emit(this.date);
	      } else {
	        this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, year, this.month);
	        // TODO: should emit intermediate value ??
	        // this.emit(this.date, true);
	        this.currentView = 'month';
	      }
	    },
	    changeToNow: function changeToNow() {
	      // NOTE: not a permanent solution
	      //       consider disable "now" button in the future
	      if ((!this.disabledDate || !this.disabledDate(new Date())) && this.checkDateWithinRange(new Date())) {
	        this.date = new Date();
	        this.emit(this.date);
	      }
	    },
	    confirm: function confirm() {
	      if (this.selectionMode === 'dates') {
	        this.emit(this.value);
	      } else {
	        // value were emitted in handle{Date,Time}Pick, nothing to update here
	        // deal with the scenario where: user opens the picker, then confirm without doing anything
	        var value = this.value ? this.value : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
	        this.date = new Date(value); // refresh date
	        this.emit(value);
	      }
	    },
	    resetView: function resetView() {
	      if (this.selectionMode === 'month') {
	        this.currentView = 'month';
	      } else if (this.selectionMode === 'year') {
	        this.currentView = 'year';
	      } else {
	        this.currentView = 'date';
	      }
	    },
	    handleEnter: function handleEnter() {
	      document.body.addEventListener('keydown', this.handleKeydown);
	    },
	    handleLeave: function handleLeave() {
	      this.$emit('dodestroy');
	      document.body.removeEventListener('keydown', this.handleKeydown);
	    },
	    handleKeydown: function handleKeydown(event) {
	      var keyCode = event.keyCode;
	      var list = [38, 40, 37, 39];
	      if (this.visible && !this.timePickerVisible) {
	        if (list.indexOf(keyCode) !== -1) {
	          this.handleKeyControl(keyCode);
	          event.stopPropagation();
	          event.preventDefault();
	        }
	        if (keyCode === 13 && this.userInputDate === null && this.userInputTime === null) {
	          // Enter
	          this.emit(this.date, false);
	        }
	      }
	    },
	    handleKeyControl: function handleKeyControl(keyCode) {
	      var mapping = {
	        'year': {
	          38: -4, 40: 4, 37: -1, 39: 1, offset: function offset(date, step) {
	            return date.setFullYear(date.getFullYear() + step);
	          }
	        },
	        'month': {
	          38: -4, 40: 4, 37: -1, 39: 1, offset: function offset(date, step) {
	            return date.setMonth(date.getMonth() + step);
	          }
	        },
	        'week': {
	          38: -1, 40: 1, 37: -1, 39: 1, offset: function offset(date, step) {
	            return date.setDate(date.getDate() + step * 7);
	          }
	        },
	        'day': {
	          38: -7, 40: 7, 37: -1, 39: 1, offset: function offset(date, step) {
	            return date.setDate(date.getDate() + step);
	          }
	        }
	      };
	      var mode = this.selectionMode;
	      var year = 3.1536e10;
	      var now = this.date.getTime();
	      var newDate = new Date(this.date.getTime());
	      while (Math.abs(now - newDate.getTime()) <= year) {
	        var map = mapping[mode];
	        map.offset(newDate, map[keyCode]);
	        if (typeof this.disabledDate === 'function' && this.disabledDate(newDate)) {
	          continue;
	        }
	        this.date = newDate;
	        this.$emit('pick', newDate, true);
	        break;
	      }
	    },
	    handleVisibleTimeChange: function handleVisibleTimeChange(value) {
	      var time = Object(date_util_["parseDate"])(value, this.timeFormat);
	      if (time && this.checkDateWithinRange(time)) {
	        this.date = Object(date_util_["modifyDate"])(time, this.year, this.month, this.monthDate);
	        this.userInputTime = null;
	        this.$refs.timepicker.value = this.date;
	        this.timePickerVisible = false;
	        this.emit(this.date, true);
	      }
	    },
	    handleVisibleDateChange: function handleVisibleDateChange(value) {
	      var date = Object(date_util_["parseDate"])(value, this.dateFormat);
	      if (date) {
	        if (typeof this.disabledDate === 'function' && this.disabledDate(date)) {
	          return;
	        }
	        this.date = Object(date_util_["modifyTime"])(date, this.date.getHours(), this.date.getMinutes(), this.date.getSeconds());
	        this.userInputDate = null;
	        this.resetView();
	        this.emit(this.date, true);
	      }
	    },
	    isValidValue: function isValidValue(value) {
	      return value && !isNaN(value) && (typeof this.disabledDate === 'function' ? !this.disabledDate(value) : true) && this.checkDateWithinRange(value);
	    },
	    getDefaultValue: function getDefaultValue() {
	      // if default-value is set, return it
	      // otherwise, return now (the moment this method gets called)
	      return this.defaultValue ? new Date(this.defaultValue) : new Date();
	    },
	    checkDateWithinRange: function checkDateWithinRange(date) {
	      return this.selectableRange.length > 0 ? Object(date_util_["timeWithinRange"])(date, this.selectableRange, this.format || 'HH:mm:ss') : true;
	    }
	  },
	
	  components: {
	    TimePicker: panel_time["a" /* default */], YearTable: year_table, MonthTable: month_table, DateTable: date_table, ElInput: input_default.a, ElButton: button_default.a
	  },
	
	  data: function data() {
	    return {
	      popperClass: '',
	      date: new Date(),
	      value: '',
	      defaultValue: null, // use getDefaultValue() for time computation
	      defaultTime: null,
	      showTime: false,
	      selectionMode: 'day',
	      shortcuts: '',
	      visible: false,
	      currentView: 'date',
	      disabledDate: '',
	      cellClassName: '',
	      selectableRange: [],
	      firstDayOfWeek: 7,
	      showWeekNumber: false,
	      timePickerVisible: false,
	      format: '',
	      arrowControl: false,
	      userInputDate: null,
	      userInputTime: null
	    };
	  },
	
	
	  computed: {
	    year: function year() {
	      return this.date.getFullYear();
	    },
	    month: function month() {
	      return this.date.getMonth();
	    },
	    week: function week() {
	      return Object(date_util_["getWeekNumber"])(this.date);
	    },
	    monthDate: function monthDate() {
	      return this.date.getDate();
	    },
	    footerVisible: function footerVisible() {
	      return this.showTime || this.selectionMode === 'dates';
	    },
	    visibleTime: function visibleTime() {
	      if (this.userInputTime !== null) {
	        return this.userInputTime;
	      } else {
	        return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.timeFormat);
	      }
	    },
	    visibleDate: function visibleDate() {
	      if (this.userInputDate !== null) {
	        return this.userInputDate;
	      } else {
	        return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.dateFormat);
	      }
	    },
	    yearLabel: function yearLabel() {
	      var yearTranslation = this.t('el.datepicker.year');
	      if (this.currentView === 'year') {
	        var startYear = Math.floor(this.year / 10) * 10;
	        if (yearTranslation) {
	          return startYear + ' ' + yearTranslation + ' - ' + (startYear + 9) + ' ' + yearTranslation;
	        }
	        return startYear + ' - ' + (startYear + 9);
	      }
	      return this.year + ' ' + yearTranslation;
	    },
	    timeFormat: function timeFormat() {
	      if (this.format) {
	        return Object(date_util_["extractTimeFormat"])(this.format);
	      } else {
	        return 'HH:mm:ss';
	      }
	    },
	    dateFormat: function dateFormat() {
	      if (this.format) {
	        return Object(date_util_["extractDateFormat"])(this.format);
	      } else {
	        return 'yyyy-MM-dd';
	      }
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/date.vue?vue&type=script&lang=js&
	 /* harmony default export */ var panel_datevue_type_script_lang_js_ = (datevue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/date.vue
	
	
	
	
	
	/* normalize component */
	
	var date_component = Object(componentNormalizer["a" /* default */])(
	  panel_datevue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var date_api; }
	date_component.options.__file = "packages/date-picker/src/panel/date.vue"
	/* harmony default export */ var panel_date = (date_component.exports);
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/date-range.vue?vue&type=template&id=2652849a&
	var date_rangevue_type_template_id_2652849a_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "transition",
	    {
	      attrs: { name: "el-zoom-in-top" },
	      on: {
	        "after-leave": function($event) {
	          _vm.$emit("dodestroy")
	        }
	      }
	    },
	    [
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.visible,
	              expression: "visible"
	            }
	          ],
	          staticClass: "el-picker-panel el-date-range-picker el-popper",
	          class: [
	            {
	              "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
	              "has-time": _vm.showTime
	            },
	            _vm.popperClass
	          ]
	        },
	        [
	          _c(
	            "div",
	            { staticClass: "el-picker-panel__body-wrapper" },
	            [
	              _vm._t("sidebar"),
	              _vm.shortcuts
	                ? _c(
	                    "div",
	                    { staticClass: "el-picker-panel__sidebar" },
	                    _vm._l(_vm.shortcuts, function(shortcut, key) {
	                      return _c(
	                        "button",
	                        {
	                          key: key,
	                          staticClass: "el-picker-panel__shortcut",
	                          attrs: { type: "button" },
	                          on: {
	                            click: function($event) {
	                              _vm.handleShortcutClick(shortcut)
	                            }
	                          }
	                        },
	                        [_vm._v(_vm._s(shortcut.text))]
	                      )
	                    }),
	                    0
	                  )
	                : _vm._e(),
	              _c("div", { staticClass: "el-picker-panel__body" }, [
	                _vm.showTime
	                  ? _c(
	                      "div",
	                      { staticClass: "el-date-range-picker__time-header" },
	                      [
	                        _c(
	                          "span",
	                          { staticClass: "el-date-range-picker__editors-wrap" },
	                          [
	                            _c(
	                              "span",
	                              {
	                                staticClass:
	                                  "el-date-range-picker__time-picker-wrap"
	                              },
	                              [
	                                _c("el-input", {
	                                  ref: "minInput",
	                                  staticClass: "el-date-range-picker__editor",
	                                  attrs: {
	                                    size: "small",
	                                    disabled: _vm.rangeState.selecting,
	                                    placeholder: _vm.t(
	                                      "el.datepicker.startDate"
	                                    ),
	                                    value: _vm.minVisibleDate
	                                  },
	                                  on: {
	                                    input: function(val) {
	                                      return _vm.handleDateInput(val, "min")
	                                    },
	                                    change: function(val) {
	                                      return _vm.handleDateChange(val, "min")
	                                    }
	                                  }
	                                })
	                              ],
	                              1
	                            ),
	                            _c(
	                              "span",
	                              {
	                                directives: [
	                                  {
	                                    name: "clickoutside",
	                                    rawName: "v-clickoutside",
	                                    value: _vm.handleMinTimeClose,
	                                    expression: "handleMinTimeClose"
	                                  }
	                                ],
	                                staticClass:
	                                  "el-date-range-picker__time-picker-wrap"
	                              },
	                              [
	                                _c("el-input", {
	                                  staticClass: "el-date-range-picker__editor",
	                                  attrs: {
	                                    size: "small",
	                                    disabled: _vm.rangeState.selecting,
	                                    placeholder: _vm.t(
	                                      "el.datepicker.startTime"
	                                    ),
	                                    value: _vm.minVisibleTime
	                                  },
	                                  on: {
	                                    focus: function($event) {
	                                      _vm.minTimePickerVisible = true
	                                    },
	                                    input: function(val) {
	                                      return _vm.handleTimeInput(val, "min")
	                                    },
	                                    change: function(val) {
	                                      return _vm.handleTimeChange(val, "min")
	                                    }
	                                  }
	                                }),
	                                _c("time-picker", {
	                                  ref: "minTimePicker",
	                                  attrs: {
	                                    "time-arrow-control": _vm.arrowControl,
	                                    visible: _vm.minTimePickerVisible
	                                  },
	                                  on: {
	                                    pick: _vm.handleMinTimePick,
	                                    mounted: function($event) {
	                                      _vm.$refs.minTimePicker.format =
	                                        _vm.timeFormat
	                                    }
	                                  }
	                                })
	                              ],
	                              1
	                            )
	                          ]
	                        ),
	                        _c("span", { staticClass: "el-icon-arrow-right" }),
	                        _c(
	                          "span",
	                          {
	                            staticClass:
	                              "el-date-range-picker__editors-wrap is-right"
	                          },
	                          [
	                            _c(
	                              "span",
	                              {
	                                staticClass:
	                                  "el-date-range-picker__time-picker-wrap"
	                              },
	                              [
	                                _c("el-input", {
	                                  staticClass: "el-date-range-picker__editor",
	                                  attrs: {
	                                    size: "small",
	                                    disabled: _vm.rangeState.selecting,
	                                    placeholder: _vm.t("el.datepicker.endDate"),
	                                    value: _vm.maxVisibleDate,
	                                    readonly: !_vm.minDate
	                                  },
	                                  on: {
	                                    input: function(val) {
	                                      return _vm.handleDateInput(val, "max")
	                                    },
	                                    change: function(val) {
	                                      return _vm.handleDateChange(val, "max")
	                                    }
	                                  }
	                                })
	                              ],
	                              1
	                            ),
	                            _c(
	                              "span",
	                              {
	                                directives: [
	                                  {
	                                    name: "clickoutside",
	                                    rawName: "v-clickoutside",
	                                    value: _vm.handleMaxTimeClose,
	                                    expression: "handleMaxTimeClose"
	                                  }
	                                ],
	                                staticClass:
	                                  "el-date-range-picker__time-picker-wrap"
	                              },
	                              [
	                                _c("el-input", {
	                                  staticClass: "el-date-range-picker__editor",
	                                  attrs: {
	                                    size: "small",
	                                    disabled: _vm.rangeState.selecting,
	                                    placeholder: _vm.t("el.datepicker.endTime"),
	                                    value: _vm.maxVisibleTime,
	                                    readonly: !_vm.minDate
	                                  },
	                                  on: {
	                                    focus: function($event) {
	                                      _vm.minDate &&
	                                        (_vm.maxTimePickerVisible = true)
	                                    },
	                                    input: function(val) {
	                                      return _vm.handleTimeInput(val, "max")
	                                    },
	                                    change: function(val) {
	                                      return _vm.handleTimeChange(val, "max")
	                                    }
	                                  }
	                                }),
	                                _c("time-picker", {
	                                  ref: "maxTimePicker",
	                                  attrs: {
	                                    "time-arrow-control": _vm.arrowControl,
	                                    visible: _vm.maxTimePickerVisible
	                                  },
	                                  on: {
	                                    pick: _vm.handleMaxTimePick,
	                                    mounted: function($event) {
	                                      _vm.$refs.maxTimePicker.format =
	                                        _vm.timeFormat
	                                    }
	                                  }
	                                })
	                              ],
	                              1
	                            )
	                          ]
	                        )
	                      ]
	                    )
	                  : _vm._e(),
	                _c(
	                  "div",
	                  {
	                    staticClass:
	                      "el-picker-panel__content el-date-range-picker__content is-left"
	                  },
	                  [
	                    _c("div", { staticClass: "el-date-range-picker__header" }, [
	                      _c("button", {
	                        staticClass:
	                          "el-picker-panel__icon-btn el-icon-d-arrow-left",
	                        attrs: { type: "button" },
	                        on: { click: _vm.leftPrevYear }
	                      }),
	                      _c("button", {
	                        staticClass:
	                          "el-picker-panel__icon-btn el-icon-arrow-left",
	                        attrs: { type: "button" },
	                        on: { click: _vm.leftPrevMonth }
	                      }),
	                      _vm.unlinkPanels
	                        ? _c("button", {
	                            staticClass:
	                              "el-picker-panel__icon-btn el-icon-d-arrow-right",
	                            class: { "is-disabled": !_vm.enableYearArrow },
	                            attrs: {
	                              type: "button",
	                              disabled: !_vm.enableYearArrow
	                            },
	                            on: { click: _vm.leftNextYear }
	                          })
	                        : _vm._e(),
	                      _vm.unlinkPanels
	                        ? _c("button", {
	                            staticClass:
	                              "el-picker-panel__icon-btn el-icon-arrow-right",
	                            class: { "is-disabled": !_vm.enableMonthArrow },
	                            attrs: {
	                              type: "button",
	                              disabled: !_vm.enableMonthArrow
	                            },
	                            on: { click: _vm.leftNextMonth }
	                          })
	                        : _vm._e(),
	                      _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
	                    ]),
	                    _c("date-table", {
	                      attrs: {
	                        "selection-mode": "range",
	                        date: _vm.leftDate,
	                        "default-value": _vm.defaultValue,
	                        "min-date": _vm.minDate,
	                        "max-date": _vm.maxDate,
	                        "range-state": _vm.rangeState,
	                        "disabled-date": _vm.disabledDate,
	                        "cell-class-name": _vm.cellClassName,
	                        "first-day-of-week": _vm.firstDayOfWeek
	                      },
	                      on: {
	                        changerange: _vm.handleChangeRange,
	                        pick: _vm.handleRangePick
	                      }
	                    })
	                  ],
	                  1
	                ),
	                _c(
	                  "div",
	                  {
	                    staticClass:
	                      "el-picker-panel__content el-date-range-picker__content is-right"
	                  },
	                  [
	                    _c("div", { staticClass: "el-date-range-picker__header" }, [
	                      _vm.unlinkPanels
	                        ? _c("button", {
	                            staticClass:
	                              "el-picker-panel__icon-btn el-icon-d-arrow-left",
	                            class: { "is-disabled": !_vm.enableYearArrow },
	                            attrs: {
	                              type: "button",
	                              disabled: !_vm.enableYearArrow
	                            },
	                            on: { click: _vm.rightPrevYear }
	                          })
	                        : _vm._e(),
	                      _vm.unlinkPanels
	                        ? _c("button", {
	                            staticClass:
	                              "el-picker-panel__icon-btn el-icon-arrow-left",
	                            class: { "is-disabled": !_vm.enableMonthArrow },
	                            attrs: {
	                              type: "button",
	                              disabled: !_vm.enableMonthArrow
	                            },
	                            on: { click: _vm.rightPrevMonth }
	                          })
	                        : _vm._e(),
	                      _c("button", {
	                        staticClass:
	                          "el-picker-panel__icon-btn el-icon-d-arrow-right",
	                        attrs: { type: "button" },
	                        on: { click: _vm.rightNextYear }
	                      }),
	                      _c("button", {
	                        staticClass:
	                          "el-picker-panel__icon-btn el-icon-arrow-right",
	                        attrs: { type: "button" },
	                        on: { click: _vm.rightNextMonth }
	                      }),
	                      _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
	                    ]),
	                    _c("date-table", {
	                      attrs: {
	                        "selection-mode": "range",
	                        date: _vm.rightDate,
	                        "default-value": _vm.defaultValue,
	                        "min-date": _vm.minDate,
	                        "max-date": _vm.maxDate,
	                        "range-state": _vm.rangeState,
	                        "disabled-date": _vm.disabledDate,
	                        "cell-class-name": _vm.cellClassName,
	                        "first-day-of-week": _vm.firstDayOfWeek
	                      },
	                      on: {
	                        changerange: _vm.handleChangeRange,
	                        pick: _vm.handleRangePick
	                      }
	                    })
	                  ],
	                  1
	                )
	              ])
	            ],
	            2
	          ),
	          _vm.showTime
	            ? _c(
	                "div",
	                { staticClass: "el-picker-panel__footer" },
	                [
	                  _c(
	                    "el-button",
	                    {
	                      staticClass: "el-picker-panel__link-btn",
	                      attrs: { size: "mini", type: "text" },
	                      on: { click: _vm.handleClear }
	                    },
	                    [
	                      _vm._v(
	                        "\n        " +
	                          _vm._s(_vm.t("el.datepicker.clear")) +
	                          "\n      "
	                      )
	                    ]
	                  ),
	                  _c(
	                    "el-button",
	                    {
	                      staticClass: "el-picker-panel__link-btn",
	                      attrs: {
	                        plain: "",
	                        size: "mini",
	                        disabled: _vm.btnDisabled
	                      },
	                      on: {
	                        click: function($event) {
	                          _vm.handleConfirm(false)
	                        }
	                      }
	                    },
	                    [
	                      _vm._v(
	                        "\n        " +
	                          _vm._s(_vm.t("el.datepicker.confirm")) +
	                          "\n      "
	                      )
	                    ]
	                  )
	                ],
	                1
	              )
	            : _vm._e()
	        ]
	      )
	    ]
	  )
	}
	var date_rangevue_type_template_id_2652849a_staticRenderFns = []
	date_rangevue_type_template_id_2652849a_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/date-range.vue?vue&type=template&id=2652849a&
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/date-range.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	
	
	var date_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
	  if (Array.isArray(defaultValue)) {
	    return [new Date(defaultValue[0]), new Date(defaultValue[1])];
	  } else if (defaultValue) {
	    return [new Date(defaultValue), Object(date_util_["nextDate"])(new Date(defaultValue), 1)];
	  } else {
	    return [new Date(), Object(date_util_["nextDate"])(new Date(), 1)];
	  }
	};
	
	/* harmony default export */ var date_rangevue_type_script_lang_js_ = ({
	  mixins: [locale_default.a],
	
	  directives: { Clickoutside: clickoutside_default.a },
	
	  computed: {
	    btnDisabled: function btnDisabled() {
	      return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
	    },
	    leftLabel: function leftLabel() {
	      return this.leftDate.getFullYear() + ' ' + this.t('el.datepicker.year') + ' ' + this.t('el.datepicker.month' + (this.leftDate.getMonth() + 1));
	    },
	    rightLabel: function rightLabel() {
	      return this.rightDate.getFullYear() + ' ' + this.t('el.datepicker.year') + ' ' + this.t('el.datepicker.month' + (this.rightDate.getMonth() + 1));
	    },
	    leftYear: function leftYear() {
	      return this.leftDate.getFullYear();
	    },
	    leftMonth: function leftMonth() {
	      return this.leftDate.getMonth();
	    },
	    leftMonthDate: function leftMonthDate() {
	      return this.leftDate.getDate();
	    },
	    rightYear: function rightYear() {
	      return this.rightDate.getFullYear();
	    },
	    rightMonth: function rightMonth() {
	      return this.rightDate.getMonth();
	    },
	    rightMonthDate: function rightMonthDate() {
	      return this.rightDate.getDate();
	    },
	    minVisibleDate: function minVisibleDate() {
	      if (this.dateUserInput.min !== null) return this.dateUserInput.min;
	      if (this.minDate) return Object(date_util_["formatDate"])(this.minDate, this.dateFormat);
	      return '';
	    },
	    maxVisibleDate: function maxVisibleDate() {
	      if (this.dateUserInput.max !== null) return this.dateUserInput.max;
	      if (this.maxDate || this.minDate) return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.dateFormat);
	      return '';
	    },
	    minVisibleTime: function minVisibleTime() {
	      if (this.timeUserInput.min !== null) return this.timeUserInput.min;
	      if (this.minDate) return Object(date_util_["formatDate"])(this.minDate, this.timeFormat);
	      return '';
	    },
	    maxVisibleTime: function maxVisibleTime() {
	      if (this.timeUserInput.max !== null) return this.timeUserInput.max;
	      if (this.maxDate || this.minDate) return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.timeFormat);
	      return '';
	    },
	    timeFormat: function timeFormat() {
	      if (this.format) {
	        return Object(date_util_["extractTimeFormat"])(this.format);
	      } else {
	        return 'HH:mm:ss';
	      }
	    },
	    dateFormat: function dateFormat() {
	      if (this.format) {
	        return Object(date_util_["extractDateFormat"])(this.format);
	      } else {
	        return 'yyyy-MM-dd';
	      }
	    },
	    enableMonthArrow: function enableMonthArrow() {
	      var nextMonth = (this.leftMonth + 1) % 12;
	      var yearOffset = this.leftMonth + 1 >= 12 ? 1 : 0;
	      return this.unlinkPanels && new Date(this.leftYear + yearOffset, nextMonth) < new Date(this.rightYear, this.rightMonth);
	    },
	    enableYearArrow: function enableYearArrow() {
	      return this.unlinkPanels && this.rightYear * 12 + this.rightMonth - (this.leftYear * 12 + this.leftMonth + 1) >= 12;
	    }
	  },
	
	  data: function data() {
	    return {
	      popperClass: '',
	      value: [],
	      defaultValue: null,
	      defaultTime: null,
	      minDate: '',
	      maxDate: '',
	      leftDate: new Date(),
	      rightDate: Object(date_util_["nextMonth"])(new Date()),
	      rangeState: {
	        endDate: null,
	        selecting: false,
	        row: null,
	        column: null
	      },
	      showTime: false,
	      shortcuts: '',
	      visible: '',
	      disabledDate: '',
	      cellClassName: '',
	      firstDayOfWeek: 7,
	      minTimePickerVisible: false,
	      maxTimePickerVisible: false,
	      format: '',
	      arrowControl: false,
	      unlinkPanels: false,
	      dateUserInput: {
	        min: null,
	        max: null
	      },
	      timeUserInput: {
	        min: null,
	        max: null
	      }
	    };
	  },
	
	
	  watch: {
	    minDate: function minDate(val) {
	      var _this = this;
	
	      this.dateUserInput.min = null;
	      this.timeUserInput.min = null;
	      this.$nextTick(function () {
	        if (_this.$refs.maxTimePicker && _this.maxDate && _this.maxDate < _this.minDate) {
	          var format = 'HH:mm:ss';
	          _this.$refs.maxTimePicker.selectableRange = [[Object(date_util_["parseDate"])(Object(date_util_["formatDate"])(_this.minDate, format), format), Object(date_util_["parseDate"])('23:59:59', format)]];
	        }
	      });
	      if (val && this.$refs.minTimePicker) {
	        this.$refs.minTimePicker.date = val;
	        this.$refs.minTimePicker.value = val;
	      }
	    },
	    maxDate: function maxDate(val) {
	      this.dateUserInput.max = null;
	      this.timeUserInput.max = null;
	      if (val && this.$refs.maxTimePicker) {
	        this.$refs.maxTimePicker.date = val;
	        this.$refs.maxTimePicker.value = val;
	      }
	    },
	    minTimePickerVisible: function minTimePickerVisible(val) {
	      var _this2 = this;
	
	      if (val) {
	        this.$nextTick(function () {
	          _this2.$refs.minTimePicker.date = _this2.minDate;
	          _this2.$refs.minTimePicker.value = _this2.minDate;
	          _this2.$refs.minTimePicker.adjustSpinners();
	        });
	      }
	    },
	    maxTimePickerVisible: function maxTimePickerVisible(val) {
	      var _this3 = this;
	
	      if (val) {
	        this.$nextTick(function () {
	          _this3.$refs.maxTimePicker.date = _this3.maxDate;
	          _this3.$refs.maxTimePicker.value = _this3.maxDate;
	          _this3.$refs.maxTimePicker.adjustSpinners();
	        });
	      }
	    },
	    value: function value(newVal) {
	      if (!newVal) {
	        this.minDate = null;
	        this.maxDate = null;
	      } else if (Array.isArray(newVal)) {
	        this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
	        this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
	        if (this.minDate) {
	          this.leftDate = this.minDate;
	          if (this.unlinkPanels && this.maxDate) {
	            var minDateYear = this.minDate.getFullYear();
	            var minDateMonth = this.minDate.getMonth();
	            var maxDateYear = this.maxDate.getFullYear();
	            var maxDateMonth = this.maxDate.getMonth();
	            this.rightDate = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? Object(date_util_["nextMonth"])(this.maxDate) : this.maxDate;
	          } else {
	            this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	          }
	        } else {
	          this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
	          this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	        }
	      }
	    },
	    defaultValue: function defaultValue(val) {
	      if (!Array.isArray(this.value)) {
	        var _calcDefaultValue = date_rangevue_type_script_lang_js_calcDefaultValue(val),
	            left = _calcDefaultValue[0],
	            right = _calcDefaultValue[1];
	
	        this.leftDate = left;
	        this.rightDate = val && val[1] && this.unlinkPanels ? right : Object(date_util_["nextMonth"])(this.leftDate);
	      }
	    }
	  },
	
	  methods: {
	    handleClear: function handleClear() {
	      this.minDate = null;
	      this.maxDate = null;
	      this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
	      this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	      this.$emit('pick', null);
	    },
	    handleChangeRange: function handleChangeRange(val) {
	      this.minDate = val.minDate;
	      this.maxDate = val.maxDate;
	      this.rangeState = val.rangeState;
	    },
	    handleDateInput: function handleDateInput(value, type) {
	      this.dateUserInput[type] = value;
	      if (value.length !== this.dateFormat.length) return;
	      var parsedValue = Object(date_util_["parseDate"])(value, this.dateFormat);
	
	      if (parsedValue) {
	        if (typeof this.disabledDate === 'function' && this.disabledDate(new Date(parsedValue))) {
	          return;
	        }
	        if (type === 'min') {
	          this.minDate = Object(date_util_["modifyDate"])(this.minDate || new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
	          this.leftDate = new Date(parsedValue);
	          if (!this.unlinkPanels) {
	            this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	          }
	        } else {
	          this.maxDate = Object(date_util_["modifyDate"])(this.maxDate || new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
	          this.rightDate = new Date(parsedValue);
	          if (!this.unlinkPanels) {
	            this.leftDate = Object(date_util_["prevMonth"])(parsedValue);
	          }
	        }
	      }
	    },
	    handleDateChange: function handleDateChange(value, type) {
	      var parsedValue = Object(date_util_["parseDate"])(value, this.dateFormat);
	      if (parsedValue) {
	        if (type === 'min') {
	          this.minDate = Object(date_util_["modifyDate"])(this.minDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
	          if (this.minDate > this.maxDate) {
	            this.maxDate = this.minDate;
	          }
	        } else {
	          this.maxDate = Object(date_util_["modifyDate"])(this.maxDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
	          if (this.maxDate < this.minDate) {
	            this.minDate = this.maxDate;
	          }
	        }
	      }
	    },
	    handleTimeInput: function handleTimeInput(value, type) {
	      var _this4 = this;
	
	      this.timeUserInput[type] = value;
	      if (value.length !== this.timeFormat.length) return;
	      var parsedValue = Object(date_util_["parseDate"])(value, this.timeFormat);
	
	      if (parsedValue) {
	        if (type === 'min') {
	          this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
	          this.$nextTick(function (_) {
	            return _this4.$refs.minTimePicker.adjustSpinners();
	          });
	        } else {
	          this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
	          this.$nextTick(function (_) {
	            return _this4.$refs.maxTimePicker.adjustSpinners();
	          });
	        }
	      }
	    },
	    handleTimeChange: function handleTimeChange(value, type) {
	      var parsedValue = Object(date_util_["parseDate"])(value, this.timeFormat);
	      if (parsedValue) {
	        if (type === 'min') {
	          this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
	          if (this.minDate > this.maxDate) {
	            this.maxDate = this.minDate;
	          }
	          this.$refs.minTimePicker.value = this.minDate;
	          this.minTimePickerVisible = false;
	        } else {
	          this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
	          if (this.maxDate < this.minDate) {
	            this.minDate = this.maxDate;
	          }
	          this.$refs.maxTimePicker.value = this.minDate;
	          this.maxTimePickerVisible = false;
	        }
	      }
	    },
	    handleRangePick: function handleRangePick(val) {
	      var _this5 = this;
	
	      var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	      var defaultTime = this.defaultTime || [];
	      var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
	      var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
	
	      if (this.maxDate === maxDate && this.minDate === minDate) {
	        return;
	      }
	      this.onPick && this.onPick(val);
	      this.maxDate = maxDate;
	      this.minDate = minDate;
	
	      // workaround for https://github.com/ElemeFE/element/issues/7539, should remove this block when we don't have to care about Chromium 55 - 57
	      setTimeout(function () {
	        _this5.maxDate = maxDate;
	        _this5.minDate = minDate;
	      }, 10);
	      if (!close || this.showTime) return;
	      this.handleConfirm();
	    },
	    handleShortcutClick: function handleShortcutClick(shortcut) {
	      if (shortcut.onClick) {
	        shortcut.onClick(this);
	      }
	    },
	    handleMinTimePick: function handleMinTimePick(value, visible, first) {
	      this.minDate = this.minDate || new Date();
	      if (value) {
	        this.minDate = Object(date_util_["modifyTime"])(this.minDate, value.getHours(), value.getMinutes(), value.getSeconds());
	      }
	
	      if (!first) {
	        this.minTimePickerVisible = visible;
	      }
	
	      if (!this.maxDate || this.maxDate && this.maxDate.getTime() < this.minDate.getTime()) {
	        this.maxDate = new Date(this.minDate);
	      }
	    },
	    handleMinTimeClose: function handleMinTimeClose() {
	      this.minTimePickerVisible = false;
	    },
	    handleMaxTimePick: function handleMaxTimePick(value, visible, first) {
	      if (this.maxDate && value) {
	        this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, value.getHours(), value.getMinutes(), value.getSeconds());
	      }
	
	      if (!first) {
	        this.maxTimePickerVisible = visible;
	      }
	
	      if (this.maxDate && this.minDate && this.minDate.getTime() > this.maxDate.getTime()) {
	        this.minDate = new Date(this.maxDate);
	      }
	    },
	    handleMaxTimeClose: function handleMaxTimeClose() {
	      this.maxTimePickerVisible = false;
	    },
	
	
	    // leftPrev*, rightNext* need to take care of `unlinkPanels`
	    leftPrevYear: function leftPrevYear() {
	      this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
	      if (!this.unlinkPanels) {
	        this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	      }
	    },
	    leftPrevMonth: function leftPrevMonth() {
	      this.leftDate = Object(date_util_["prevMonth"])(this.leftDate);
	      if (!this.unlinkPanels) {
	        this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	      }
	    },
	    rightNextYear: function rightNextYear() {
	      if (!this.unlinkPanels) {
	        this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
	        this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	      } else {
	        this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
	      }
	    },
	    rightNextMonth: function rightNextMonth() {
	      if (!this.unlinkPanels) {
	        this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
	        this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
	      } else {
	        this.rightDate = Object(date_util_["nextMonth"])(this.rightDate);
	      }
	    },
	
	
	    // leftNext*, rightPrev* are called when `unlinkPanels` is true
	    leftNextYear: function leftNextYear() {
	      this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
	    },
	    leftNextMonth: function leftNextMonth() {
	      this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
	    },
	    rightPrevYear: function rightPrevYear() {
	      this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
	    },
	    rightPrevMonth: function rightPrevMonth() {
	      this.rightDate = Object(date_util_["prevMonth"])(this.rightDate);
	    },
	    handleConfirm: function handleConfirm() {
	      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      if (this.isValidValue([this.minDate, this.maxDate])) {
	        this.$emit('pick', [this.minDate, this.maxDate], visible);
	      }
	    },
	    isValidValue: function isValidValue(value) {
	      return Array.isArray(value) && value && value[0] && value[1] && Object(date_util_["isDate"])(value[0]) && Object(date_util_["isDate"])(value[1]) && value[0].getTime() <= value[1].getTime() && (typeof this.disabledDate === 'function' ? !this.disabledDate(value[0]) && !this.disabledDate(value[1]) : true);
	    },
	    resetView: function resetView() {
	      // NOTE: this is a hack to reset {min, max}Date on picker open.
	      // TODO: correct way of doing so is to refactor {min, max}Date to be dependent on value and internal selection state
	      //       an alternative would be resetView whenever picker becomes visible, should also investigate date-panel's resetView
	      if (this.minDate && this.maxDate == null) this.rangeState.selecting = false;
	      this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
	      this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
	    }
	  },
	
	  components: { TimePicker: panel_time["a" /* default */], DateTable: date_table, ElInput: input_default.a, ElButton: button_default.a }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/date-range.vue?vue&type=script&lang=js&
	 /* harmony default export */ var panel_date_rangevue_type_script_lang_js_ = (date_rangevue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/date-range.vue
	
	
	
	
	
	/* normalize component */
	
	var date_range_component = Object(componentNormalizer["a" /* default */])(
	  panel_date_rangevue_type_script_lang_js_,
	  date_rangevue_type_template_id_2652849a_render,
	  date_rangevue_type_template_id_2652849a_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var date_range_api; }
	date_range_component.options.__file = "packages/date-picker/src/panel/date-range.vue"
	/* harmony default export */ var date_range = (date_range_component.exports);
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/month-range.vue?vue&type=template&id=f2645fb8&
	var month_rangevue_type_template_id_f2645fb8_render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "transition",
	    {
	      attrs: { name: "el-zoom-in-top" },
	      on: {
	        "after-leave": function($event) {
	          _vm.$emit("dodestroy")
	        }
	      }
	    },
	    [
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.visible,
	              expression: "visible"
	            }
	          ],
	          staticClass: "el-picker-panel el-date-range-picker el-popper",
	          class: [
	            {
	              "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts
	            },
	            _vm.popperClass
	          ]
	        },
	        [
	          _c(
	            "div",
	            { staticClass: "el-picker-panel__body-wrapper" },
	            [
	              _vm._t("sidebar"),
	              _vm.shortcuts
	                ? _c(
	                    "div",
	                    { staticClass: "el-picker-panel__sidebar" },
	                    _vm._l(_vm.shortcuts, function(shortcut, key) {
	                      return _c(
	                        "button",
	                        {
	                          key: key,
	                          staticClass: "el-picker-panel__shortcut",
	                          attrs: { type: "button" },
	                          on: {
	                            click: function($event) {
	                              _vm.handleShortcutClick(shortcut)
	                            }
	                          }
	                        },
	                        [_vm._v(_vm._s(shortcut.text))]
	                      )
	                    }),
	                    0
	                  )
	                : _vm._e(),
	              _c("div", { staticClass: "el-picker-panel__body" }, [
	                _c(
	                  "div",
	                  {
	                    staticClass:
	                      "el-picker-panel__content el-date-range-picker__content is-left"
	                  },
	                  [
	                    _c("div", { staticClass: "el-date-range-picker__header" }, [
	                      _c("button", {
	                        staticClass:
	                          "el-picker-panel__icon-btn el-icon-d-arrow-left",
	                        attrs: { type: "button" },
	                        on: { click: _vm.leftPrevYear }
	                      }),
	                      _vm.unlinkPanels
	                        ? _c("button", {
	                            staticClass:
	                              "el-picker-panel__icon-btn el-icon-d-arrow-right",
	                            class: { "is-disabled": !_vm.enableYearArrow },
	                            attrs: {
	                              type: "button",
	                              disabled: !_vm.enableYearArrow
	                            },
	                            on: { click: _vm.leftNextYear }
	                          })
	                        : _vm._e(),
	                      _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
	                    ]),
	                    _c("month-table", {
	                      attrs: {
	                        "selection-mode": "range",
	                        date: _vm.leftDate,
	                        "default-value": _vm.defaultValue,
	                        "min-date": _vm.minDate,
	                        "max-date": _vm.maxDate,
	                        "range-state": _vm.rangeState,
	                        "disabled-date": _vm.disabledDate
	                      },
	                      on: {
	                        changerange: _vm.handleChangeRange,
	                        pick: _vm.handleRangePick
	                      }
	                    })
	                  ],
	                  1
	                ),
	                _c(
	                  "div",
	                  {
	                    staticClass:
	                      "el-picker-panel__content el-date-range-picker__content is-right"
	                  },
	                  [
	                    _c("div", { staticClass: "el-date-range-picker__header" }, [
	                      _vm.unlinkPanels
	                        ? _c("button", {
	                            staticClass:
	                              "el-picker-panel__icon-btn el-icon-d-arrow-left",
	                            class: { "is-disabled": !_vm.enableYearArrow },
	                            attrs: {
	                              type: "button",
	                              disabled: !_vm.enableYearArrow
	                            },
	                            on: { click: _vm.rightPrevYear }
	                          })
	                        : _vm._e(),
	                      _c("button", {
	                        staticClass:
	                          "el-picker-panel__icon-btn el-icon-d-arrow-right",
	                        attrs: { type: "button" },
	                        on: { click: _vm.rightNextYear }
	                      }),
	                      _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
	                    ]),
	                    _c("month-table", {
	                      attrs: {
	                        "selection-mode": "range",
	                        date: _vm.rightDate,
	                        "default-value": _vm.defaultValue,
	                        "min-date": _vm.minDate,
	                        "max-date": _vm.maxDate,
	                        "range-state": _vm.rangeState,
	                        "disabled-date": _vm.disabledDate
	                      },
	                      on: {
	                        changerange: _vm.handleChangeRange,
	                        pick: _vm.handleRangePick
	                      }
	                    })
	                  ],
	                  1
	                )
	              ])
	            ],
	            2
	          )
	        ]
	      )
	    ]
	  )
	}
	var month_rangevue_type_template_id_f2645fb8_staticRenderFns = []
	month_rangevue_type_template_id_f2645fb8_render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/month-range.vue?vue&type=template&id=f2645fb8&
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/panel/month-range.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	
	
	
	var month_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
	  if (Array.isArray(defaultValue)) {
	    return [new Date(defaultValue[0]), new Date(defaultValue[1])];
	  } else if (defaultValue) {
	    return [new Date(defaultValue), Object(date_util_["nextMonth"])(new Date(defaultValue))];
	  } else {
	    return [new Date(), Object(date_util_["nextMonth"])(new Date())];
	  }
	};
	/* harmony default export */ var month_rangevue_type_script_lang_js_ = ({
	  mixins: [locale_default.a],
	
	  directives: { Clickoutside: clickoutside_default.a },
	
	  computed: {
	    btnDisabled: function btnDisabled() {
	      return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
	    },
	    leftLabel: function leftLabel() {
	      return this.leftDate.getFullYear() + ' ' + this.t('el.datepicker.year');
	    },
	    rightLabel: function rightLabel() {
	      return this.rightDate.getFullYear() + ' ' + this.t('el.datepicker.year');
	    },
	    leftYear: function leftYear() {
	      return this.leftDate.getFullYear();
	    },
	    rightYear: function rightYear() {
	      return this.rightDate.getFullYear() === this.leftDate.getFullYear() ? this.leftDate.getFullYear() + 1 : this.rightDate.getFullYear();
	    },
	    enableYearArrow: function enableYearArrow() {
	      return this.unlinkPanels && this.rightYear > this.leftYear + 1;
	    }
	  },
	
	  data: function data() {
	    return {
	      popperClass: '',
	      value: [],
	      defaultValue: null,
	      defaultTime: null,
	      minDate: '',
	      maxDate: '',
	      leftDate: new Date(),
	      rightDate: Object(date_util_["nextYear"])(new Date()),
	      rangeState: {
	        endDate: null,
	        selecting: false,
	        row: null,
	        column: null
	      },
	      shortcuts: '',
	      visible: '',
	      disabledDate: '',
	      format: '',
	      arrowControl: false,
	      unlinkPanels: false
	    };
	  },
	
	
	  watch: {
	    value: function value(newVal) {
	      if (!newVal) {
	        this.minDate = null;
	        this.maxDate = null;
	      } else if (Array.isArray(newVal)) {
	        this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
	        this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
	        if (this.minDate) {
	          this.leftDate = this.minDate;
	          if (this.unlinkPanels && this.maxDate) {
	            var minDateYear = this.minDate.getFullYear();
	            var maxDateYear = this.maxDate.getFullYear();
	            this.rightDate = minDateYear === maxDateYear ? Object(date_util_["nextYear"])(this.maxDate) : this.maxDate;
	          } else {
	            this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
	          }
	        } else {
	          this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
	          this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
	        }
	      }
	    },
	    defaultValue: function defaultValue(val) {
	      if (!Array.isArray(this.value)) {
	        var _calcDefaultValue = month_rangevue_type_script_lang_js_calcDefaultValue(val),
	            left = _calcDefaultValue[0],
	            right = _calcDefaultValue[1];
	
	        this.leftDate = left;
	        this.rightDate = val && val[1] && left.getFullYear() !== right.getFullYear() && this.unlinkPanels ? right : Object(date_util_["nextYear"])(this.leftDate);
	      }
	    }
	  },
	
	  methods: {
	    handleClear: function handleClear() {
	      this.minDate = null;
	      this.maxDate = null;
	      this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
	      this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
	      this.$emit('pick', null);
	    },
	    handleChangeRange: function handleChangeRange(val) {
	      this.minDate = val.minDate;
	      this.maxDate = val.maxDate;
	      this.rangeState = val.rangeState;
	    },
	    handleRangePick: function handleRangePick(val) {
	      var _this = this;
	
	      var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	      var defaultTime = this.defaultTime || [];
	      var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
	      var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
	      if (this.maxDate === maxDate && this.minDate === minDate) {
	        return;
	      }
	      this.onPick && this.onPick(val);
	      this.maxDate = maxDate;
	      this.minDate = minDate;
	
	      // workaround for https://github.com/ElemeFE/element/issues/7539, should remove this block when we don't have to care about Chromium 55 - 57
	      setTimeout(function () {
	        _this.maxDate = maxDate;
	        _this.minDate = minDate;
	      }, 10);
	      if (!close) return;
	      this.handleConfirm();
	    },
	    handleShortcutClick: function handleShortcutClick(shortcut) {
	      if (shortcut.onClick) {
	        shortcut.onClick(this);
	      }
	    },
	
	
	    // leftPrev*, rightNext* need to take care of `unlinkPanels`
	    leftPrevYear: function leftPrevYear() {
	      this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
	      if (!this.unlinkPanels) {
	        this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
	      }
	    },
	    rightNextYear: function rightNextYear() {
	      if (!this.unlinkPanels) {
	        this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
	      }
	      this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
	    },
	
	
	    // leftNext*, rightPrev* are called when `unlinkPanels` is true
	    leftNextYear: function leftNextYear() {
	      this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
	    },
	    rightPrevYear: function rightPrevYear() {
	      this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
	    },
	    handleConfirm: function handleConfirm() {
	      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	      if (this.isValidValue([this.minDate, this.maxDate])) {
	        this.$emit('pick', [this.minDate, this.maxDate], visible);
	      }
	    },
	    isValidValue: function isValidValue(value) {
	      return Array.isArray(value) && value && value[0] && value[1] && Object(date_util_["isDate"])(value[0]) && Object(date_util_["isDate"])(value[1]) && value[0].getTime() <= value[1].getTime() && (typeof this.disabledDate === 'function' ? !this.disabledDate(value[0]) && !this.disabledDate(value[1]) : true);
	    },
	    resetView: function resetView() {
	      // NOTE: this is a hack to reset {min, max}Date on picker open.
	      // TODO: correct way of doing so is to refactor {min, max}Date to be dependent on value and internal selection state
	      //       an alternative would be resetView whenever picker becomes visible, should also investigate date-panel's resetView
	      this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
	      this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
	    }
	  },
	
	  components: { MonthTable: month_table, ElInput: input_default.a, ElButton: button_default.a }
	});
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/month-range.vue?vue&type=script&lang=js&
	 /* harmony default export */ var panel_month_rangevue_type_script_lang_js_ = (month_rangevue_type_script_lang_js_); 
	// CONCATENATED MODULE: ./packages/date-picker/src/panel/month-range.vue
	
	
	
	
	
	/* normalize component */
	
	var month_range_component = Object(componentNormalizer["a" /* default */])(
	  panel_month_rangevue_type_script_lang_js_,
	  month_rangevue_type_template_id_f2645fb8_render,
	  month_rangevue_type_template_id_f2645fb8_staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var month_range_api; }
	month_range_component.options.__file = "packages/date-picker/src/panel/month-range.vue"
	/* harmony default export */ var month_range = (month_range_component.exports);
	// CONCATENATED MODULE: ./packages/date-picker/src/picker/date-picker.js
	
	
	
	
	
	var date_picker_getPanel = function getPanel(type) {
	  if (type === 'daterange' || type === 'datetimerange') {
	    return date_range;
	  } else if (type === 'monthrange') {
	    return month_range;
	  }
	  return panel_date;
	};
	
	/* harmony default export */ var date_picker = ({
	  mixins: [picker["a" /* default */]],
	
	  name: 'ElDatePicker',
	
	  props: {
	    type: {
	      type: String,
	      default: 'date'
	    },
	    timeArrowControl: Boolean
	  },
	
	  watch: {
	    type: function type(_type) {
	      if (this.picker) {
	        this.unmountPicker();
	        this.panel = date_picker_getPanel(_type);
	        this.mountPicker();
	      } else {
	        this.panel = date_picker_getPanel(_type);
	      }
	    }
	  },
	
	  created: function created() {
	    this.panel = date_picker_getPanel(this.type);
	  }
	});
	// CONCATENATED MODULE: ./packages/date-picker/index.js
	
	
	/* istanbul ignore next */
	date_picker.install = function install(Vue) {
	  Vue.component(date_picker.name, date_picker);
	};
	
	/* harmony default export */ var packages_date_picker = __webpack_exports__["default"] = (date_picker);
	
	/***/ })
	/******/ ]);

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 89);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 11:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(93);
	
	/***/ }),
	
	/***/ 15:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(80);
	
	/***/ }),
	
	/***/ 4:
	/***/ (function(module, exports) {
	
	module.exports = __webpack_require__(32);
	
	/***/ }),
	
	/***/ 89:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/component.vue?vue&type=template&id=60140e62&
	var render = function() {
	  var _vm = this
	  var _h = _vm.$createElement
	  var _c = _vm._self._c || _h
	  return _c(
	    "transition",
	    {
	      attrs: { name: "dialog-fade" },
	      on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
	    },
	    [
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.visible,
	              expression: "visible"
	            }
	          ],
	          staticClass: "el-dialog__wrapper",
	          on: {
	            click: function($event) {
	              if ($event.target !== $event.currentTarget) {
	                return null
	              }
	              return _vm.handleWrapperClick($event)
	            }
	          }
	        },
	        [
	          _c(
	            "div",
	            {
	              key: _vm.key,
	              ref: "dialog",
	              class: [
	                "el-dialog",
	                {
	                  "is-fullscreen": _vm.fullscreen,
	                  "el-dialog--center": _vm.center
	                },
	                _vm.customClass
	              ],
	              style: _vm.style,
	              attrs: {
	                role: "dialog",
	                "aria-modal": "true",
	                "aria-label": _vm.title || "dialog"
	              }
	            },
	            [
	              _c(
	                "div",
	                { staticClass: "el-dialog__header" },
	                [
	                  _vm._t("title", [
	                    _c("span", { staticClass: "el-dialog__title" }, [
	                      _vm._v(_vm._s(_vm.title))
	                    ])
	                  ]),
	                  _vm.showClose
	                    ? _c(
	                        "button",
	                        {
	                          staticClass: "el-dialog__headerbtn",
	                          attrs: { type: "button", "aria-label": "Close" },
	                          on: { click: _vm.handleClose }
	                        },
	                        [
	                          _c("i", {
	                            staticClass:
	                              "el-dialog__close el-icon el-icon-close"
	                          })
	                        ]
	                      )
	                    : _vm._e()
	                ],
	                2
	              ),
	              _vm.rendered
	                ? _c(
	                    "div",
	                    { staticClass: "el-dialog__body" },
	                    [_vm._t("default")],
	                    2
	                  )
	                : _vm._e(),
	              _vm.$slots.footer
	                ? _c(
	                    "div",
	                    { staticClass: "el-dialog__footer" },
	                    [_vm._t("footer")],
	                    2
	                  )
	                : _vm._e()
	            ]
	          )
	        ]
	      )
	    ]
	  )
	}
	var staticRenderFns = []
	render._withStripped = true
	
	
	// CONCATENATED MODULE: ./packages/dialog/src/component.vue?vue&type=template&id=60140e62&
	
	// EXTERNAL MODULE: external "element-ui/lib/utils/popup"
	var popup_ = __webpack_require__(15);
	var popup_default = /*#__PURE__*/__webpack_require__.n(popup_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/migrating"
	var migrating_ = __webpack_require__(11);
	var migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);
	
	// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"
	var emitter_ = __webpack_require__(4);
	var emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/component.vue?vue&type=script&lang=js&
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	
	
	
	
	
	/* harmony default export */ var componentvue_type_script_lang_js_ = ({
	  name: 'ElDialog',
	
	  mixins: [popup_default.a, emitter_default.a, migrating_default.a],
	
	  props: {
	    title: {
	      type: String,
	      default: ''
	    },
	
	    modal: {
	      type: Boolean,
	      default: true
	    },
	
	    modalAppendToBody: {
	      type: Boolean,
	      default: true
	    },
	
	    appendToBody: {
	      type: Boolean,
	      default: false
	    },
	
	    lockScroll: {
	      type: Boolean,
	      default: true
	    },
	
	    closeOnClickModal: {
	      type: Boolean,
	      default: true
	    },
	
	    closeOnPressEscape: {
	      type: Boolean,
	      default: true
	    },
	
	    showClose: {
	      type: Boolean,
	      default: true
	    },
	
	    width: String,
	
	    fullscreen: Boolean,
	
	    customClass: {
	      type: String,
	      default: ''
	    },
	
	    top: {
	      type: String,
	      default: '15vh'
	    },
	    beforeClose: Function,
	    center: {
	      type: Boolean,
	      default: false
	    },
	
	    destroyOnClose: Boolean
	  },
	
	  data: function data() {
	    return {
	      closed: false,
	      key: 0
	    };
	  },
	
	
	  watch: {
	    visible: function visible(val) {
	      var _this = this;
	
	      if (val) {
	        this.closed = false;
	        this.$emit('open');
	        this.$el.addEventListener('scroll', this.updatePopper);
	        this.$nextTick(function () {
	          _this.$refs.dialog.scrollTop = 0;
	        });
	        if (this.appendToBody) {
	          document.body.appendChild(this.$el);
	        }
	      } else {
	        this.$el.removeEventListener('scroll', this.updatePopper);
	        if (!this.closed) this.$emit('close');
	        if (this.destroyOnClose) {
	          this.$nextTick(function () {
	            _this.key++;
	          });
	        }
	      }
	    }
	  },
	
	  computed: {
	    style: function style() {
	      var style = {};
	      if (!this.fullscreen) {
	        style.marginTop = this.top;
	        if (this.width) {
	          style.width = this.width;
	        }
	      }
	      return style;
	    }
	  },
	
	  methods: {
	    getMigratingConfig: function getMigratingConfig() {
	      return {
	        props: {
	          'size': 'size is removed.'
	        }
	      };
	    },
	    handleWrapperClick: function handleWrapperClick() {
	      if (!this.closeOnClickModal) return;
	      this.handleClose();
	    },
	    handleClose: function handleClose() {
	      if (typeof this.beforeClose === 'function') {
	        this.beforeClose(this.hide);
	      } else {
	        this.hide();
	      }
	    },
	    hide: function hide(cancel) {
	      if (cancel !== false) {
	        this.$emit('update:visible', false);
	        this.$emit('close');
	        this.closed = true;
	      }
	    },
	    updatePopper: function updatePopper() {
	      this.broadcast('ElSelectDropdown', 'updatePopper');
	      this.broadcast('ElDropdownMenu', 'updatePopper');
	    },
	    afterEnter: function afterEnter() {
	      this.$emit('opened');
	    },
	    afterLeave: function afterLeave() {
	      this.$emit('closed');
	    }
	  },
	
	  mounted: function mounted() {
	    if (this.visible) {
	      this.rendered = true;
	      this.open();
	      if (this.appendToBody) {
	        document.body.appendChild(this.$el);
	      }
	    }
	  },
	  destroyed: function destroyed() {
	    // if appendToBody is true, remove DOM node after destroy
	    if (this.appendToBody && this.$el && this.$el.parentNode) {
	      this.$el.parentNode.removeChild(this.$el);
	    }
	  }
	});
	// CONCATENATED MODULE: ./packages/dialog/src/component.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_componentvue_type_script_lang_js_ = (componentvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/dialog/src/component.vue
	
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_componentvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/dialog/src/component.vue"
	/* harmony default export */ var src_component = (component.exports);
	// CONCATENATED MODULE: ./packages/dialog/index.js
	
	
	/* istanbul ignore next */
	src_component.install = function (Vue) {
	  Vue.component(src_component.name, src_component);
	};
	
	/* harmony default export */ var dialog = __webpack_exports__["default"] = (src_component);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.default = function (Vue) {
	
	  /**
	   * template
	   *
	   * @param {String} string
	   * @param {Array} ...args
	   * @return {String}
	   */
	
	  function template(string) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    if (args.length === 1 && _typeof(args[0]) === 'object') {
	      args = args[0];
	    }
	
	    if (!args || !args.hasOwnProperty) {
	      args = {};
	    }
	
	    return string.replace(RE_NARGS, function (match, prefix, i, index) {
	      var result = void 0;
	
	      if (string[index - 1] === '{' && string[index + match.length] === '}') {
	        return i;
	      } else {
	        result = (0, _util.hasOwn)(args, i) ? args[i] : null;
	        if (result === null || result === undefined) {
	          return '';
	        }
	
	        return result;
	      }
	    });
	  }
	
	  return template;
	};
	
	var _util = __webpack_require__(20);
	
	var RE_NARGS = /(%|)\{([0-9a-zA-Z_]+)\}/g;
	/**
	 *  String format template
	 *  - Inspired:
	 *    https://github.com/Matt-Esch/string-template/index.js
	 */

/***/ }),
/* 484 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = {
	  el: {
	    colorpicker: {
	      confirm: '确定',
	      clear: '清空'
	    },
	    datepicker: {
	      now: '此刻',
	      today: '今天',
	      cancel: '取消',
	      clear: '清空',
	      confirm: '确定',
	      selectDate: '选择日期',
	      selectTime: '选择时间',
	      startDate: '开始日期',
	      startTime: '开始时间',
	      endDate: '结束日期',
	      endTime: '结束时间',
	      prevYear: '前一年',
	      nextYear: '后一年',
	      prevMonth: '上个月',
	      nextMonth: '下个月',
	      year: '年',
	      month1: '1 月',
	      month2: '2 月',
	      month3: '3 月',
	      month4: '4 月',
	      month5: '5 月',
	      month6: '6 月',
	      month7: '7 月',
	      month8: '8 月',
	      month9: '9 月',
	      month10: '10 月',
	      month11: '11 月',
	      month12: '12 月',
	      // week: '周次',
	      weeks: {
	        sun: '日',
	        mon: '一',
	        tue: '二',
	        wed: '三',
	        thu: '四',
	        fri: '五',
	        sat: '六'
	      },
	      months: {
	        jan: '一月',
	        feb: '二月',
	        mar: '三月',
	        apr: '四月',
	        may: '五月',
	        jun: '六月',
	        jul: '七月',
	        aug: '八月',
	        sep: '九月',
	        oct: '十月',
	        nov: '十一月',
	        dec: '十二月'
	      }
	    },
	    select: {
	      loading: '加载中',
	      noMatch: '无匹配数据',
	      noData: '无数据',
	      placeholder: '请选择'
	    },
	    cascader: {
	      noMatch: '无匹配数据',
	      loading: '加载中',
	      placeholder: '请选择',
	      noData: '暂无数据'
	    },
	    pagination: {
	      goto: '前往',
	      pagesize: '条/页',
	      total: '共 {total} 条',
	      pageClassifier: '页'
	    },
	    messagebox: {
	      title: '提示',
	      confirm: '确定',
	      cancel: '取消',
	      error: '输入的数据不合法!'
	    },
	    upload: {
	      deleteTip: '按 delete 键可删除',
	      delete: '删除',
	      preview: '查看图片',
	      continue: '继续上传'
	    },
	    table: {
	      emptyText: '暂无数据',
	      confirmFilter: '筛选',
	      resetFilter: '重置',
	      clearFilter: '全部',
	      sumText: '合计'
	    },
	    tree: {
	      emptyText: '暂无数据'
	    },
	    transfer: {
	      noMatch: '无匹配数据',
	      noData: '无数据',
	      titles: ['列表 1', '列表 2'],
	      filterPlaceholder: '请输入搜索内容',
	      noCheckedFormat: '共 {total} 项',
	      hasCheckedFormat: '已选 {checked}/{total} 项'
	    },
	    image: {
	      error: '加载失败'
	    },
	    pageHeader: {
	      title: '返回'
	    },
	    popconfirm: {
	      confirmButtonText: '确定',
	      cancelButtonText: '取消'
	    }
	  }
	};

/***/ }),
/* 485 */,
/* 486 */
/***/ (function(module, exports) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) value = __webpack_require__(value);
	/******/ 		if(mode & 8) return value;
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "/dist/";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 124);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
	/* globals __VUE_SSR_CONTEXT__ */
	
	// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
	// This module is a runtime utility for cleaner component module output and will
	// be included in the final webpack user bundle.
	
	function normalizeComponent (
	  scriptExports,
	  render,
	  staticRenderFns,
	  functionalTemplate,
	  injectStyles,
	  scopeId,
	  moduleIdentifier, /* server only */
	  shadowMode /* vue-cli only */
	) {
	  // Vue.extend constructor export interop
	  var options = typeof scriptExports === 'function'
	    ? scriptExports.options
	    : scriptExports
	
	  // render functions
	  if (render) {
	    options.render = render
	    options.staticRenderFns = staticRenderFns
	    options._compiled = true
	  }
	
	  // functional template
	  if (functionalTemplate) {
	    options.functional = true
	  }
	
	  // scopedId
	  if (scopeId) {
	    options._scopeId = 'data-v-' + scopeId
	  }
	
	  var hook
	  if (moduleIdentifier) { // server build
	    hook = function (context) {
	      // 2.3 injection
	      context =
	        context || // cached call
	        (this.$vnode && this.$vnode.ssrContext) || // stateful
	        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
	      // 2.2 with runInNewContext: true
	      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
	        context = __VUE_SSR_CONTEXT__
	      }
	      // inject component styles
	      if (injectStyles) {
	        injectStyles.call(this, context)
	      }
	      // register component module identifier for async chunk inferrence
	      if (context && context._registeredComponents) {
	        context._registeredComponents.add(moduleIdentifier)
	      }
	    }
	    // used by ssr in case component is cached and beforeCreate
	    // never gets called
	    options._ssrRegister = hook
	  } else if (injectStyles) {
	    hook = shadowMode
	      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
	      : injectStyles
	  }
	
	  if (hook) {
	    if (options.functional) {
	      // for template-only hot-reload because in that case the render fn doesn't
	      // go through the normalizer
	      options._injectStyles = hook
	      // register for functioal component in vue file
	      var originalRender = options.render
	      options.render = function renderWithStyleInjection (h, context) {
	        hook.call(context)
	        return originalRender(h, context)
	      }
	    } else {
	      // inject component registration as beforeCreate hook
	      var existing = options.beforeCreate
	      options.beforeCreate = existing
	        ? [].concat(existing, hook)
	        : [hook]
	    }
	  }
	
	  return {
	    exports: scriptExports,
	    options: options
	  }
	}
	
	
	/***/ }),
	
	/***/ 124:
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	
	"use strict";
	__webpack_require__.r(__webpack_exports__);
	
	// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tag/src/tag.vue?vue&type=script&lang=js&
	
	/* harmony default export */ var tagvue_type_script_lang_js_ = ({
	  name: 'ElTag',
	  props: {
	    text: String,
	    closable: Boolean,
	    type: String,
	    hit: Boolean,
	    disableTransitions: Boolean,
	    color: String,
	    size: String,
	    effect: {
	      type: String,
	      default: 'light',
	      validator: function validator(val) {
	        return ['dark', 'light', 'plain'].indexOf(val) !== -1;
	      }
	    }
	  },
	  methods: {
	    handleClose: function handleClose(event) {
	      event.stopPropagation();
	      this.$emit('close', event);
	    },
	    handleClick: function handleClick(event) {
	      this.$emit('click', event);
	    }
	  },
	  computed: {
	    tagSize: function tagSize() {
	      return this.size || (this.$ELEMENT || {}).size;
	    }
	  },
	  render: function render(h) {
	    var type = this.type,
	        tagSize = this.tagSize,
	        hit = this.hit,
	        effect = this.effect;
	
	    var classes = ['el-tag', type ? 'el-tag--' + type : '', tagSize ? 'el-tag--' + tagSize : '', effect ? 'el-tag--' + effect : '', hit && 'is-hit'];
	    var tagEl = h(
	      'span',
	      {
	        'class': classes,
	        style: { backgroundColor: this.color },
	        on: {
	          'click': this.handleClick
	        }
	      },
	      [this.$slots.default, this.closable && h('i', { 'class': 'el-tag__close el-icon-close', on: {
	          'click': this.handleClose
	        }
	      })]
	    );
	
	    return this.disableTransitions ? tagEl : h(
	      'transition',
	      {
	        attrs: { name: 'el-zoom-in-center' }
	      },
	      [tagEl]
	    );
	  }
	});
	// CONCATENATED MODULE: ./packages/tag/src/tag.vue?vue&type=script&lang=js&
	 /* harmony default export */ var src_tagvue_type_script_lang_js_ = (tagvue_type_script_lang_js_); 
	// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
	var componentNormalizer = __webpack_require__(0);
	
	// CONCATENATED MODULE: ./packages/tag/src/tag.vue
	var render, staticRenderFns
	
	
	
	
	/* normalize component */
	
	var component = Object(componentNormalizer["a" /* default */])(
	  src_tagvue_type_script_lang_js_,
	  render,
	  staticRenderFns,
	  false,
	  null,
	  null,
	  null
	  
	)
	
	/* hot reload */
	if (false) { var api; }
	component.options.__file = "packages/tag/src/tag.vue"
	/* harmony default export */ var tag = (component.exports);
	// CONCATENATED MODULE: ./packages/tag/index.js
	
	
	/* istanbul ignore next */
	tag.install = function (Vue) {
	  Vue.component(tag.name, tag);
	};
	
	/* harmony default export */ var packages_tag = __webpack_exports__["default"] = (tag);
	
	/***/ })
	
	/******/ });

/***/ }),
/* 487 */,
/* 488 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	exports.default = function (instance, callback) {
	  var speed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
	  var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	
	  if (!instance || !callback) throw new Error('instance & callback is required');
	  var called = false;
	  var afterLeaveCallback = function afterLeaveCallback() {
	    if (called) return;
	    called = true;
	    if (callback) {
	      callback.apply(null, arguments);
	    }
	  };
	  if (once) {
	    instance.$once('after-leave', afterLeaveCallback);
	  } else {
	    instance.$on('after-leave', afterLeaveCallback);
	  }
	  setTimeout(function () {
	    afterLeaveCallback();
	  }, speed + 100);
	};
	
	; /**
	   * Bind after-leave event for vue instance. Make sure after-leave is called in any browsers.
	   *
	   * @param {Vue} instance Vue instance.
	   * @param {Function} callback callback of after-leave event
	   * @param {Number} speed the speed of transition, default value is 300ms
	   * @param {Boolean} once weather bind after-leave once. default value is false.
	   */

/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.validateRangeInOneMonth = exports.extractTimeFormat = exports.extractDateFormat = exports.nextYear = exports.prevYear = exports.nextMonth = exports.prevMonth = exports.changeYearMonthAndClampDate = exports.timeWithinRange = exports.limitTimeRange = exports.clearMilliseconds = exports.clearTime = exports.modifyWithTimeString = exports.modifyTime = exports.modifyDate = exports.range = exports.getRangeMinutes = exports.getMonthDays = exports.getPrevMonthLastDays = exports.getRangeHours = exports.getWeekNumber = exports.getStartDateOfMonth = exports.nextDate = exports.prevDate = exports.getFirstDayOfMonth = exports.getDayCountOfYear = exports.getDayCountOfMonth = exports.parseDate = exports.formatDate = exports.isDateObject = exports.isDate = exports.toDate = exports.getI18nSettings = undefined;
	
	var _date = __webpack_require__(490);
	
	var _date2 = _interopRequireDefault(_date);
	
	var _locale = __webpack_require__(17);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var weeks = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
	var months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
	
	var newArray = function newArray(start, end) {
	  var result = [];
	  for (var i = start; i <= end; i++) {
	    result.push(i);
	  }
	  return result;
	};
	
	var getI18nSettings = exports.getI18nSettings = function getI18nSettings() {
	  return {
	    dayNamesShort: weeks.map(function (week) {
	      return (0, _locale.t)('el.datepicker.weeks.' + week);
	    }),
	    dayNames: weeks.map(function (week) {
	      return (0, _locale.t)('el.datepicker.weeks.' + week);
	    }),
	    monthNamesShort: months.map(function (month) {
	      return (0, _locale.t)('el.datepicker.months.' + month);
	    }),
	    monthNames: months.map(function (month, index) {
	      return (0, _locale.t)('el.datepicker.month' + (index + 1));
	    }),
	    amPm: ['am', 'pm']
	  };
	};
	
	var toDate = exports.toDate = function toDate(date) {
	  return isDate(date) ? new Date(date) : null;
	};
	
	var isDate = exports.isDate = function isDate(date) {
	  if (date === null || date === undefined) return false;
	  if (isNaN(new Date(date).getTime())) return false;
	  if (Array.isArray(date)) return false; // deal with `new Date([ new Date() ]) -> new Date()`
	  return true;
	};
	
	var isDateObject = exports.isDateObject = function isDateObject(val) {
	  return val instanceof Date;
	};
	
	var formatDate = exports.formatDate = function formatDate(date, format) {
	  date = toDate(date);
	  if (!date) return '';
	  return _date2.default.format(date, format || 'yyyy-MM-dd', getI18nSettings());
	};
	
	var parseDate = exports.parseDate = function parseDate(string, format) {
	  return _date2.default.parse(string, format || 'yyyy-MM-dd', getI18nSettings());
	};
	
	var getDayCountOfMonth = exports.getDayCountOfMonth = function getDayCountOfMonth(year, month) {
	  if (month === 3 || month === 5 || month === 8 || month === 10) {
	    return 30;
	  }
	
	  if (month === 1) {
	    if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
	      return 29;
	    } else {
	      return 28;
	    }
	  }
	
	  return 31;
	};
	
	var getDayCountOfYear = exports.getDayCountOfYear = function getDayCountOfYear(year) {
	  var isLeapYear = year % 400 === 0 || year % 100 !== 0 && year % 4 === 0;
	  return isLeapYear ? 366 : 365;
	};
	
	var getFirstDayOfMonth = exports.getFirstDayOfMonth = function getFirstDayOfMonth(date) {
	  var temp = new Date(date.getTime());
	  temp.setDate(1);
	  return temp.getDay();
	};
	
	// see: https://stackoverflow.com/questions/3674539/incrementing-a-date-in-javascript
	// {prev, next} Date should work for Daylight Saving Time
	// Adding 24 * 60 * 60 * 1000 does not work in the above scenario
	var prevDate = exports.prevDate = function prevDate(date) {
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	  return new Date(date.getFullYear(), date.getMonth(), date.getDate() - amount);
	};
	
	var nextDate = exports.nextDate = function nextDate(date) {
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	  return new Date(date.getFullYear(), date.getMonth(), date.getDate() + amount);
	};
	
	var getStartDateOfMonth = exports.getStartDateOfMonth = function getStartDateOfMonth(year, month) {
	  var result = new Date(year, month, 1);
	  var day = result.getDay();
	
	  if (day === 0) {
	    return prevDate(result, 7);
	  } else {
	    return prevDate(result, day);
	  }
	};
	
	var getWeekNumber = exports.getWeekNumber = function getWeekNumber(src) {
	  if (!isDate(src)) return null;
	  var date = new Date(src.getTime());
	  date.setHours(0, 0, 0, 0);
	  // Thursday in current week decides the year.
	  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
	  // January 4 is always in week 1.
	  var week1 = new Date(date.getFullYear(), 0, 4);
	  // Adjust to Thursday in week 1 and count number of weeks from date to week 1.
	  // Rounding should be fine for Daylight Saving Time. Its shift should never be more than 12 hours.
	  return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
	};
	
	var getRangeHours = exports.getRangeHours = function getRangeHours(ranges) {
	  var hours = [];
	  var disabledHours = [];
	
	  (ranges || []).forEach(function (range) {
	    var value = range.map(function (date) {
	      return date.getHours();
	    });
	
	    disabledHours = disabledHours.concat(newArray(value[0], value[1]));
	  });
	
	  if (disabledHours.length) {
	    for (var i = 0; i < 24; i++) {
	      hours[i] = disabledHours.indexOf(i) === -1;
	    }
	  } else {
	    for (var _i = 0; _i < 24; _i++) {
	      hours[_i] = false;
	    }
	  }
	
	  return hours;
	};
	
	var getPrevMonthLastDays = exports.getPrevMonthLastDays = function getPrevMonthLastDays(date, amount) {
	  if (amount <= 0) return [];
	  var temp = new Date(date.getTime());
	  temp.setDate(0);
	  var lastDay = temp.getDate();
	  return range(amount).map(function (_, index) {
	    return lastDay - (amount - index - 1);
	  });
	};
	
	var getMonthDays = exports.getMonthDays = function getMonthDays(date) {
	  var temp = new Date(date.getFullYear(), date.getMonth() + 1, 0);
	  var days = temp.getDate();
	  return range(days).map(function (_, index) {
	    return index + 1;
	  });
	};
	
	function setRangeData(arr, start, end, value) {
	  for (var i = start; i < end; i++) {
	    arr[i] = value;
	  }
	}
	
	var getRangeMinutes = exports.getRangeMinutes = function getRangeMinutes(ranges, hour) {
	  var minutes = new Array(60);
	
	  if (ranges.length > 0) {
	    ranges.forEach(function (range) {
	      var start = range[0];
	      var end = range[1];
	      var startHour = start.getHours();
	      var startMinute = start.getMinutes();
	      var endHour = end.getHours();
	      var endMinute = end.getMinutes();
	      if (startHour === hour && endHour !== hour) {
	        setRangeData(minutes, startMinute, 60, true);
	      } else if (startHour === hour && endHour === hour) {
	        setRangeData(minutes, startMinute, endMinute + 1, true);
	      } else if (startHour !== hour && endHour === hour) {
	        setRangeData(minutes, 0, endMinute + 1, true);
	      } else if (startHour < hour && endHour > hour) {
	        setRangeData(minutes, 0, 60, true);
	      }
	    });
	  } else {
	    setRangeData(minutes, 0, 60, true);
	  }
	  return minutes;
	};
	
	var range = exports.range = function range(n) {
	  // see https://stackoverflow.com/questions/3746725/create-a-javascript-array-containing-1-n
	  return Array.apply(null, { length: n }).map(function (_, n) {
	    return n;
	  });
	};
	
	var modifyDate = exports.modifyDate = function modifyDate(date, y, m, d) {
	  return new Date(y, m, d, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
	};
	
	var modifyTime = exports.modifyTime = function modifyTime(date, h, m, s) {
	  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), h, m, s, date.getMilliseconds());
	};
	
	var modifyWithTimeString = exports.modifyWithTimeString = function modifyWithTimeString(date, time) {
	  if (date == null || !time) {
	    return date;
	  }
	  time = parseDate(time, 'HH:mm:ss');
	  return modifyTime(date, time.getHours(), time.getMinutes(), time.getSeconds());
	};
	
	var clearTime = exports.clearTime = function clearTime(date) {
	  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
	};
	
	var clearMilliseconds = exports.clearMilliseconds = function clearMilliseconds(date) {
	  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
	};
	
	var limitTimeRange = exports.limitTimeRange = function limitTimeRange(date, ranges) {
	  var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'HH:mm:ss';
	
	  // TODO: refactory a more elegant solution
	  if (ranges.length === 0) return date;
	  var normalizeDate = function normalizeDate(date) {
	    return _date2.default.parse(_date2.default.format(date, format), format);
	  };
	  var ndate = normalizeDate(date);
	  var nranges = ranges.map(function (range) {
	    return range.map(normalizeDate);
	  });
	  if (nranges.some(function (nrange) {
	    return ndate >= nrange[0] && ndate <= nrange[1];
	  })) return date;
	
	  var minDate = nranges[0][0];
	  var maxDate = nranges[0][0];
	
	  nranges.forEach(function (nrange) {
	    minDate = new Date(Math.min(nrange[0], minDate));
	    maxDate = new Date(Math.max(nrange[1], minDate));
	  });
	
	  var ret = ndate < minDate ? minDate : maxDate;
	  // preserve Year/Month/Date
	  return modifyDate(ret, date.getFullYear(), date.getMonth(), date.getDate());
	};
	
	var timeWithinRange = exports.timeWithinRange = function timeWithinRange(date, selectableRange, format) {
	  var limitedDate = limitTimeRange(date, selectableRange, format);
	  return limitedDate.getTime() === date.getTime();
	};
	
	var changeYearMonthAndClampDate = exports.changeYearMonthAndClampDate = function changeYearMonthAndClampDate(date, year, month) {
	  // clamp date to the number of days in `year`, `month`
	  // eg: (2010-1-31, 2010, 2) => 2010-2-28
	  var monthDate = Math.min(date.getDate(), getDayCountOfMonth(year, month));
	  return modifyDate(date, year, month, monthDate);
	};
	
	var prevMonth = exports.prevMonth = function prevMonth(date) {
	  var year = date.getFullYear();
	  var month = date.getMonth();
	  return month === 0 ? changeYearMonthAndClampDate(date, year - 1, 11) : changeYearMonthAndClampDate(date, year, month - 1);
	};
	
	var nextMonth = exports.nextMonth = function nextMonth(date) {
	  var year = date.getFullYear();
	  var month = date.getMonth();
	  return month === 11 ? changeYearMonthAndClampDate(date, year + 1, 0) : changeYearMonthAndClampDate(date, year, month + 1);
	};
	
	var prevYear = exports.prevYear = function prevYear(date) {
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	  var year = date.getFullYear();
	  var month = date.getMonth();
	  return changeYearMonthAndClampDate(date, year - amount, month);
	};
	
	var nextYear = exports.nextYear = function nextYear(date) {
	  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	
	  var year = date.getFullYear();
	  var month = date.getMonth();
	  return changeYearMonthAndClampDate(date, year + amount, month);
	};
	
	var extractDateFormat = exports.extractDateFormat = function extractDateFormat(format) {
	  return format.replace(/\W?m{1,2}|\W?ZZ/g, '').replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, '').trim();
	};
	
	var extractTimeFormat = exports.extractTimeFormat = function extractTimeFormat(format) {
	  return format.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?y{2,4}/g, '').trim();
	};
	
	var validateRangeInOneMonth = exports.validateRangeInOneMonth = function validateRangeInOneMonth(start, end) {
	  return start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear();
	};

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/* Modified from https://github.com/taylorhakes/fecha
	 *
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2015 Taylor Hakes
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 *     The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 *     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	
	/*eslint-disable*/
	// 把 YYYY-MM-DD 改成了 yyyy-MM-dd
	(function (main) {
	  'use strict';
	
	  /**
	   * Parse or format dates
	   * @class fecha
	   */
	
	  var fecha = {};
	  var token = /d{1,4}|M{1,4}|yy(?:yy)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
	  var twoDigits = '\\d\\d?';
	  var threeDigits = '\\d{3}';
	  var fourDigits = '\\d{4}';
	  var word = '[^\\s]+';
	  var literal = /\[([^]*?)\]/gm;
	  var noop = function noop() {};
	
	  function regexEscape(str) {
	    return str.replace(/[|\\{()[^$+*?.-]/g, '\\$&');
	  }
	
	  function shorten(arr, sLen) {
	    var newArr = [];
	    for (var i = 0, len = arr.length; i < len; i++) {
	      newArr.push(arr[i].substr(0, sLen));
	    }
	    return newArr;
	  }
	
	  function monthUpdate(arrName) {
	    return function (d, v, i18n) {
	      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
	      if (~index) {
	        d.month = index;
	      }
	    };
	  }
	
	  function pad(val, len) {
	    val = String(val);
	    len = len || 2;
	    while (val.length < len) {
	      val = '0' + val;
	    }
	    return val;
	  }
	
	  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	  var monthNamesShort = shorten(monthNames, 3);
	  var dayNamesShort = shorten(dayNames, 3);
	  fecha.i18n = {
	    dayNamesShort: dayNamesShort,
	    dayNames: dayNames,
	    monthNamesShort: monthNamesShort,
	    monthNames: monthNames,
	    amPm: ['am', 'pm'],
	    DoFn: function DoFn(D) {
	      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
	    }
	  };
	
	  var formatFlags = {
	    D: function D(dateObj) {
	      return dateObj.getDay();
	    },
	    DD: function DD(dateObj) {
	      return pad(dateObj.getDay());
	    },
	    Do: function Do(dateObj, i18n) {
	      return i18n.DoFn(dateObj.getDate());
	    },
	    d: function d(dateObj) {
	      return dateObj.getDate();
	    },
	    dd: function dd(dateObj) {
	      return pad(dateObj.getDate());
	    },
	    ddd: function ddd(dateObj, i18n) {
	      return i18n.dayNamesShort[dateObj.getDay()];
	    },
	    dddd: function dddd(dateObj, i18n) {
	      return i18n.dayNames[dateObj.getDay()];
	    },
	    M: function M(dateObj) {
	      return dateObj.getMonth() + 1;
	    },
	    MM: function MM(dateObj) {
	      return pad(dateObj.getMonth() + 1);
	    },
	    MMM: function MMM(dateObj, i18n) {
	      return i18n.monthNamesShort[dateObj.getMonth()];
	    },
	    MMMM: function MMMM(dateObj, i18n) {
	      return i18n.monthNames[dateObj.getMonth()];
	    },
	    yy: function yy(dateObj) {
	      return pad(String(dateObj.getFullYear()), 4).substr(2);
	    },
	    yyyy: function yyyy(dateObj) {
	      return pad(dateObj.getFullYear(), 4);
	    },
	    h: function h(dateObj) {
	      return dateObj.getHours() % 12 || 12;
	    },
	    hh: function hh(dateObj) {
	      return pad(dateObj.getHours() % 12 || 12);
	    },
	    H: function H(dateObj) {
	      return dateObj.getHours();
	    },
	    HH: function HH(dateObj) {
	      return pad(dateObj.getHours());
	    },
	    m: function m(dateObj) {
	      return dateObj.getMinutes();
	    },
	    mm: function mm(dateObj) {
	      return pad(dateObj.getMinutes());
	    },
	    s: function s(dateObj) {
	      return dateObj.getSeconds();
	    },
	    ss: function ss(dateObj) {
	      return pad(dateObj.getSeconds());
	    },
	    S: function S(dateObj) {
	      return Math.round(dateObj.getMilliseconds() / 100);
	    },
	    SS: function SS(dateObj) {
	      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
	    },
	    SSS: function SSS(dateObj) {
	      return pad(dateObj.getMilliseconds(), 3);
	    },
	    a: function a(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
	    },
	    A: function A(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
	    },
	    ZZ: function ZZ(dateObj) {
	      var o = dateObj.getTimezoneOffset();
	      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
	    }
	  };
	
	  var parseFlags = {
	    d: [twoDigits, function (d, v) {
	      d.day = v;
	    }],
	    Do: [twoDigits + word, function (d, v) {
	      d.day = parseInt(v, 10);
	    }],
	    M: [twoDigits, function (d, v) {
	      d.month = v - 1;
	    }],
	    yy: [twoDigits, function (d, v) {
	      var da = new Date(),
	          cent = +('' + da.getFullYear()).substr(0, 2);
	      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
	    }],
	    h: [twoDigits, function (d, v) {
	      d.hour = v;
	    }],
	    m: [twoDigits, function (d, v) {
	      d.minute = v;
	    }],
	    s: [twoDigits, function (d, v) {
	      d.second = v;
	    }],
	    yyyy: [fourDigits, function (d, v) {
	      d.year = v;
	    }],
	    S: ['\\d', function (d, v) {
	      d.millisecond = v * 100;
	    }],
	    SS: ['\\d{2}', function (d, v) {
	      d.millisecond = v * 10;
	    }],
	    SSS: [threeDigits, function (d, v) {
	      d.millisecond = v;
	    }],
	    D: [twoDigits, noop],
	    ddd: [word, noop],
	    MMM: [word, monthUpdate('monthNamesShort')],
	    MMMM: [word, monthUpdate('monthNames')],
	    a: [word, function (d, v, i18n) {
	      var val = v.toLowerCase();
	      if (val === i18n.amPm[0]) {
	        d.isPm = false;
	      } else if (val === i18n.amPm[1]) {
	        d.isPm = true;
	      }
	    }],
	    ZZ: ['[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z', function (d, v) {
	      var parts = (v + '').match(/([+-]|\d\d)/gi),
	          minutes;
	
	      if (parts) {
	        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
	        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
	      }
	    }]
	  };
	  parseFlags.dd = parseFlags.d;
	  parseFlags.dddd = parseFlags.ddd;
	  parseFlags.DD = parseFlags.D;
	  parseFlags.mm = parseFlags.m;
	  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
	  parseFlags.MM = parseFlags.M;
	  parseFlags.ss = parseFlags.s;
	  parseFlags.A = parseFlags.a;
	
	  // Some common format strings
	  fecha.masks = {
	    default: 'ddd MMM dd yyyy HH:mm:ss',
	    shortDate: 'M/D/yy',
	    mediumDate: 'MMM d, yyyy',
	    longDate: 'MMMM d, yyyy',
	    fullDate: 'dddd, MMMM d, yyyy',
	    shortTime: 'HH:mm',
	    mediumTime: 'HH:mm:ss',
	    longTime: 'HH:mm:ss.SSS'
	  };
	
	  /***
	   * Format a date
	   * @method format
	   * @param {Date|number} dateObj
	   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
	   */
	  fecha.format = function (dateObj, mask, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;
	
	    if (typeof dateObj === 'number') {
	      dateObj = new Date(dateObj);
	    }
	
	    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
	      throw new Error('Invalid Date in fecha.format');
	    }
	
	    mask = fecha.masks[mask] || mask || fecha.masks['default'];
	
	    var literals = [];
	
	    // Make literals inactive by replacing them with ??
	    mask = mask.replace(literal, function ($0, $1) {
	      literals.push($1);
	      return '@@@';
	    });
	    // Apply formatting rules
	    mask = mask.replace(token, function ($0) {
	      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
	    });
	    // Inline literal values back into the formatted value
	    return mask.replace(/@@@/g, function () {
	      return literals.shift();
	    });
	  };
	
	  /**
	   * Parse a date string into an object, changes - into /
	   * @method parse
	   * @param {string} dateStr Date string
	   * @param {string} format Date parse format
	   * @returns {Date|boolean}
	   */
	  fecha.parse = function (dateStr, format, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;
	
	    if (typeof format !== 'string') {
	      throw new Error('Invalid format in fecha.parse');
	    }
	
	    format = fecha.masks[format] || format;
	
	    // Avoid regular expression denial of service, fail early for really long strings
	    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
	    if (dateStr.length > 1000) {
	      return null;
	    }
	
	    var dateInfo = {};
	    var parseInfo = [];
	    var literals = [];
	    format = format.replace(literal, function ($0, $1) {
	      literals.push($1);
	      return '@@@';
	    });
	    var newFormat = regexEscape(format).replace(token, function ($0) {
	      if (parseFlags[$0]) {
	        var info = parseFlags[$0];
	        parseInfo.push(info[1]);
	        return '(' + info[0] + ')';
	      }
	
	      return $0;
	    });
	    newFormat = newFormat.replace(/@@@/g, function () {
	      return literals.shift();
	    });
	    var matches = dateStr.match(new RegExp(newFormat, 'i'));
	    if (!matches) {
	      return null;
	    }
	
	    for (var i = 1; i < matches.length; i++) {
	      parseInfo[i - 1](dateInfo, matches[i], i18n);
	    }
	
	    var today = new Date();
	    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
	      dateInfo.hour = +dateInfo.hour + 12;
	    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
	      dateInfo.hour = 0;
	    }
	
	    var date;
	    if (dateInfo.timezoneOffset != null) {
	      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
	      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
	    } else {
	      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
	    }
	    return date;
	  };
	
	  /* istanbul ignore next */
	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = fecha;
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return fecha;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    main.fecha = fecha;
	  }
	})(undefined);

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * @fileOverview Kickass library to create and place poppers near their reference elements.
	 * @version {{version}}
	 * @license
	 * Copyright (c) 2016 Federico Zivolo and contributors
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	
	//
	// Cross module loader
	// Supported: Node, AMD, Browser globals
	//
	;(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.Popper = factory();
	    }
	})(undefined, function () {
	
	    'use strict';
	
	    var root = window;
	
	    // default options
	    var DEFAULTS = {
	        // placement of the popper
	        placement: 'bottom',
	
	        gpuAcceleration: true,
	
	        // shift popper from its origin by the given amount of pixels (can be negative)
	        offset: 0,
	
	        // the element which will act as boundary of the popper
	        boundariesElement: 'viewport',
	
	        // amount of pixel used to define a minimum distance between the boundaries and the popper
	        boundariesPadding: 5,
	
	        // popper will try to prevent overflow following this order,
	        // by default, then, it could overflow on the left and on top of the boundariesElement
	        preventOverflowOrder: ['left', 'right', 'top', 'bottom'],
	
	        // the behavior used by flip to change the placement of the popper
	        flipBehavior: 'flip',
	
	        arrowElement: '[x-arrow]',
	
	        arrowOffset: 0,
	
	        // list of functions used to modify the offsets before they are applied to the popper
	        modifiers: ['shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle'],
	
	        modifiersIgnored: [],
	
	        forceAbsolute: false
	    };
	
	    /**
	     * Create a new Popper.js instance
	     * @constructor Popper
	     * @param {HTMLElement} reference - The reference element used to position the popper
	     * @param {HTMLElement|Object} popper
	     *      The HTML element used as popper, or a configuration used to generate the popper.
	     * @param {String} [popper.tagName='div'] The tag name of the generated popper.
	     * @param {Array} [popper.classNames=['popper']] Array of classes to apply to the generated popper.
	     * @param {Array} [popper.attributes] Array of attributes to apply, specify `attr:value` to assign a value to it.
	     * @param {HTMLElement|String} [popper.parent=window.document.body] The parent element, given as HTMLElement or as query string.
	     * @param {String} [popper.content=''] The content of the popper, it can be text, html, or node; if it is not text, set `contentType` to `html` or `node`.
	     * @param {String} [popper.contentType='text'] If `html`, the `content` will be parsed as HTML. If `node`, it will be appended as-is.
	     * @param {String} [popper.arrowTagName='div'] Same as `popper.tagName` but for the arrow element.
	     * @param {Array} [popper.arrowClassNames='popper__arrow'] Same as `popper.classNames` but for the arrow element.
	     * @param {String} [popper.arrowAttributes=['x-arrow']] Same as `popper.attributes` but for the arrow element.
	     * @param {Object} options
	     * @param {String} [options.placement=bottom]
	     *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -right),
	     *      left(-start, -end)`
	     *
	     * @param {HTMLElement|String} [options.arrowElement='[x-arrow]']
	     *      The DOM Node used as arrow for the popper, or a CSS selector used to get the DOM node. It must be child of
	     *      its parent Popper. Popper.js will apply to the given element the style required to align the arrow with its
	     *      reference element.
	     *      By default, it will look for a child node of the popper with the `x-arrow` attribute.
	     *
	     * @param {Boolean} [options.gpuAcceleration=true]
	     *      When this property is set to true, the popper position will be applied using CSS3 translate3d, allowing the
	     *      browser to use the GPU to accelerate the rendering.
	     *      If set to false, the popper will be placed using `top` and `left` properties, not using the GPU.
	     *
	     * @param {Number} [options.offset=0]
	     *      Amount of pixels the popper will be shifted (can be negative).
	     *
	     * @param {String|Element} [options.boundariesElement='viewport']
	     *      The element which will define the boundaries of the popper position, the popper will never be placed outside
	     *      of the defined boundaries (except if `keepTogether` is enabled)
	     *
	     * @param {Number} [options.boundariesPadding=5]
	     *      Additional padding for the boundaries
	     *
	     * @param {Array} [options.preventOverflowOrder=['left', 'right', 'top', 'bottom']]
	     *      Order used when Popper.js tries to avoid overflows from the boundaries, they will be checked in order,
	     *      this means that the last ones will never overflow
	     *
	     * @param {String|Array} [options.flipBehavior='flip']
	     *      The behavior used by the `flip` modifier to change the placement of the popper when the latter is trying to
	     *      overlap its reference element. Defining `flip` as value, the placement will be flipped on
	     *      its axis (`right - left`, `top - bottom`).
	     *      You can even pass an array of placements (eg: `['right', 'left', 'top']` ) to manually specify
	     *      how alter the placement when a flip is needed. (eg. in the above example, it would first flip from right to left,
	     *      then, if even in its new placement, the popper is overlapping its reference element, it will be moved to top)
	     *
	     * @param {Array} [options.modifiers=[ 'shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle']]
	     *      List of functions used to modify the data before they are applied to the popper, add your custom functions
	     *      to this array to edit the offsets and placement.
	     *      The function should reflect the @params and @returns of preventOverflow
	     *
	     * @param {Array} [options.modifiersIgnored=[]]
	     *      Put here any built-in modifier name you want to exclude from the modifiers list
	     *      The function should reflect the @params and @returns of preventOverflow
	     *
	     * @param {Boolean} [options.removeOnDestroy=false]
	     *      Set to true if you want to automatically remove the popper when you call the `destroy` method.
	     */
	    function Popper(reference, popper, options) {
	        this._reference = reference.jquery ? reference[0] : reference;
	        this.state = {};
	
	        // if the popper variable is a configuration object, parse it to generate an HTMLElement
	        // generate a default popper if is not defined
	        var isNotDefined = typeof popper === 'undefined' || popper === null;
	        var isConfig = popper && Object.prototype.toString.call(popper) === '[object Object]';
	        if (isNotDefined || isConfig) {
	            this._popper = this.parse(isConfig ? popper : {});
	        }
	        // otherwise, use the given HTMLElement as popper
	        else {
	                this._popper = popper.jquery ? popper[0] : popper;
	            }
	
	        // with {} we create a new object with the options inside it
	        this._options = Object.assign({}, DEFAULTS, options);
	
	        // refactoring modifiers' list
	        this._options.modifiers = this._options.modifiers.map(function (modifier) {
	            // remove ignored modifiers
	            if (this._options.modifiersIgnored.indexOf(modifier) !== -1) return;
	
	            // set the x-placement attribute before everything else because it could be used to add margins to the popper
	            // margins needs to be calculated to get the correct popper offsets
	            if (modifier === 'applyStyle') {
	                this._popper.setAttribute('x-placement', this._options.placement);
	            }
	
	            // return predefined modifier identified by string or keep the custom one
	            return this.modifiers[modifier] || modifier;
	        }.bind(this));
	
	        // make sure to apply the popper position before any computation
	        this.state.position = this._getPosition(this._popper, this._reference);
	        setStyle(this._popper, { position: this.state.position, top: 0 });
	
	        // fire the first update to position the popper in the right place
	        this.update();
	
	        // setup event listeners, they will take care of update the position in specific situations
	        this._setupEventListeners();
	        return this;
	    }
	
	    //
	    // Methods
	    //
	    /**
	     * Destroy the popper
	     * @method
	     * @memberof Popper
	     */
	    Popper.prototype.destroy = function () {
	        this._popper.removeAttribute('x-placement');
	        this._popper.style.left = '';
	        this._popper.style.position = '';
	        this._popper.style.top = '';
	        this._popper.style[getSupportedPropertyName('transform')] = '';
	        this._removeEventListeners();
	
	        // remove the popper if user explicity asked for the deletion on destroy
	        if (this._options.removeOnDestroy) {
	            this._popper.remove();
	        }
	        return this;
	    };
	
	    /**
	     * Updates the position of the popper, computing the new offsets and applying the new style
	     * @method
	     * @memberof Popper
	     */
	    Popper.prototype.update = function () {
	        var data = { instance: this, styles: {} };
	
	        // store placement inside the data object, modifiers will be able to edit `placement` if needed
	        // and refer to _originalPlacement to know the original value
	        data.placement = this._options.placement;
	        data._originalPlacement = this._options.placement;
	
	        // compute the popper and reference offsets and put them inside data.offsets
	        data.offsets = this._getOffsets(this._popper, this._reference, data.placement);
	
	        // get boundaries
	        data.boundaries = this._getBoundaries(data, this._options.boundariesPadding, this._options.boundariesElement);
	
	        data = this.runModifiers(data, this._options.modifiers);
	
	        if (typeof this.state.updateCallback === 'function') {
	            this.state.updateCallback(data);
	        }
	    };
	
	    /**
	     * If a function is passed, it will be executed after the initialization of popper with as first argument the Popper instance.
	     * @method
	     * @memberof Popper
	     * @param {Function} callback
	     */
	    Popper.prototype.onCreate = function (callback) {
	        // the createCallbacks return as first argument the popper instance
	        callback(this);
	        return this;
	    };
	
	    /**
	     * If a function is passed, it will be executed after each update of popper with as first argument the set of coordinates and informations
	     * used to style popper and its arrow.
	     * NOTE: it doesn't get fired on the first call of the `Popper.update()` method inside the `Popper` constructor!
	     * @method
	     * @memberof Popper
	     * @param {Function} callback
	     */
	    Popper.prototype.onUpdate = function (callback) {
	        this.state.updateCallback = callback;
	        return this;
	    };
	
	    /**
	     * Helper used to generate poppers from a configuration file
	     * @method
	     * @memberof Popper
	     * @param config {Object} configuration
	     * @returns {HTMLElement} popper
	     */
	    Popper.prototype.parse = function (config) {
	        var defaultConfig = {
	            tagName: 'div',
	            classNames: ['popper'],
	            attributes: [],
	            parent: root.document.body,
	            content: '',
	            contentType: 'text',
	            arrowTagName: 'div',
	            arrowClassNames: ['popper__arrow'],
	            arrowAttributes: ['x-arrow']
	        };
	        config = Object.assign({}, defaultConfig, config);
	
	        var d = root.document;
	
	        var popper = d.createElement(config.tagName);
	        addClassNames(popper, config.classNames);
	        addAttributes(popper, config.attributes);
	        if (config.contentType === 'node') {
	            popper.appendChild(config.content.jquery ? config.content[0] : config.content);
	        } else if (config.contentType === 'html') {
	            popper.innerHTML = config.content;
	        } else {
	            popper.textContent = config.content;
	        }
	
	        if (config.arrowTagName) {
	            var arrow = d.createElement(config.arrowTagName);
	            addClassNames(arrow, config.arrowClassNames);
	            addAttributes(arrow, config.arrowAttributes);
	            popper.appendChild(arrow);
	        }
	
	        var parent = config.parent.jquery ? config.parent[0] : config.parent;
	
	        // if the given parent is a string, use it to match an element
	        // if more than one element is matched, the first one will be used as parent
	        // if no elements are matched, the script will throw an error
	        if (typeof parent === 'string') {
	            parent = d.querySelectorAll(config.parent);
	            if (parent.length > 1) {
	                console.warn('WARNING: the given `parent` query(' + config.parent + ') matched more than one element, the first one will be used');
	            }
	            if (parent.length === 0) {
	                throw 'ERROR: the given `parent` doesn\'t exists!';
	            }
	            parent = parent[0];
	        }
	        // if the given parent is a DOM nodes list or an array of nodes with more than one element,
	        // the first one will be used as parent
	        if (parent.length > 1 && parent instanceof Element === false) {
	            console.warn('WARNING: you have passed as parent a list of elements, the first one will be used');
	            parent = parent[0];
	        }
	
	        // append the generated popper to its parent
	        parent.appendChild(popper);
	
	        return popper;
	
	        /**
	         * Adds class names to the given element
	         * @function
	         * @ignore
	         * @param {HTMLElement} target
	         * @param {Array} classes
	         */
	        function addClassNames(element, classNames) {
	            classNames.forEach(function (className) {
	                element.classList.add(className);
	            });
	        }
	
	        /**
	         * Adds attributes to the given element
	         * @function
	         * @ignore
	         * @param {HTMLElement} target
	         * @param {Array} attributes
	         * @example
	         * addAttributes(element, [ 'data-info:foobar' ]);
	         */
	        function addAttributes(element, attributes) {
	            attributes.forEach(function (attribute) {
	                element.setAttribute(attribute.split(':')[0], attribute.split(':')[1] || '');
	            });
	        }
	    };
	
	    /**
	     * Helper used to get the position which will be applied to the popper
	     * @method
	     * @memberof Popper
	     * @param config {HTMLElement} popper element
	     * @param reference {HTMLElement} reference element
	     * @returns {String} position
	     */
	    Popper.prototype._getPosition = function (popper, reference) {
	        var container = getOffsetParent(reference);
	
	        if (this._options.forceAbsolute) {
	            return 'absolute';
	        }
	
	        // Decide if the popper will be fixed
	        // If the reference element is inside a fixed context, the popper will be fixed as well to allow them to scroll together
	        var isParentFixed = isFixed(reference, container);
	        return isParentFixed ? 'fixed' : 'absolute';
	    };
	
	    /**
	     * Get offsets to the popper
	     * @method
	     * @memberof Popper
	     * @access private
	     * @param {Element} popper - the popper element
	     * @param {Element} reference - the reference element (the popper will be relative to this)
	     * @returns {Object} An object containing the offsets which will be applied to the popper
	     */
	    Popper.prototype._getOffsets = function (popper, reference, placement) {
	        placement = placement.split('-')[0];
	        var popperOffsets = {};
	
	        popperOffsets.position = this.state.position;
	        var isParentFixed = popperOffsets.position === 'fixed';
	
	        //
	        // Get reference element position
	        //
	        var referenceOffsets = getOffsetRectRelativeToCustomParent(reference, getOffsetParent(popper), isParentFixed);
	
	        //
	        // Get popper sizes
	        //
	        var popperRect = getOuterSizes(popper);
	
	        //
	        // Compute offsets of popper
	        //
	
	        // depending by the popper placement we have to compute its offsets slightly differently
	        if (['right', 'left'].indexOf(placement) !== -1) {
	            popperOffsets.top = referenceOffsets.top + referenceOffsets.height / 2 - popperRect.height / 2;
	            if (placement === 'left') {
	                popperOffsets.left = referenceOffsets.left - popperRect.width;
	            } else {
	                popperOffsets.left = referenceOffsets.right;
	            }
	        } else {
	            popperOffsets.left = referenceOffsets.left + referenceOffsets.width / 2 - popperRect.width / 2;
	            if (placement === 'top') {
	                popperOffsets.top = referenceOffsets.top - popperRect.height;
	            } else {
	                popperOffsets.top = referenceOffsets.bottom;
	            }
	        }
	
	        // Add width and height to our offsets object
	        popperOffsets.width = popperRect.width;
	        popperOffsets.height = popperRect.height;
	
	        return {
	            popper: popperOffsets,
	            reference: referenceOffsets
	        };
	    };
	
	    /**
	     * Setup needed event listeners used to update the popper position
	     * @method
	     * @memberof Popper
	     * @access private
	     */
	    Popper.prototype._setupEventListeners = function () {
	        // NOTE: 1 DOM access here
	        this.state.updateBound = this.update.bind(this);
	        root.addEventListener('resize', this.state.updateBound);
	        // if the boundariesElement is window we don't need to listen for the scroll event
	        if (this._options.boundariesElement !== 'window') {
	            var target = getScrollParent(this._reference);
	            // here it could be both `body` or `documentElement` thanks to Firefox, we then check both
	            if (target === root.document.body || target === root.document.documentElement) {
	                target = root;
	            }
	            target.addEventListener('scroll', this.state.updateBound);
	            this.state.scrollTarget = target;
	        }
	    };
	
	    /**
	     * Remove event listeners used to update the popper position
	     * @method
	     * @memberof Popper
	     * @access private
	     */
	    Popper.prototype._removeEventListeners = function () {
	        // NOTE: 1 DOM access here
	        root.removeEventListener('resize', this.state.updateBound);
	        if (this._options.boundariesElement !== 'window' && this.state.scrollTarget) {
	            this.state.scrollTarget.removeEventListener('scroll', this.state.updateBound);
	            this.state.scrollTarget = null;
	        }
	        this.state.updateBound = null;
	    };
	
	    /**
	     * Computed the boundaries limits and return them
	     * @method
	     * @memberof Popper
	     * @access private
	     * @param {Object} data - Object containing the property "offsets" generated by `_getOffsets`
	     * @param {Number} padding - Boundaries padding
	     * @param {Element} boundariesElement - Element used to define the boundaries
	     * @returns {Object} Coordinates of the boundaries
	     */
	    Popper.prototype._getBoundaries = function (data, padding, boundariesElement) {
	        // NOTE: 1 DOM access here
	        var boundaries = {};
	        var width, height;
	        if (boundariesElement === 'window') {
	            var body = root.document.body,
	                html = root.document.documentElement;
	
	            height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
	            width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
	
	            boundaries = {
	                top: 0,
	                right: width,
	                bottom: height,
	                left: 0
	            };
	        } else if (boundariesElement === 'viewport') {
	            var offsetParent = getOffsetParent(this._popper);
	            var scrollParent = getScrollParent(this._popper);
	            var offsetParentRect = getOffsetRect(offsetParent);
	
	            // Thanks the fucking native API, `document.body.scrollTop` & `document.documentElement.scrollTop`
	            var getScrollTopValue = function getScrollTopValue(element) {
	                return element == document.body ? Math.max(document.documentElement.scrollTop, document.body.scrollTop) : element.scrollTop;
	            };
	            var getScrollLeftValue = function getScrollLeftValue(element) {
	                return element == document.body ? Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) : element.scrollLeft;
	            };
	
	            // if the popper is fixed we don't have to substract scrolling from the boundaries
	            var scrollTop = data.offsets.popper.position === 'fixed' ? 0 : getScrollTopValue(scrollParent);
	            var scrollLeft = data.offsets.popper.position === 'fixed' ? 0 : getScrollLeftValue(scrollParent);
	
	            boundaries = {
	                top: 0 - (offsetParentRect.top - scrollTop),
	                right: root.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),
	                bottom: root.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),
	                left: 0 - (offsetParentRect.left - scrollLeft)
	            };
	        } else {
	            if (getOffsetParent(this._popper) === boundariesElement) {
	                boundaries = {
	                    top: 0,
	                    left: 0,
	                    right: boundariesElement.clientWidth,
	                    bottom: boundariesElement.clientHeight
	                };
	            } else {
	                boundaries = getOffsetRect(boundariesElement);
	            }
	        }
	        boundaries.left += padding;
	        boundaries.right -= padding;
	        boundaries.top = boundaries.top + padding;
	        boundaries.bottom = boundaries.bottom - padding;
	        return boundaries;
	    };
	
	    /**
	     * Loop trough the list of modifiers and run them in order, each of them will then edit the data object
	     * @method
	     * @memberof Popper
	     * @access public
	     * @param {Object} data
	     * @param {Array} modifiers
	     * @param {Function} ends
	     */
	    Popper.prototype.runModifiers = function (data, modifiers, ends) {
	        var modifiersToRun = modifiers.slice();
	        if (ends !== undefined) {
	            modifiersToRun = this._options.modifiers.slice(0, getArrayKeyIndex(this._options.modifiers, ends));
	        }
	
	        modifiersToRun.forEach(function (modifier) {
	            if (isFunction(modifier)) {
	                data = modifier.call(this, data);
	            }
	        }.bind(this));
	
	        return data;
	    };
	
	    /**
	     * Helper used to know if the given modifier depends from another one.
	     * @method
	     * @memberof Popper
	     * @param {String} requesting - name of requesting modifier
	     * @param {String} requested - name of requested modifier
	     * @returns {Boolean}
	     */
	    Popper.prototype.isModifierRequired = function (requesting, requested) {
	        var index = getArrayKeyIndex(this._options.modifiers, requesting);
	        return !!this._options.modifiers.slice(0, index).filter(function (modifier) {
	            return modifier === requested;
	        }).length;
	    };
	
	    //
	    // Modifiers
	    //
	
	    /**
	     * Modifiers list
	     * @namespace Popper.modifiers
	     * @memberof Popper
	     * @type {Object}
	     */
	    Popper.prototype.modifiers = {};
	
	    /**
	     * Apply the computed styles to the popper element
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The same data object
	     */
	    Popper.prototype.modifiers.applyStyle = function (data) {
	        // apply the final offsets to the popper
	        // NOTE: 1 DOM access here
	        var styles = {
	            position: data.offsets.popper.position
	        };
	
	        // round top and left to avoid blurry text
	        var left = Math.round(data.offsets.popper.left);
	        var top = Math.round(data.offsets.popper.top);
	
	        // if gpuAcceleration is set to true and transform is supported, we use `translate3d` to apply the position to the popper
	        // we automatically use the supported prefixed version if needed
	        var prefixedProperty;
	        if (this._options.gpuAcceleration && (prefixedProperty = getSupportedPropertyName('transform'))) {
	            styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	            styles.top = 0;
	            styles.left = 0;
	        }
	        // othwerise, we use the standard `left` and `top` properties
	        else {
	                styles.left = left;
	                styles.top = top;
	            }
	
	        // any property present in `data.styles` will be applied to the popper,
	        // in this way we can make the 3rd party modifiers add custom styles to it
	        // Be aware, modifiers could override the properties defined in the previous
	        // lines of this modifier!
	        Object.assign(styles, data.styles);
	
	        setStyle(this._popper, styles);
	
	        // set an attribute which will be useful to style the tooltip (use it to properly position its arrow)
	        // NOTE: 1 DOM access here
	        this._popper.setAttribute('x-placement', data.placement);
	
	        // if the arrow modifier is required and the arrow style has been computed, apply the arrow style
	        if (this.isModifierRequired(this.modifiers.applyStyle, this.modifiers.arrow) && data.offsets.arrow) {
	            setStyle(data.arrowElement, data.offsets.arrow);
	        }
	
	        return data;
	    };
	
	    /**
	     * Modifier used to shift the popper on the start or end of its reference element side
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.shift = function (data) {
	        var placement = data.placement;
	        var basePlacement = placement.split('-')[0];
	        var shiftVariation = placement.split('-')[1];
	
	        // if shift shiftVariation is specified, run the modifier
	        if (shiftVariation) {
	            var reference = data.offsets.reference;
	            var popper = getPopperClientRect(data.offsets.popper);
	
	            var shiftOffsets = {
	                y: {
	                    start: { top: reference.top },
	                    end: { top: reference.top + reference.height - popper.height }
	                },
	                x: {
	                    start: { left: reference.left },
	                    end: { left: reference.left + reference.width - popper.width }
	                }
	            };
	
	            var axis = ['bottom', 'top'].indexOf(basePlacement) !== -1 ? 'x' : 'y';
	
	            data.offsets.popper = Object.assign(popper, shiftOffsets[axis][shiftVariation]);
	        }
	
	        return data;
	    };
	
	    /**
	     * Modifier used to make sure the popper does not overflows from it's boundaries
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by `update` method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.preventOverflow = function (data) {
	        var order = this._options.preventOverflowOrder;
	        var popper = getPopperClientRect(data.offsets.popper);
	
	        var check = {
	            left: function left() {
	                var left = popper.left;
	                if (popper.left < data.boundaries.left) {
	                    left = Math.max(popper.left, data.boundaries.left);
	                }
	                return { left: left };
	            },
	            right: function right() {
	                var left = popper.left;
	                if (popper.right > data.boundaries.right) {
	                    left = Math.min(popper.left, data.boundaries.right - popper.width);
	                }
	                return { left: left };
	            },
	            top: function top() {
	                var top = popper.top;
	                if (popper.top < data.boundaries.top) {
	                    top = Math.max(popper.top, data.boundaries.top);
	                }
	                return { top: top };
	            },
	            bottom: function bottom() {
	                var top = popper.top;
	                if (popper.bottom > data.boundaries.bottom) {
	                    top = Math.min(popper.top, data.boundaries.bottom - popper.height);
	                }
	                return { top: top };
	            }
	        };
	
	        order.forEach(function (direction) {
	            data.offsets.popper = Object.assign(popper, check[direction]());
	        });
	
	        return data;
	    };
	
	    /**
	     * Modifier used to make sure the popper is always near its reference
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.keepTogether = function (data) {
	        var popper = getPopperClientRect(data.offsets.popper);
	        var reference = data.offsets.reference;
	        var f = Math.floor;
	
	        if (popper.right < f(reference.left)) {
	            data.offsets.popper.left = f(reference.left) - popper.width;
	        }
	        if (popper.left > f(reference.right)) {
	            data.offsets.popper.left = f(reference.right);
	        }
	        if (popper.bottom < f(reference.top)) {
	            data.offsets.popper.top = f(reference.top) - popper.height;
	        }
	        if (popper.top > f(reference.bottom)) {
	            data.offsets.popper.top = f(reference.bottom);
	        }
	
	        return data;
	    };
	
	    /**
	     * Modifier used to flip the placement of the popper when the latter is starting overlapping its reference element.
	     * Requires the `preventOverflow` modifier before it in order to work.
	     * **NOTE:** This modifier will run all its previous modifiers everytime it tries to flip the popper!
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.flip = function (data) {
	        // check if preventOverflow is in the list of modifiers before the flip modifier.
	        // otherwise flip would not work as expected.
	        if (!this.isModifierRequired(this.modifiers.flip, this.modifiers.preventOverflow)) {
	            console.warn('WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!');
	            return data;
	        }
	
	        if (data.flipped && data.placement === data._originalPlacement) {
	            // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	            return data;
	        }
	
	        var placement = data.placement.split('-')[0];
	        var placementOpposite = getOppositePlacement(placement);
	        var variation = data.placement.split('-')[1] || '';
	
	        var flipOrder = [];
	        if (this._options.flipBehavior === 'flip') {
	            flipOrder = [placement, placementOpposite];
	        } else {
	            flipOrder = this._options.flipBehavior;
	        }
	
	        flipOrder.forEach(function (step, index) {
	            if (placement !== step || flipOrder.length === index + 1) {
	                return;
	            }
	
	            placement = data.placement.split('-')[0];
	            placementOpposite = getOppositePlacement(placement);
	
	            var popperOffsets = getPopperClientRect(data.offsets.popper);
	
	            // this boolean is used to distinguish right and bottom from top and left
	            // they need different computations to get flipped
	            var a = ['right', 'bottom'].indexOf(placement) !== -1;
	
	            // using Math.floor because the reference offsets may contain decimals we are not going to consider here
	            if (a && Math.floor(data.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) || !a && Math.floor(data.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])) {
	                // we'll use this boolean to detect any flip loop
	                data.flipped = true;
	                data.placement = flipOrder[index + 1];
	                if (variation) {
	                    data.placement += '-' + variation;
	                }
	                data.offsets.popper = this._getOffsets(this._popper, this._reference, data.placement).popper;
	
	                data = this.runModifiers(data, this._options.modifiers, this._flip);
	            }
	        }.bind(this));
	        return data;
	    };
	
	    /**
	     * Modifier used to add an offset to the popper, useful if you more granularity positioning your popper.
	     * The offsets will shift the popper on the side of its reference element.
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.offset = function (data) {
	        var offset = this._options.offset;
	        var popper = data.offsets.popper;
	
	        if (data.placement.indexOf('left') !== -1) {
	            popper.top -= offset;
	        } else if (data.placement.indexOf('right') !== -1) {
	            popper.top += offset;
	        } else if (data.placement.indexOf('top') !== -1) {
	            popper.left -= offset;
	        } else if (data.placement.indexOf('bottom') !== -1) {
	            popper.left += offset;
	        }
	        return data;
	    };
	
	    /**
	     * Modifier used to move the arrows on the edge of the popper to make sure them are always between the popper and the reference element
	     * It will use the CSS outer size of the arrow element to know how many pixels of conjuction are needed
	     * @method
	     * @memberof Popper.modifiers
	     * @argument {Object} data - The data object generated by _update method
	     * @returns {Object} The data object, properly modified
	     */
	    Popper.prototype.modifiers.arrow = function (data) {
	        var arrow = this._options.arrowElement;
	        var arrowOffset = this._options.arrowOffset;
	
	        // if the arrowElement is a string, suppose it's a CSS selector
	        if (typeof arrow === 'string') {
	            arrow = this._popper.querySelector(arrow);
	        }
	
	        // if arrow element is not found, don't run the modifier
	        if (!arrow) {
	            return data;
	        }
	
	        // the arrow element must be child of its popper
	        if (!this._popper.contains(arrow)) {
	            console.warn('WARNING: `arrowElement` must be child of its popper element!');
	            return data;
	        }
	
	        // arrow depends on keepTogether in order to work
	        if (!this.isModifierRequired(this.modifiers.arrow, this.modifiers.keepTogether)) {
	            console.warn('WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!');
	            return data;
	        }
	
	        var arrowStyle = {};
	        var placement = data.placement.split('-')[0];
	        var popper = getPopperClientRect(data.offsets.popper);
	        var reference = data.offsets.reference;
	        var isVertical = ['left', 'right'].indexOf(placement) !== -1;
	
	        var len = isVertical ? 'height' : 'width';
	        var side = isVertical ? 'top' : 'left';
	        var translate = isVertical ? 'translateY' : 'translateX';
	        var altSide = isVertical ? 'left' : 'top';
	        var opSide = isVertical ? 'bottom' : 'right';
	        var arrowSize = getOuterSizes(arrow)[len];
	
	        //
	        // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction
	        //
	
	        // top/left side
	        if (reference[opSide] - arrowSize < popper[side]) {
	            data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowSize);
	        }
	        // bottom/right side
	        if (reference[side] + arrowSize > popper[opSide]) {
	            data.offsets.popper[side] += reference[side] + arrowSize - popper[opSide];
	        }
	
	        // compute center of the popper
	        var center = reference[side] + (arrowOffset || reference[len] / 2 - arrowSize / 2);
	
	        var sideValue = center - popper[side];
	
	        // prevent arrow from being placed not contiguously to its popper
	        sideValue = Math.max(Math.min(popper[len] - arrowSize - 8, sideValue), 8);
	        arrowStyle[side] = sideValue;
	        arrowStyle[altSide] = ''; // make sure to remove any old style from the arrow
	
	        data.offsets.arrow = arrowStyle;
	        data.arrowElement = arrow;
	
	        return data;
	    };
	
	    //
	    // Helpers
	    //
	
	    /**
	     * Get the outer sizes of the given element (offset size + margins)
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Object} object containing width and height properties
	     */
	    function getOuterSizes(element) {
	        // NOTE: 1 DOM access here
	        var _display = element.style.display,
	            _visibility = element.style.visibility;
	        element.style.display = 'block';element.style.visibility = 'hidden';
	        var calcWidthToForceRepaint = element.offsetWidth;
	
	        // original method
	        var styles = root.getComputedStyle(element);
	        var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
	        var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
	        var result = { width: element.offsetWidth + y, height: element.offsetHeight + x };
	
	        // reset element styles
	        element.style.display = _display;element.style.visibility = _visibility;
	        return result;
	    }
	
	    /**
	     * Get the opposite placement of the given one/
	     * @function
	     * @ignore
	     * @argument {String} placement
	     * @returns {String} flipped placement
	     */
	    function getOppositePlacement(placement) {
	        var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	        return placement.replace(/left|right|bottom|top/g, function (matched) {
	            return hash[matched];
	        });
	    }
	
	    /**
	     * Given the popper offsets, generate an output similar to getBoundingClientRect
	     * @function
	     * @ignore
	     * @argument {Object} popperOffsets
	     * @returns {Object} ClientRect like output
	     */
	    function getPopperClientRect(popperOffsets) {
	        var offsets = Object.assign({}, popperOffsets);
	        offsets.right = offsets.left + offsets.width;
	        offsets.bottom = offsets.top + offsets.height;
	        return offsets;
	    }
	
	    /**
	     * Given an array and the key to find, returns its index
	     * @function
	     * @ignore
	     * @argument {Array} arr
	     * @argument keyToFind
	     * @returns index or null
	     */
	    function getArrayKeyIndex(arr, keyToFind) {
	        var i = 0,
	            key;
	        for (key in arr) {
	            if (arr[key] === keyToFind) {
	                return i;
	            }
	            i++;
	        }
	        return null;
	    }
	
	    /**
	     * Get CSS computed property of the given element
	     * @function
	     * @ignore
	     * @argument {Eement} element
	     * @argument {String} property
	     */
	    function getStyleComputedProperty(element, property) {
	        // NOTE: 1 DOM access here
	        var css = root.getComputedStyle(element, null);
	        return css[property];
	    }
	
	    /**
	     * Returns the offset parent of the given element
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Element} offset parent
	     */
	    function getOffsetParent(element) {
	        // NOTE: 1 DOM access here
	        var offsetParent = element.offsetParent;
	        return offsetParent === root.document.body || !offsetParent ? root.document.documentElement : offsetParent;
	    }
	
	    /**
	     * Returns the scrolling parent of the given element
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @returns {Element} offset parent
	     */
	    function getScrollParent(element) {
	        var parent = element.parentNode;
	
	        if (!parent) {
	            return element;
	        }
	
	        if (parent === root.document) {
	            // Firefox puts the scrollTOp value on `documentElement` instead of `body`, we then check which of them is
	            // greater than 0 and return the proper element
	            if (root.document.body.scrollTop || root.document.body.scrollLeft) {
	                return root.document.body;
	            } else {
	                return root.document.documentElement;
	            }
	        }
	
	        // Firefox want us to check `-x` and `-y` variations as well
	        if (['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow')) !== -1 || ['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow-x')) !== -1 || ['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow-y')) !== -1) {
	            // If the detected scrollParent is body, we perform an additional check on its parentNode
	            // in this way we'll get body if the browser is Chrome-ish, or documentElement otherwise
	            // fixes issue #65
	            return parent;
	        }
	        return getScrollParent(element.parentNode);
	    }
	
	    /**
	     * Check if the given element is fixed or is inside a fixed parent
	     * @function
	     * @ignore
	     * @argument {Element} element
	     * @argument {Element} customContainer
	     * @returns {Boolean} answer to "isFixed?"
	     */
	    function isFixed(element) {
	        if (element === root.document.body) {
	            return false;
	        }
	        if (getStyleComputedProperty(element, 'position') === 'fixed') {
	            return true;
	        }
	        return element.parentNode ? isFixed(element.parentNode) : element;
	    }
	
	    /**
	     * Set the style to the given popper
	     * @function
	     * @ignore
	     * @argument {Element} element - Element to apply the style to
	     * @argument {Object} styles - Object with a list of properties and values which will be applied to the element
	     */
	    function setStyle(element, styles) {
	        function is_numeric(n) {
	            return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
	        }
	        Object.keys(styles).forEach(function (prop) {
	            var unit = '';
	            // add unit if the value is numeric and is one of the following
	            if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && is_numeric(styles[prop])) {
	                unit = 'px';
	            }
	            element.style[prop] = styles[prop] + unit;
	        });
	    }
	
	    /**
	     * Check if the given variable is a function
	     * @function
	     * @ignore
	     * @argument {*} functionToCheck - variable to check
	     * @returns {Boolean} answer to: is a function?
	     */
	    function isFunction(functionToCheck) {
	        var getType = {};
	        return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	    }
	
	    /**
	     * Get the position of the given element, relative to its offset parent
	     * @function
	     * @ignore
	     * @param {Element} element
	     * @return {Object} position - Coordinates of the element and its `scrollTop`
	     */
	    function getOffsetRect(element) {
	        var elementRect = {
	            width: element.offsetWidth,
	            height: element.offsetHeight,
	            left: element.offsetLeft,
	            top: element.offsetTop
	        };
	
	        elementRect.right = elementRect.left + elementRect.width;
	        elementRect.bottom = elementRect.top + elementRect.height;
	
	        // position
	        return elementRect;
	    }
	
	    /**
	     * Get bounding client rect of given element
	     * @function
	     * @ignore
	     * @param {HTMLElement} element
	     * @return {Object} client rect
	     */
	    function getBoundingClientRect(element) {
	        var rect = element.getBoundingClientRect();
	
	        // whether the IE version is lower than 11
	        var isIE = navigator.userAgent.indexOf("MSIE") != -1;
	
	        // fix ie document bounding top always 0 bug
	        var rectTop = isIE && element.tagName === 'HTML' ? -element.scrollTop : rect.top;
	
	        return {
	            left: rect.left,
	            top: rectTop,
	            right: rect.right,
	            bottom: rect.bottom,
	            width: rect.right - rect.left,
	            height: rect.bottom - rectTop
	        };
	    }
	
	    /**
	     * Given an element and one of its parents, return the offset
	     * @function
	     * @ignore
	     * @param {HTMLElement} element
	     * @param {HTMLElement} parent
	     * @return {Object} rect
	     */
	    function getOffsetRectRelativeToCustomParent(element, parent, fixed) {
	        var elementRect = getBoundingClientRect(element);
	        var parentRect = getBoundingClientRect(parent);
	
	        if (fixed) {
	            var scrollParent = getScrollParent(parent);
	            parentRect.top += scrollParent.scrollTop;
	            parentRect.bottom += scrollParent.scrollTop;
	            parentRect.left += scrollParent.scrollLeft;
	            parentRect.right += scrollParent.scrollLeft;
	        }
	
	        var rect = {
	            top: elementRect.top - parentRect.top,
	            left: elementRect.left - parentRect.left,
	            bottom: elementRect.top - parentRect.top + elementRect.height,
	            right: elementRect.left - parentRect.left + elementRect.width,
	            width: elementRect.width,
	            height: elementRect.height
	        };
	        return rect;
	    }
	
	    /**
	     * Get the prefixed supported property name
	     * @function
	     * @ignore
	     * @argument {String} property (camelCase)
	     * @returns {String} prefixed property (camelCase)
	     */
	    function getSupportedPropertyName(property) {
	        var prefixes = ['', 'ms', 'webkit', 'moz', 'o'];
	
	        for (var i = 0; i < prefixes.length; i++) {
	            var toCheck = prefixes[i] ? prefixes[i] + property.charAt(0).toUpperCase() + property.slice(1) : property;
	            if (typeof root.document.body.style[toCheck] !== 'undefined') {
	                return toCheck;
	            }
	        }
	        return null;
	    }
	
	    /**
	     * The Object.assign() method is used to copy the values of all enumerable own properties from one or more source
	     * objects to a target object. It will return the target object.
	     * This polyfill doesn't support symbol properties, since ES5 doesn't have symbols anyway
	     * Source: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	     * @function
	     * @ignore
	     */
	    if (!Object.assign) {
	        Object.defineProperty(Object, 'assign', {
	            enumerable: false,
	            configurable: true,
	            writable: true,
	            value: function value(target) {
	                if (target === undefined || target === null) {
	                    throw new TypeError('Cannot convert first argument to object');
	                }
	
	                var to = Object(target);
	                for (var i = 1; i < arguments.length; i++) {
	                    var nextSource = arguments[i];
	                    if (nextSource === undefined || nextSource === null) {
	                        continue;
	                    }
	                    nextSource = Object(nextSource);
	
	                    var keysArray = Object.keys(nextSource);
	                    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
	                        var nextKey = keysArray[nextIndex];
	                        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
	                        if (desc !== undefined && desc.enumerable) {
	                            to[nextKey] = nextSource[nextKey];
	                        }
	                    }
	                }
	                return to;
	            }
	        });
	    }
	
	    return Popper;
	});

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _dom = __webpack_require__(23);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var hasModal = false;
	var hasInitZIndex = false;
	var zIndex = void 0;
	
	var getModal = function getModal() {
	  if (_vue2.default.prototype.$isServer) return;
	  var modalDom = PopupManager.modalDom;
	  if (modalDom) {
	    hasModal = true;
	  } else {
	    hasModal = false;
	    modalDom = document.createElement('div');
	    PopupManager.modalDom = modalDom;
	
	    modalDom.addEventListener('touchmove', function (event) {
	      event.preventDefault();
	      event.stopPropagation();
	    });
	
	    modalDom.addEventListener('click', function () {
	      PopupManager.doOnModalClick && PopupManager.doOnModalClick();
	    });
	  }
	
	  return modalDom;
	};
	
	var instances = {};
	
	var PopupManager = {
	  modalFade: true,
	
	  getInstance: function getInstance(id) {
	    return instances[id];
	  },
	
	  register: function register(id, instance) {
	    if (id && instance) {
	      instances[id] = instance;
	    }
	  },
	
	  deregister: function deregister(id) {
	    if (id) {
	      instances[id] = null;
	      delete instances[id];
	    }
	  },
	
	  nextZIndex: function nextZIndex() {
	    return PopupManager.zIndex++;
	  },
	
	  modalStack: [],
	
	  doOnModalClick: function doOnModalClick() {
	    var topItem = PopupManager.modalStack[PopupManager.modalStack.length - 1];
	    if (!topItem) return;
	
	    var instance = PopupManager.getInstance(topItem.id);
	    if (instance && instance.closeOnClickModal) {
	      instance.close();
	    }
	  },
	
	  openModal: function openModal(id, zIndex, dom, modalClass, modalFade) {
	    if (_vue2.default.prototype.$isServer) return;
	    if (!id || zIndex === undefined) return;
	    this.modalFade = modalFade;
	
	    var modalStack = this.modalStack;
	
	    for (var i = 0, j = modalStack.length; i < j; i++) {
	      var item = modalStack[i];
	      if (item.id === id) {
	        return;
	      }
	    }
	
	    var modalDom = getModal();
	
	    (0, _dom.addClass)(modalDom, 'v-modal');
	    if (this.modalFade && !hasModal) {
	      (0, _dom.addClass)(modalDom, 'v-modal-enter');
	    }
	    if (modalClass) {
	      var classArr = modalClass.trim().split(/\s+/);
	      classArr.forEach(function (item) {
	        return (0, _dom.addClass)(modalDom, item);
	      });
	    }
	    setTimeout(function () {
	      (0, _dom.removeClass)(modalDom, 'v-modal-enter');
	    }, 200);
	
	    if (dom && dom.parentNode && dom.parentNode.nodeType !== 11) {
	      dom.parentNode.appendChild(modalDom);
	    } else {
	      document.body.appendChild(modalDom);
	    }
	
	    if (zIndex) {
	      modalDom.style.zIndex = zIndex;
	    }
	    modalDom.tabIndex = 0;
	    modalDom.style.display = '';
	
	    this.modalStack.push({ id: id, zIndex: zIndex, modalClass: modalClass });
	  },
	
	  closeModal: function closeModal(id) {
	    var modalStack = this.modalStack;
	    var modalDom = getModal();
	
	    if (modalStack.length > 0) {
	      var topItem = modalStack[modalStack.length - 1];
	      if (topItem.id === id) {
	        if (topItem.modalClass) {
	          var classArr = topItem.modalClass.trim().split(/\s+/);
	          classArr.forEach(function (item) {
	            return (0, _dom.removeClass)(modalDom, item);
	          });
	        }
	
	        modalStack.pop();
	        if (modalStack.length > 0) {
	          modalDom.style.zIndex = modalStack[modalStack.length - 1].zIndex;
	        }
	      } else {
	        for (var i = modalStack.length - 1; i >= 0; i--) {
	          if (modalStack[i].id === id) {
	            modalStack.splice(i, 1);
	            break;
	          }
	        }
	      }
	    }
	
	    if (modalStack.length === 0) {
	      if (this.modalFade) {
	        (0, _dom.addClass)(modalDom, 'v-modal-leave');
	      }
	      setTimeout(function () {
	        if (modalStack.length === 0) {
	          if (modalDom.parentNode) modalDom.parentNode.removeChild(modalDom);
	          modalDom.style.display = 'none';
	          PopupManager.modalDom = undefined;
	        }
	        (0, _dom.removeClass)(modalDom, 'v-modal-leave');
	      }, 200);
	    }
	  }
	};
	
	Object.defineProperty(PopupManager, 'zIndex', {
	  configurable: true,
	  get: function get() {
	    if (!hasInitZIndex) {
	      zIndex = zIndex || (_vue2.default.prototype.$ELEMENT || {}).zIndex || 2000;
	      hasInitZIndex = true;
	    }
	    return zIndex;
	  },
	  set: function set(value) {
	    zIndex = value;
	  }
	});
	
	var getTopPopup = function getTopPopup() {
	  if (_vue2.default.prototype.$isServer) return;
	  if (PopupManager.modalStack.length > 0) {
	    var topPopup = PopupManager.modalStack[PopupManager.modalStack.length - 1];
	    if (!topPopup) return;
	    var instance = PopupManager.getInstance(topPopup.id);
	
	    return instance;
	  }
	};
	
	if (!_vue2.default.prototype.$isServer) {
	  // handle `esc` key when the popup is shown
	  window.addEventListener('keydown', function (event) {
	    if (event.keyCode === 27) {
	      var topPopup = getTopPopup();
	
	      if (topPopup && topPopup.closeOnPressEscape) {
	        topPopup.handleClose ? topPopup.handleClose() : topPopup.handleAction ? topPopup.handleAction('cancel') : topPopup.close();
	      }
	    }
	  });
	}
	
	exports.default = PopupManager;

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = scrollIntoView;
	
	var _vue = __webpack_require__(1);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function scrollIntoView(container, selected) {
	  if (_vue2.default.prototype.$isServer) return;
	
	  if (!selected) {
	    container.scrollTop = 0;
	    return;
	  }
	
	  var offsetParents = [];
	  var pointer = selected.offsetParent;
	  while (pointer && container !== pointer && container.contains(pointer)) {
	    offsetParents.push(pointer);
	    pointer = pointer.offsetParent;
	  }
	  var top = selected.offsetTop + offsetParents.reduce(function (prev, curr) {
	    return prev + curr.offsetTop;
	  }, 0);
	  var bottom = top + selected.offsetHeight;
	  var viewRectTop = container.scrollTop;
	  var viewRectBottom = viewRectTop + container.clientHeight;
	
	  if (top < viewRectTop) {
	    container.scrollTop = top;
	  } else if (bottom > viewRectBottom) {
	    container.scrollTop = bottom - container.clientHeight;
	  }
	}

/***/ }),
/* 494 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.isString = isString;
	exports.isObject = isObject;
	exports.isHtmlElement = isHtmlElement;
	function isString(obj) {
	  return Object.prototype.toString.call(obj) === '[object String]';
	}
	
	function isObject(obj) {
	  return Object.prototype.toString.call(obj) === '[object Object]';
	}
	
	function isHtmlElement(node) {
	  return node && node.nodeType === Node.ELEMENT_NODE;
	}
	
	var isFunction = exports.isFunction = function isFunction(functionToCheck) {
	  var getType = {};
	  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	};
	
	var isUndefined = exports.isUndefined = function isUndefined(val) {
	  return val === void 0;
	};
	
	var isDefined = exports.isDefined = function isDefined(val) {
	  return val !== undefined && val !== null;
	};

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.isVNode = isVNode;
	
	var _util = __webpack_require__(20);
	
	function isVNode(node) {
	  return node !== null && (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && (0, _util.hasOwn)(node, 'componentOptions');
	};

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   4.0.5
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
	    return function () {
	      vertxNext(flush);
	    };
	  }
	
	  return useSetTimeout();
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(790);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	//# sourceMappingURL=es6-promise.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86), (function() { return this; }())))

/***/ }),
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.fetchInject = factory());
	}(this, (function () { 'use strict';
	
	/**
	 * ISC License
	 *
	 * Copyright (c) 2017, Josh Habdas <josh@habd.as>
	 *
	 * Permission to use, copy, modify, and/or distribute this software for any
	 * purpose with or without fee is hereby granted, provided that the above
	 * copyright notice and this permission notice appear in all copies.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 */
	
	const head = (function(i,s,o,g,r,a,m){a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.appendChild(s.createTextNode(g.text));a.onload=r(g);m?m.parentNode.insertBefore(a,m):s.head.appendChild(a);}); // eslint-disable-line
	
	/**
	 * Fetch Inject module.
	 *
	 * @module fetchInject
	 * @license ISC
	 * @param {(USVString[]|Request[])} inputs Resources you wish to fetch.
	 * @param {Promise} [promise] A promise to await before attempting injection.
	 * @throws {InvalidArgumentException} Invalid args and anything Fetch throws.
	 * @returns {Promise<Object>[]} A promise which resolves to an `Array` of
	 *     Objects containing `Response` `Body` properties used by the module.
	 */
	const fetchInject = function (inputs, promise) {
	  if (!(inputs && Array.isArray(inputs))) return Promise.reject(new Error('`inputs` must be an array'))
	  if (promise && !(promise instanceof Promise)) return Promise.reject(new Error('`promise` must be a promise'))
	
	  const resources = [];
	  const deferreds = promise ? [].concat(promise) : [];
	  const thenables = [];
	
	  inputs.forEach(input => deferreds.push(
	    window.fetch(input).then(res => {
	      return [res.clone().text(), res.blob()]
	    }).then(promises => {
	      return Promise.all(promises).then(resolved => {
	        resources.push({ text: resolved[0], blob: resolved[1] });
	      })
	    })
	  ));
	
	  return Promise.all(deferreds).then(() => {
	    resources.forEach(resource => {
	      thenables.push({ then: resolve => {
	        resource.blob.type.includes('text/css')
	          ? head(window, document, 'style', resource, resolve)
	          : head(window, document, 'script', resource, resolve);
	      }});
	    });
	    return Promise.all(thenables)
	  })
	};
	
	return fetchInject;
	
	})));


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
	( function( global, factory ) {
	
		"use strict";
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
	
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";
	
	var arr = [];
	
	var document = window.document;
	
	var getProto = Object.getPrototypeOf;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var fnToString = hasOwn.toString;
	
	var ObjectFunctionString = fnToString.call( Object );
	
	var support = {};
	
	
	
		function DOMEval( code, doc ) {
			doc = doc || document;
	
			var script = doc.createElement( "script" );
	
			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module
	
	
	
	var
		version = "3.1.1",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
	
			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}
	
			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&
	
				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},
	
		isPlainObject: function( obj ) {
			var proto, Ctor;
	
			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}
	
			proto = getProto( obj );
	
			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}
	
			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},
	
		isEmptyObject: function( obj ) {
	
			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;
	
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
	
		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {
	
				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}
	
				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}
	
			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},
	
		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");
	
		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {
	
		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {
	
			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {
	
				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {
	
					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}
	
					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||
	
						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}
	
				return elem.disabled === disabled;
	
			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}
	
			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {
	
			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
	
			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );
	
					if ( elem ) {
	
						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
	
						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}
	
					return [];
				}
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";
	
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	
	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;
	
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}
	
		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}
	
		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}
	
		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}
	
		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}
	
		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			ret = this.pushStack( [] );
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						if ( elem ) {
	
							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );
	
			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :
	
							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
							matched.push( cur );
							break;
						}
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}
	
	function adoptValue( value, resolve, reject ) {
		var method;
	
		try {
	
			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );
	
			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );
	
			// Other non-thenables
			} else {
	
				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				resolve.call( undefined, value );
			}
	
		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {
	
			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.call( undefined, value );
		}
	}
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},
	
					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
	
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
	
								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
	
								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;
	
										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}
	
										returned = handler.apply( that, args );
	
										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}
	
										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&
	
											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;
	
										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {
	
											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);
	
											// Normal processors (resolve) also hook into progress
											} else {
	
												// ...and disregard older resolution values
												maxDepth++;
	
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}
	
										// Handle all other returned values
										} else {
	
											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}
	
											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},
	
									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {
	
												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}
	
												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {
	
													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}
	
													deferred.rejectWith( that, args );
												}
											}
										};
	
								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {
	
									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}
	
						return jQuery.Deferred( function( newDefer ) {
	
							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);
	
							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);
	
							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];
	
				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add(
						function() {
	
							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},
	
						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,
	
						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}
	
				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );
	
				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};
	
				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( singleValue ) {
			var
	
				// count of uncompleted subordinates
				remaining = arguments.length,
	
				// count of unprocessed arguments
				i = remaining,
	
				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),
	
				// the master Deferred
				master = jQuery.Deferred(),
	
				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};
	
			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );
	
				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
	
					return master.then();
				}
			}
	
			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}
	
			return master.promise();
		}
	} );
	
	
	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
	
	jQuery.Deferred.exceptionHook = function( error, stack ) {
	
		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};
	
	
	
	
	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};
	
	
	
	
	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();
	
	jQuery.fn.ready = function( fn ) {
	
		readyList
			.then( fn )
	
			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );
	
	jQuery.ready.then = readyList.then;
	
	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );
	
	} else {
	
		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );
	
		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		if ( chainable ) {
			return elems;
		}
	
		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}
	
		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		cache: function( owner ) {
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
	
				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				return this.get( owner, key );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key !== undefined ) {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );
	
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}
	
				i = key.length;
	
				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}
	
		if ( data === "false" ) {
			return false;
		}
	
		if ( data === "null" ) {
			return null;
		}
	
		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}
	
		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}
	
		return data;
	}
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				this.each( function() {
	
					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHiddenWithinTree = function( elem, el ) {
	
			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
	
			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&
	
				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&
	
				jQuery.css( elem, "display" ) === "none";
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	var defaultDisplayMap = {};
	
	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];
	
		if ( display ) {
			return display;
		}
	
		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );
	
		temp.parentNode.removeChild( temp );
	
		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;
	
		return display;
	}
	
	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;
	
		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			display = elem.style.display;
			if ( show ) {
	
				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";
	
					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}
	
		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}
	
		return elements;
	}
	
	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;
	
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );
	
		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );
	
		} else {
			ret = [];
		}
	
		if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}
	
		return ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;
	
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( nativeEvent ) {
	
			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );
	
			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
	
			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}
	
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Find delegate handlers
			if ( delegateCount &&
	
				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&
	
				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,
	
				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},
	
				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},
	
		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;
	
			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,
	
		which: function( event ) {
			var button = event.button;
	
			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}
	
			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}
	
				if ( button & 2 ) {
					return 3;
				}
	
				if ( button & 4 ) {
					return 2;
				}
	
				return 0;
			}
	
			return event.which;
		}
	}, jQuery.event.addProp );
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
	
		/* eslint-disable max-len */
	
		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
	
		/* eslint-enable */
	
		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
	
			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}
	
		return elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	
	
	( function() {
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
	
			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}
	
			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
	
			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
	
			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}
	
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
	
		// Support: IE <=9 only
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
	
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;
	
		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;
	
		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var val,
			valueIsBorderBox = true,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Support: IE <=11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = elem.getBoundingClientRect()[ name ];
		}
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
	
						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	function raf() {
		if ( timerId ) {
			window.requestAnimationFrame( raf );
			jQuery.fx.tick();
		}
	}
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
	
					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}
	
		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}
	
		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {
	
			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {
	
					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}
	
			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {
	
					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {
	
			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}
	
				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}
	
				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}
	
				/* eslint-disable no-loop-func */
	
				anim.done( function() {
	
				/* eslint-enable no-loop-func */
	
					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}
	
			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		// Go to the end state if fx are off or if document is hidden
		if ( jQuery.fx.off || document.hidden ) {
			opt.duration = 0;
	
		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];
	
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.requestAnimationFrame ?
				window.requestAnimationFrame( raf ) :
				window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		if ( window.cancelAnimationFrame ) {
			window.cancelAnimationFrame( timerId );
		} else {
			window.clearInterval( timerId );
		}
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name,
				i = 0,
	
				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();
	
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}
	
					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}
	
					return -1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}
	
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}
	
					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;
	
					if ( index < 0 ) {
						i = max;
	
					} else {
						i = one ? index : 0;
					}
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						/* eslint-disable no-cond-assign */
	
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
	
						/* eslint-enable no-cond-assign */
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {
	
				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;
	
				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				if ( val == null ) {
					return null;
				}
	
				if ( jQuery.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}
	
				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": JSON.parse,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// Request state (becomes false upon send and true upon completion)
				completed,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// uncached part of the url
				uncached,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {
	
								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR );
	
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}
	
				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;
	
			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}
	
					// Propagate others as results
					done( -1, e );
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Ignore repeat invocations
				if ( completed ) {
					return;
				}
	
				completed = true;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );
	
	
	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};
	
	
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		var base, parsed, scripts;
	
		if ( !context ) {
	
			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );
	
				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}
	
		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
	
			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win, rect, doc,
				elem = this[ 0 ];
	
			if ( !elem ) {
				return;
			}
	
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}
	
			rect = elem.getBoundingClientRect();
	
			// Make sure element is not hidden (display: none)
			if ( rect.width || rect.height ) {
				doc = elem.ownerDocument;
				win = getWindow( doc );
				docElem = doc.documentElement;
	
				return {
					top: rect.top + win.pageYOffset - docElem.clientTop,
					left: rect.left + win.pageXOffset - docElem.clientLeft
				};
			}
	
			// Return zeros for disconnected and hidden elements (gh-2310)
			return rect;
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );
	
	jQuery.parseJSON = JSON.parse;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	
	
	
	
	return jQuery;
	} );


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(611);


/***/ }),
/* 608 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	/*jslint evil: true */
	
	'use strict';
	
	var canUseDOM = !!(
	  typeof window !== 'undefined' &&
	  window.document &&
	  window.document.createElement
	);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;


/***/ }),
/* 609 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2004-present Facebook. All Rights Reserved.
	 *
	 * @providesModule UserAgent_DEPRECATED
	 */
	
	/**
	 *  Provides entirely client-side User Agent and OS detection. You should prefer
	 *  the non-deprecated UserAgent module when possible, which exposes our
	 *  authoritative server-side PHP-based detection to the client.
	 *
	 *  Usage is straightforward:
	 *
	 *    if (UserAgent_DEPRECATED.ie()) {
	 *      //  IE
	 *    }
	 *
	 *  You can also do version checks:
	 *
	 *    if (UserAgent_DEPRECATED.ie() >= 7) {
	 *      //  IE7 or better
	 *    }
	 *
	 *  The browser functions will return NaN if the browser does not match, so
	 *  you can also do version compares the other way:
	 *
	 *    if (UserAgent_DEPRECATED.ie() < 7) {
	 *      //  IE6 or worse
	 *    }
	 *
	 *  Note that the version is a float and may include a minor version number,
	 *  so you should always use range operators to perform comparisons, not
	 *  strict equality.
	 *
	 *  **Note:** You should **strongly** prefer capability detection to browser
	 *  version detection where it's reasonable:
	 *
	 *    http://www.quirksmode.org/js/support.html
	 *
	 *  Further, we have a large number of mature wrapper functions and classes
	 *  which abstract away many browser irregularities. Check the documentation,
	 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
	 *  another copy of "event || window.event".
	 *
	 */
	
	var _populated = false;
	
	// Browsers
	var _ie, _firefox, _opera, _webkit, _chrome;
	
	// Actual IE browser for compatibility mode
	var _ie_real_version;
	
	// Platforms
	var _osx, _windows, _linux, _android;
	
	// Architectures
	var _win64;
	
	// Devices
	var _iphone, _ipad, _native;
	
	var _mobile;
	
	function _populate() {
	  if (_populated) {
	    return;
	  }
	
	  _populated = true;
	
	  // To work around buggy JS libraries that can't handle multi-digit
	  // version numbers, Opera 10's user agent string claims it's Opera
	  // 9, then later includes a Version/X.Y field:
	  //
	  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10
	  var uas = navigator.userAgent;
	  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
	  var os    = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
	
	  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
	  _ipad = /\b(iP[ao]d)/.exec(uas);
	  _android = /Android/i.exec(uas);
	  _native = /FBAN\/\w+;/i.exec(uas);
	  _mobile = /Mobile/i.exec(uas);
	
	  // Note that the IE team blog would have you believe you should be checking
	  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
	  // from either x64 or ia64;  so ultimately, you should just check for Win64
	  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
	  // Windows will send 'WOW64' instead.
	  _win64 = !!(/Win64/.exec(uas));
	
	  if (agent) {
	    _ie = agent[1] ? parseFloat(agent[1]) : (
	          agent[5] ? parseFloat(agent[5]) : NaN);
	    // IE compatibility mode
	    if (_ie && document && document.documentMode) {
	      _ie = document.documentMode;
	    }
	    // grab the "true" ie version from the trident token if available
	    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
	    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
	
	    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
	    _opera   = agent[3] ? parseFloat(agent[3]) : NaN;
	    _webkit  = agent[4] ? parseFloat(agent[4]) : NaN;
	    if (_webkit) {
	      // We do not add the regexp to the above test, because it will always
	      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
	      // the userAgent string.
	      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
	      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
	    } else {
	      _chrome = NaN;
	    }
	  } else {
	    _ie = _firefox = _opera = _chrome = _webkit = NaN;
	  }
	
	  if (os) {
	    if (os[1]) {
	      // Detect OS X version.  If no version number matches, set _osx to true.
	      // Version examples:  10, 10_6_1, 10.7
	      // Parses version number as a float, taking only first two sets of
	      // digits.  If only one set of digits is found, returns just the major
	      // version number.
	      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
	
	      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
	    } else {
	      _osx = false;
	    }
	    _windows = !!os[2];
	    _linux   = !!os[3];
	  } else {
	    _osx = _windows = _linux = false;
	  }
	}
	
	var UserAgent_DEPRECATED = {
	
	  /**
	   *  Check if the UA is Internet Explorer.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  ie: function() {
	    return _populate() || _ie;
	  },
	
	  /**
	   * Check if we're in Internet Explorer compatibility mode.
	   *
	   * @return bool true if in compatibility mode, false if
	   * not compatibility mode or not ie
	   */
	  ieCompatibilityMode: function() {
	    return _populate() || (_ie_real_version > _ie);
	  },
	
	
	  /**
	   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
	   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
	   * this when we don't need it -- tracked by #601957.
	   */
	  ie64: function() {
	    return UserAgent_DEPRECATED.ie() && _win64;
	  },
	
	  /**
	   *  Check if the UA is Firefox.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  firefox: function() {
	    return _populate() || _firefox;
	  },
	
	
	  /**
	   *  Check if the UA is Opera.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  opera: function() {
	    return _populate() || _opera;
	  },
	
	
	  /**
	   *  Check if the UA is WebKit.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  webkit: function() {
	    return _populate() || _webkit;
	  },
	
	  /**
	   *  For Push
	   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
	   */
	  safari: function() {
	    return UserAgent_DEPRECATED.webkit();
	  },
	
	  /**
	   *  Check if the UA is a Chrome browser.
	   *
	   *
	   *  @return float|NaN Version number (if match) or NaN.
	   */
	  chrome : function() {
	    return _populate() || _chrome;
	  },
	
	
	  /**
	   *  Check if the user is running Windows.
	   *
	   *  @return bool `true' if the user's OS is Windows.
	   */
	  windows: function() {
	    return _populate() || _windows;
	  },
	
	
	  /**
	   *  Check if the user is running Mac OS X.
	   *
	   *  @return float|bool   Returns a float if a version number is detected,
	   *                       otherwise true/false.
	   */
	  osx: function() {
	    return _populate() || _osx;
	  },
	
	  /**
	   * Check if the user is running Linux.
	   *
	   * @return bool `true' if the user's OS is some flavor of Linux.
	   */
	  linux: function() {
	    return _populate() || _linux;
	  },
	
	  /**
	   * Check if the user is running on an iPhone or iPod platform.
	   *
	   * @return bool `true' if the user is running some flavor of the
	   *    iPhone OS.
	   */
	  iphone: function() {
	    return _populate() || _iphone;
	  },
	
	  mobile: function() {
	    return _populate() || (_iphone || _ipad || _android || _mobile);
	  },
	
	  nativeApp: function() {
	    // webviews inside of the native apps
	    return _populate() || _native;
	  },
	
	  android: function() {
	    return _populate() || _android;
	  },
	
	  ipad: function() {
	    return _populate() || _ipad;
	  }
	};
	
	module.exports = UserAgent_DEPRECATED;


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(608);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule normalizeWheel
	 * @typechecks
	 */
	
	'use strict';
	
	var UserAgent_DEPRECATED = __webpack_require__(609);
	
	var isEventSupported = __webpack_require__(610);
	
	
	// Reasonable defaults
	var PIXEL_STEP  = 10;
	var LINE_HEIGHT = 40;
	var PAGE_HEIGHT = 800;
	
	/**
	 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
	 * complicated, thus this doc is long and (hopefully) detailed enough to answer
	 * your questions.
	 *
	 * If you need to react to the mouse wheel in a predictable way, this code is
	 * like your bestest friend. * hugs *
	 *
	 * As of today, there are 4 DOM event types you can listen to:
	 *
	 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
	 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
	 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
	 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
	 *
	 * So what to do?  The is the best:
	 *
	 *   normalizeWheel.getEventType();
	 *
	 * In your event callback, use this code to get sane interpretation of the
	 * deltas.  This code will return an object with properties:
	 *
	 *   spinX   -- normalized spin speed (use for zoom) - x plane
	 *   spinY   -- " - y plane
	 *   pixelX  -- normalized distance (to pixels) - x plane
	 *   pixelY  -- " - y plane
	 *
	 * Wheel values are provided by the browser assuming you are using the wheel to
	 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
	 * significantly on different platforms and browsers, forgetting that you can
	 * scroll at different speeds.  Some devices (like trackpads) emit more events
	 * at smaller increments with fine granularity, and some emit massive jumps with
	 * linear speed or acceleration.
	 *
	 * This code does its best to normalize the deltas for you:
	 *
	 *   - spin is trying to normalize how far the wheel was spun (or trackpad
	 *     dragged).  This is super useful for zoom support where you want to
	 *     throw away the chunky scroll steps on the PC and make those equal to
	 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
	 *     resolve a single slow step on a wheel to 1.
	 *
	 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
	 *     get the crazy differences between browsers, but at least it'll be in
	 *     pixels!
	 *
	 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
	 *     should translate to positive value zooming IN, negative zooming OUT.
	 *     This matches the newer 'wheel' event.
	 *
	 * Why are there spinX, spinY (or pixels)?
	 *
	 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
	 *     with a mouse.  It results in side-scrolling in the browser by default.
	 *
	 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
	 *
	 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
	 *     probably is by browsers in conjunction with fancy 3D controllers .. but
	 *     you know.
	 *
	 * Implementation info:
	 *
	 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
	 * average mouse:
	 *
	 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
	 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
	 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
	 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
	 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
	 *
	 * On the trackpad:
	 *
	 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
	 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
	 *
	 * On other/older browsers.. it's more complicated as there can be multiple and
	 * also missing delta values.
	 *
	 * The 'wheel' event is more standard:
	 *
	 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
	 *
	 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
	 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
	 * backward compatibility with older events.  Those other values help us
	 * better normalize spin speed.  Example of what the browsers provide:
	 *
	 *                          | event.wheelDelta | event.detail
	 *        ------------------+------------------+--------------
	 *          Safari v5/OS X  |       -120       |       0
	 *          Safari v5/Win7  |       -120       |       0
	 *         Chrome v17/OS X  |       -120       |       0
	 *         Chrome v17/Win7  |       -120       |       0
	 *                IE9/Win7  |       -120       |   undefined
	 *         Firefox v4/OS X  |     undefined    |       1
	 *         Firefox v4/Win7  |     undefined    |       3
	 *
	 */
	function normalizeWheel(/*object*/ event) /*object*/ {
	  var sX = 0, sY = 0,       // spinX, spinY
	      pX = 0, pY = 0;       // pixelX, pixelY
	
	  // Legacy
	  if ('detail'      in event) { sY = event.detail; }
	  if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }
	  if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }
	  if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }
	
	  // side scrolling on FF with DOMMouseScroll
	  if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {
	    sX = sY;
	    sY = 0;
	  }
	
	  pX = sX * PIXEL_STEP;
	  pY = sY * PIXEL_STEP;
	
	  if ('deltaY' in event) { pY = event.deltaY; }
	  if ('deltaX' in event) { pX = event.deltaX; }
	
	  if ((pX || pY) && event.deltaMode) {
	    if (event.deltaMode == 1) {          // delta in LINE units
	      pX *= LINE_HEIGHT;
	      pY *= LINE_HEIGHT;
	    } else {                             // delta in PAGE units
	      pX *= PAGE_HEIGHT;
	      pY *= PAGE_HEIGHT;
	    }
	  }
	
	  // Fall-back if spin cannot be determined
	  if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }
	  if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }
	
	  return { spinX  : sX,
	           spinY  : sY,
	           pixelX : pX,
	           pixelY : pY };
	}
	
	
	/**
	 * The best combination if you prefer spinX + spinY normalization.  It favors
	 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
	 * 'wheel' event, making spin speed determination impossible.
	 */
	normalizeWheel.getEventType = function() /*string*/ {
	  return (UserAgent_DEPRECATED.firefox())
	           ? 'DOMMouseScroll'
	           : (isEventSupported('wheel'))
	               ? 'wheel'
	               : 'mousewheel';
	};
	
	module.exports = normalizeWheel;


/***/ }),
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
	// kept identical to the way it is obtained in runtime.js
	var g =
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this;
	
	// Use `getOwnPropertyNames` because not all browsers support calling
	// `hasOwnProperty` on the global `self` object in a worker. See #183.
	var hadRuntime = g.regeneratorRuntime &&
	  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
	
	// Save the old regeneratorRuntime in case it needs to be restored later.
	var oldRuntime = hadRuntime && g.regeneratorRuntime;
	
	// Force reevalutation of runtime.js.
	g.regeneratorRuntime = undefined;
	
	module.exports = __webpack_require__(616);
	
	if (hadRuntime) {
	  // Restore the original runtime.
	  g.regeneratorRuntime = oldRuntime;
	} else {
	  // Remove the global property added by runtime.js.
	  try {
	    delete g.regeneratorRuntime;
	  } catch(e) {
	    g.regeneratorRuntime = undefined;
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };
	
	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value instanceof AwaitArgument) {
	          return Promise.resolve(value.arg).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;
	
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }
	
	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }
	
	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );
	
	          if (record.type === "throw") {
	            context.delegate = null;
	
	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }
	
	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;
	
	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }
	
	          context.delegate = null;
	        }
	
	        if (method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = arg;
	
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }
	
	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          var info = {
	            value: record.arg,
	            done: context.done
	          };
	
	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }
	
	      return ContinueSentinel;
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(86)))

/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ResizeObserver = factory());
	}(this, (function () { 'use strict';
	
	    /**
	     * A collection of shims that provide minimal functionality of the ES6 collections.
	     *
	     * These implementations are not meant to be used outside of the ResizeObserver
	     * modules as they cover only a limited range of use cases.
	     */
	    /* eslint-disable require-jsdoc, valid-jsdoc */
	    var MapShim = (function () {
	        if (typeof Map !== 'undefined') {
	            return Map;
	        }
	        /**
	         * Returns index in provided array that matches the specified key.
	         *
	         * @param {Array<Array>} arr
	         * @param {*} key
	         * @returns {number}
	         */
	        function getIndex(arr, key) {
	            var result = -1;
	            arr.some(function (entry, index) {
	                if (entry[0] === key) {
	                    result = index;
	                    return true;
	                }
	                return false;
	            });
	            return result;
	        }
	        return /** @class */ (function () {
	            function class_1() {
	                this.__entries__ = [];
	            }
	            Object.defineProperty(class_1.prototype, "size", {
	                /**
	                 * @returns {boolean}
	                 */
	                get: function () {
	                    return this.__entries__.length;
	                },
	                enumerable: true,
	                configurable: true
	            });
	            /**
	             * @param {*} key
	             * @returns {*}
	             */
	            class_1.prototype.get = function (key) {
	                var index = getIndex(this.__entries__, key);
	                var entry = this.__entries__[index];
	                return entry && entry[1];
	            };
	            /**
	             * @param {*} key
	             * @param {*} value
	             * @returns {void}
	             */
	            class_1.prototype.set = function (key, value) {
	                var index = getIndex(this.__entries__, key);
	                if (~index) {
	                    this.__entries__[index][1] = value;
	                }
	                else {
	                    this.__entries__.push([key, value]);
	                }
	            };
	            /**
	             * @param {*} key
	             * @returns {void}
	             */
	            class_1.prototype.delete = function (key) {
	                var entries = this.__entries__;
	                var index = getIndex(entries, key);
	                if (~index) {
	                    entries.splice(index, 1);
	                }
	            };
	            /**
	             * @param {*} key
	             * @returns {void}
	             */
	            class_1.prototype.has = function (key) {
	                return !!~getIndex(this.__entries__, key);
	            };
	            /**
	             * @returns {void}
	             */
	            class_1.prototype.clear = function () {
	                this.__entries__.splice(0);
	            };
	            /**
	             * @param {Function} callback
	             * @param {*} [ctx=null]
	             * @returns {void}
	             */
	            class_1.prototype.forEach = function (callback, ctx) {
	                if (ctx === void 0) { ctx = null; }
	                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
	                    var entry = _a[_i];
	                    callback.call(ctx, entry[1], entry[0]);
	                }
	            };
	            return class_1;
	        }());
	    })();
	
	    /**
	     * Detects whether window and document objects are available in current environment.
	     */
	    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
	
	    // Returns global object of a current environment.
	    var global$1 = (function () {
	        if (typeof global !== 'undefined' && global.Math === Math) {
	            return global;
	        }
	        if (typeof self !== 'undefined' && self.Math === Math) {
	            return self;
	        }
	        if (typeof window !== 'undefined' && window.Math === Math) {
	            return window;
	        }
	        // eslint-disable-next-line no-new-func
	        return Function('return this')();
	    })();
	
	    /**
	     * A shim for the requestAnimationFrame which falls back to the setTimeout if
	     * first one is not supported.
	     *
	     * @returns {number} Requests' identifier.
	     */
	    var requestAnimationFrame$1 = (function () {
	        if (typeof requestAnimationFrame === 'function') {
	            // It's required to use a bounded function because IE sometimes throws
	            // an "Invalid calling object" error if rAF is invoked without the global
	            // object on the left hand side.
	            return requestAnimationFrame.bind(global$1);
	        }
	        return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
	    })();
	
	    // Defines minimum timeout before adding a trailing call.
	    var trailingTimeout = 2;
	    /**
	     * Creates a wrapper function which ensures that provided callback will be
	     * invoked only once during the specified delay period.
	     *
	     * @param {Function} callback - Function to be invoked after the delay period.
	     * @param {number} delay - Delay after which to invoke callback.
	     * @returns {Function}
	     */
	    function throttle (callback, delay) {
	        var leadingCall = false, trailingCall = false, lastCallTime = 0;
	        /**
	         * Invokes the original callback function and schedules new invocation if
	         * the "proxy" was called during current request.
	         *
	         * @returns {void}
	         */
	        function resolvePending() {
	            if (leadingCall) {
	                leadingCall = false;
	                callback();
	            }
	            if (trailingCall) {
	                proxy();
	            }
	        }
	        /**
	         * Callback invoked after the specified delay. It will further postpone
	         * invocation of the original function delegating it to the
	         * requestAnimationFrame.
	         *
	         * @returns {void}
	         */
	        function timeoutCallback() {
	            requestAnimationFrame$1(resolvePending);
	        }
	        /**
	         * Schedules invocation of the original function.
	         *
	         * @returns {void}
	         */
	        function proxy() {
	            var timeStamp = Date.now();
	            if (leadingCall) {
	                // Reject immediately following calls.
	                if (timeStamp - lastCallTime < trailingTimeout) {
	                    return;
	                }
	                // Schedule new call to be in invoked when the pending one is resolved.
	                // This is important for "transitions" which never actually start
	                // immediately so there is a chance that we might miss one if change
	                // happens amids the pending invocation.
	                trailingCall = true;
	            }
	            else {
	                leadingCall = true;
	                trailingCall = false;
	                setTimeout(timeoutCallback, delay);
	            }
	            lastCallTime = timeStamp;
	        }
	        return proxy;
	    }
	
	    // Minimum delay before invoking the update of observers.
	    var REFRESH_DELAY = 20;
	    // A list of substrings of CSS properties used to find transition events that
	    // might affect dimensions of observed elements.
	    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
	    // Check if MutationObserver is available.
	    var mutationObserverSupported = typeof MutationObserver !== 'undefined';
	    /**
	     * Singleton controller class which handles updates of ResizeObserver instances.
	     */
	    var ResizeObserverController = /** @class */ (function () {
	        /**
	         * Creates a new instance of ResizeObserverController.
	         *
	         * @private
	         */
	        function ResizeObserverController() {
	            /**
	             * Indicates whether DOM listeners have been added.
	             *
	             * @private {boolean}
	             */
	            this.connected_ = false;
	            /**
	             * Tells that controller has subscribed for Mutation Events.
	             *
	             * @private {boolean}
	             */
	            this.mutationEventsAdded_ = false;
	            /**
	             * Keeps reference to the instance of MutationObserver.
	             *
	             * @private {MutationObserver}
	             */
	            this.mutationsObserver_ = null;
	            /**
	             * A list of connected observers.
	             *
	             * @private {Array<ResizeObserverSPI>}
	             */
	            this.observers_ = [];
	            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
	            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
	        }
	        /**
	         * Adds observer to observers list.
	         *
	         * @param {ResizeObserverSPI} observer - Observer to be added.
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.addObserver = function (observer) {
	            if (!~this.observers_.indexOf(observer)) {
	                this.observers_.push(observer);
	            }
	            // Add listeners if they haven't been added yet.
	            if (!this.connected_) {
	                this.connect_();
	            }
	        };
	        /**
	         * Removes observer from observers list.
	         *
	         * @param {ResizeObserverSPI} observer - Observer to be removed.
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.removeObserver = function (observer) {
	            var observers = this.observers_;
	            var index = observers.indexOf(observer);
	            // Remove observer if it's present in registry.
	            if (~index) {
	                observers.splice(index, 1);
	            }
	            // Remove listeners if controller has no connected observers.
	            if (!observers.length && this.connected_) {
	                this.disconnect_();
	            }
	        };
	        /**
	         * Invokes the update of observers. It will continue running updates insofar
	         * it detects changes.
	         *
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.refresh = function () {
	            var changesDetected = this.updateObservers_();
	            // Continue running updates if changes have been detected as there might
	            // be future ones caused by CSS transitions.
	            if (changesDetected) {
	                this.refresh();
	            }
	        };
	        /**
	         * Updates every observer from observers list and notifies them of queued
	         * entries.
	         *
	         * @private
	         * @returns {boolean} Returns "true" if any observer has detected changes in
	         *      dimensions of it's elements.
	         */
	        ResizeObserverController.prototype.updateObservers_ = function () {
	            // Collect observers that have active observations.
	            var activeObservers = this.observers_.filter(function (observer) {
	                return observer.gatherActive(), observer.hasActive();
	            });
	            // Deliver notifications in a separate cycle in order to avoid any
	            // collisions between observers, e.g. when multiple instances of
	            // ResizeObserver are tracking the same element and the callback of one
	            // of them changes content dimensions of the observed target. Sometimes
	            // this may result in notifications being blocked for the rest of observers.
	            activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
	            return activeObservers.length > 0;
	        };
	        /**
	         * Initializes DOM listeners.
	         *
	         * @private
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.connect_ = function () {
	            // Do nothing if running in a non-browser environment or if listeners
	            // have been already added.
	            if (!isBrowser || this.connected_) {
	                return;
	            }
	            // Subscription to the "Transitionend" event is used as a workaround for
	            // delayed transitions. This way it's possible to capture at least the
	            // final state of an element.
	            document.addEventListener('transitionend', this.onTransitionEnd_);
	            window.addEventListener('resize', this.refresh);
	            if (mutationObserverSupported) {
	                this.mutationsObserver_ = new MutationObserver(this.refresh);
	                this.mutationsObserver_.observe(document, {
	                    attributes: true,
	                    childList: true,
	                    characterData: true,
	                    subtree: true
	                });
	            }
	            else {
	                document.addEventListener('DOMSubtreeModified', this.refresh);
	                this.mutationEventsAdded_ = true;
	            }
	            this.connected_ = true;
	        };
	        /**
	         * Removes DOM listeners.
	         *
	         * @private
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.disconnect_ = function () {
	            // Do nothing if running in a non-browser environment or if listeners
	            // have been already removed.
	            if (!isBrowser || !this.connected_) {
	                return;
	            }
	            document.removeEventListener('transitionend', this.onTransitionEnd_);
	            window.removeEventListener('resize', this.refresh);
	            if (this.mutationsObserver_) {
	                this.mutationsObserver_.disconnect();
	            }
	            if (this.mutationEventsAdded_) {
	                document.removeEventListener('DOMSubtreeModified', this.refresh);
	            }
	            this.mutationsObserver_ = null;
	            this.mutationEventsAdded_ = false;
	            this.connected_ = false;
	        };
	        /**
	         * "Transitionend" event handler.
	         *
	         * @private
	         * @param {TransitionEvent} event
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
	            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
	            // Detect whether transition may affect dimensions of an element.
	            var isReflowProperty = transitionKeys.some(function (key) {
	                return !!~propertyName.indexOf(key);
	            });
	            if (isReflowProperty) {
	                this.refresh();
	            }
	        };
	        /**
	         * Returns instance of the ResizeObserverController.
	         *
	         * @returns {ResizeObserverController}
	         */
	        ResizeObserverController.getInstance = function () {
	            if (!this.instance_) {
	                this.instance_ = new ResizeObserverController();
	            }
	            return this.instance_;
	        };
	        /**
	         * Holds reference to the controller's instance.
	         *
	         * @private {ResizeObserverController}
	         */
	        ResizeObserverController.instance_ = null;
	        return ResizeObserverController;
	    }());
	
	    /**
	     * Defines non-writable/enumerable properties of the provided target object.
	     *
	     * @param {Object} target - Object for which to define properties.
	     * @param {Object} props - Properties to be defined.
	     * @returns {Object} Target object.
	     */
	    var defineConfigurable = (function (target, props) {
	        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
	            var key = _a[_i];
	            Object.defineProperty(target, key, {
	                value: props[key],
	                enumerable: false,
	                writable: false,
	                configurable: true
	            });
	        }
	        return target;
	    });
	
	    /**
	     * Returns the global object associated with provided element.
	     *
	     * @param {Object} target
	     * @returns {Object}
	     */
	    var getWindowOf = (function (target) {
	        // Assume that the element is an instance of Node, which means that it
	        // has the "ownerDocument" property from which we can retrieve a
	        // corresponding global object.
	        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
	        // Return the local global object if it's not possible extract one from
	        // provided element.
	        return ownerGlobal || global$1;
	    });
	
	    // Placeholder of an empty content rectangle.
	    var emptyRect = createRectInit(0, 0, 0, 0);
	    /**
	     * Converts provided string to a number.
	     *
	     * @param {number|string} value
	     * @returns {number}
	     */
	    function toFloat(value) {
	        return parseFloat(value) || 0;
	    }
	    /**
	     * Extracts borders size from provided styles.
	     *
	     * @param {CSSStyleDeclaration} styles
	     * @param {...string} positions - Borders positions (top, right, ...)
	     * @returns {number}
	     */
	    function getBordersSize(styles) {
	        var positions = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            positions[_i - 1] = arguments[_i];
	        }
	        return positions.reduce(function (size, position) {
	            var value = styles['border-' + position + '-width'];
	            return size + toFloat(value);
	        }, 0);
	    }
	    /**
	     * Extracts paddings sizes from provided styles.
	     *
	     * @param {CSSStyleDeclaration} styles
	     * @returns {Object} Paddings box.
	     */
	    function getPaddings(styles) {
	        var positions = ['top', 'right', 'bottom', 'left'];
	        var paddings = {};
	        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
	            var position = positions_1[_i];
	            var value = styles['padding-' + position];
	            paddings[position] = toFloat(value);
	        }
	        return paddings;
	    }
	    /**
	     * Calculates content rectangle of provided SVG element.
	     *
	     * @param {SVGGraphicsElement} target - Element content rectangle of which needs
	     *      to be calculated.
	     * @returns {DOMRectInit}
	     */
	    function getSVGContentRect(target) {
	        var bbox = target.getBBox();
	        return createRectInit(0, 0, bbox.width, bbox.height);
	    }
	    /**
	     * Calculates content rectangle of provided HTMLElement.
	     *
	     * @param {HTMLElement} target - Element for which to calculate the content rectangle.
	     * @returns {DOMRectInit}
	     */
	    function getHTMLElementContentRect(target) {
	        // Client width & height properties can't be
	        // used exclusively as they provide rounded values.
	        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
	        // By this condition we can catch all non-replaced inline, hidden and
	        // detached elements. Though elements with width & height properties less
	        // than 0.5 will be discarded as well.
	        //
	        // Without it we would need to implement separate methods for each of
	        // those cases and it's not possible to perform a precise and performance
	        // effective test for hidden elements. E.g. even jQuery's ':visible' filter
	        // gives wrong results for elements with width & height less than 0.5.
	        if (!clientWidth && !clientHeight) {
	            return emptyRect;
	        }
	        var styles = getWindowOf(target).getComputedStyle(target);
	        var paddings = getPaddings(styles);
	        var horizPad = paddings.left + paddings.right;
	        var vertPad = paddings.top + paddings.bottom;
	        // Computed styles of width & height are being used because they are the
	        // only dimensions available to JS that contain non-rounded values. It could
	        // be possible to utilize the getBoundingClientRect if only it's data wasn't
	        // affected by CSS transformations let alone paddings, borders and scroll bars.
	        var width = toFloat(styles.width), height = toFloat(styles.height);
	        // Width & height include paddings and borders when the 'border-box' box
	        // model is applied (except for IE).
	        if (styles.boxSizing === 'border-box') {
	            // Following conditions are required to handle Internet Explorer which
	            // doesn't include paddings and borders to computed CSS dimensions.
	            //
	            // We can say that if CSS dimensions + paddings are equal to the "client"
	            // properties then it's either IE, and thus we don't need to subtract
	            // anything, or an element merely doesn't have paddings/borders styles.
	            if (Math.round(width + horizPad) !== clientWidth) {
	                width -= getBordersSize(styles, 'left', 'right') + horizPad;
	            }
	            if (Math.round(height + vertPad) !== clientHeight) {
	                height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
	            }
	        }
	        // Following steps can't be applied to the document's root element as its
	        // client[Width/Height] properties represent viewport area of the window.
	        // Besides, it's as well not necessary as the <html> itself neither has
	        // rendered scroll bars nor it can be clipped.
	        if (!isDocumentElement(target)) {
	            // In some browsers (only in Firefox, actually) CSS width & height
	            // include scroll bars size which can be removed at this step as scroll
	            // bars are the only difference between rounded dimensions + paddings
	            // and "client" properties, though that is not always true in Chrome.
	            var vertScrollbar = Math.round(width + horizPad) - clientWidth;
	            var horizScrollbar = Math.round(height + vertPad) - clientHeight;
	            // Chrome has a rather weird rounding of "client" properties.
	            // E.g. for an element with content width of 314.2px it sometimes gives
	            // the client width of 315px and for the width of 314.7px it may give
	            // 314px. And it doesn't happen all the time. So just ignore this delta
	            // as a non-relevant.
	            if (Math.abs(vertScrollbar) !== 1) {
	                width -= vertScrollbar;
	            }
	            if (Math.abs(horizScrollbar) !== 1) {
	                height -= horizScrollbar;
	            }
	        }
	        return createRectInit(paddings.left, paddings.top, width, height);
	    }
	    /**
	     * Checks whether provided element is an instance of the SVGGraphicsElement.
	     *
	     * @param {Element} target - Element to be checked.
	     * @returns {boolean}
	     */
	    var isSVGGraphicsElement = (function () {
	        // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
	        // interface.
	        if (typeof SVGGraphicsElement !== 'undefined') {
	            return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
	        }
	        // If it's so, then check that element is at least an instance of the
	        // SVGElement and that it has the "getBBox" method.
	        // eslint-disable-next-line no-extra-parens
	        return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
	            typeof target.getBBox === 'function'); };
	    })();
	    /**
	     * Checks whether provided element is a document element (<html>).
	     *
	     * @param {Element} target - Element to be checked.
	     * @returns {boolean}
	     */
	    function isDocumentElement(target) {
	        return target === getWindowOf(target).document.documentElement;
	    }
	    /**
	     * Calculates an appropriate content rectangle for provided html or svg element.
	     *
	     * @param {Element} target - Element content rectangle of which needs to be calculated.
	     * @returns {DOMRectInit}
	     */
	    function getContentRect(target) {
	        if (!isBrowser) {
	            return emptyRect;
	        }
	        if (isSVGGraphicsElement(target)) {
	            return getSVGContentRect(target);
	        }
	        return getHTMLElementContentRect(target);
	    }
	    /**
	     * Creates rectangle with an interface of the DOMRectReadOnly.
	     * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
	     *
	     * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
	     * @returns {DOMRectReadOnly}
	     */
	    function createReadOnlyRect(_a) {
	        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
	        // If DOMRectReadOnly is available use it as a prototype for the rectangle.
	        var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
	        var rect = Object.create(Constr.prototype);
	        // Rectangle's properties are not writable and non-enumerable.
	        defineConfigurable(rect, {
	            x: x, y: y, width: width, height: height,
	            top: y,
	            right: x + width,
	            bottom: height + y,
	            left: x
	        });
	        return rect;
	    }
	    /**
	     * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
	     * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
	     *
	     * @param {number} x - X coordinate.
	     * @param {number} y - Y coordinate.
	     * @param {number} width - Rectangle's width.
	     * @param {number} height - Rectangle's height.
	     * @returns {DOMRectInit}
	     */
	    function createRectInit(x, y, width, height) {
	        return { x: x, y: y, width: width, height: height };
	    }
	
	    /**
	     * Class that is responsible for computations of the content rectangle of
	     * provided DOM element and for keeping track of it's changes.
	     */
	    var ResizeObservation = /** @class */ (function () {
	        /**
	         * Creates an instance of ResizeObservation.
	         *
	         * @param {Element} target - Element to be observed.
	         */
	        function ResizeObservation(target) {
	            /**
	             * Broadcasted width of content rectangle.
	             *
	             * @type {number}
	             */
	            this.broadcastWidth = 0;
	            /**
	             * Broadcasted height of content rectangle.
	             *
	             * @type {number}
	             */
	            this.broadcastHeight = 0;
	            /**
	             * Reference to the last observed content rectangle.
	             *
	             * @private {DOMRectInit}
	             */
	            this.contentRect_ = createRectInit(0, 0, 0, 0);
	            this.target = target;
	        }
	        /**
	         * Updates content rectangle and tells whether it's width or height properties
	         * have changed since the last broadcast.
	         *
	         * @returns {boolean}
	         */
	        ResizeObservation.prototype.isActive = function () {
	            var rect = getContentRect(this.target);
	            this.contentRect_ = rect;
	            return (rect.width !== this.broadcastWidth ||
	                rect.height !== this.broadcastHeight);
	        };
	        /**
	         * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
	         * from the corresponding properties of the last observed content rectangle.
	         *
	         * @returns {DOMRectInit} Last observed content rectangle.
	         */
	        ResizeObservation.prototype.broadcastRect = function () {
	            var rect = this.contentRect_;
	            this.broadcastWidth = rect.width;
	            this.broadcastHeight = rect.height;
	            return rect;
	        };
	        return ResizeObservation;
	    }());
	
	    var ResizeObserverEntry = /** @class */ (function () {
	        /**
	         * Creates an instance of ResizeObserverEntry.
	         *
	         * @param {Element} target - Element that is being observed.
	         * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
	         */
	        function ResizeObserverEntry(target, rectInit) {
	            var contentRect = createReadOnlyRect(rectInit);
	            // According to the specification following properties are not writable
	            // and are also not enumerable in the native implementation.
	            //
	            // Property accessors are not being used as they'd require to define a
	            // private WeakMap storage which may cause memory leaks in browsers that
	            // don't support this type of collections.
	            defineConfigurable(this, { target: target, contentRect: contentRect });
	        }
	        return ResizeObserverEntry;
	    }());
	
	    var ResizeObserverSPI = /** @class */ (function () {
	        /**
	         * Creates a new instance of ResizeObserver.
	         *
	         * @param {ResizeObserverCallback} callback - Callback function that is invoked
	         *      when one of the observed elements changes it's content dimensions.
	         * @param {ResizeObserverController} controller - Controller instance which
	         *      is responsible for the updates of observer.
	         * @param {ResizeObserver} callbackCtx - Reference to the public
	         *      ResizeObserver instance which will be passed to callback function.
	         */
	        function ResizeObserverSPI(callback, controller, callbackCtx) {
	            /**
	             * Collection of resize observations that have detected changes in dimensions
	             * of elements.
	             *
	             * @private {Array<ResizeObservation>}
	             */
	            this.activeObservations_ = [];
	            /**
	             * Registry of the ResizeObservation instances.
	             *
	             * @private {Map<Element, ResizeObservation>}
	             */
	            this.observations_ = new MapShim();
	            if (typeof callback !== 'function') {
	                throw new TypeError('The callback provided as parameter 1 is not a function.');
	            }
	            this.callback_ = callback;
	            this.controller_ = controller;
	            this.callbackCtx_ = callbackCtx;
	        }
	        /**
	         * Starts observing provided element.
	         *
	         * @param {Element} target - Element to be observed.
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.observe = function (target) {
	            if (!arguments.length) {
	                throw new TypeError('1 argument required, but only 0 present.');
	            }
	            // Do nothing if current environment doesn't have the Element interface.
	            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	                return;
	            }
	            if (!(target instanceof getWindowOf(target).Element)) {
	                throw new TypeError('parameter 1 is not of type "Element".');
	            }
	            var observations = this.observations_;
	            // Do nothing if element is already being observed.
	            if (observations.has(target)) {
	                return;
	            }
	            observations.set(target, new ResizeObservation(target));
	            this.controller_.addObserver(this);
	            // Force the update of observations.
	            this.controller_.refresh();
	        };
	        /**
	         * Stops observing provided element.
	         *
	         * @param {Element} target - Element to stop observing.
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.unobserve = function (target) {
	            if (!arguments.length) {
	                throw new TypeError('1 argument required, but only 0 present.');
	            }
	            // Do nothing if current environment doesn't have the Element interface.
	            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	                return;
	            }
	            if (!(target instanceof getWindowOf(target).Element)) {
	                throw new TypeError('parameter 1 is not of type "Element".');
	            }
	            var observations = this.observations_;
	            // Do nothing if element is not being observed.
	            if (!observations.has(target)) {
	                return;
	            }
	            observations.delete(target);
	            if (!observations.size) {
	                this.controller_.removeObserver(this);
	            }
	        };
	        /**
	         * Stops observing all elements.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.disconnect = function () {
	            this.clearActive();
	            this.observations_.clear();
	            this.controller_.removeObserver(this);
	        };
	        /**
	         * Collects observation instances the associated element of which has changed
	         * it's content rectangle.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.gatherActive = function () {
	            var _this = this;
	            this.clearActive();
	            this.observations_.forEach(function (observation) {
	                if (observation.isActive()) {
	                    _this.activeObservations_.push(observation);
	                }
	            });
	        };
	        /**
	         * Invokes initial callback function with a list of ResizeObserverEntry
	         * instances collected from active resize observations.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.broadcastActive = function () {
	            // Do nothing if observer doesn't have active observations.
	            if (!this.hasActive()) {
	                return;
	            }
	            var ctx = this.callbackCtx_;
	            // Create ResizeObserverEntry instance for every active observation.
	            var entries = this.activeObservations_.map(function (observation) {
	                return new ResizeObserverEntry(observation.target, observation.broadcastRect());
	            });
	            this.callback_.call(ctx, entries, ctx);
	            this.clearActive();
	        };
	        /**
	         * Clears the collection of active observations.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.clearActive = function () {
	            this.activeObservations_.splice(0);
	        };
	        /**
	         * Tells whether observer has active observations.
	         *
	         * @returns {boolean}
	         */
	        ResizeObserverSPI.prototype.hasActive = function () {
	            return this.activeObservations_.length > 0;
	        };
	        return ResizeObserverSPI;
	    }());
	
	    // Registry of internal observers. If WeakMap is not available use current shim
	    // for the Map collection as it has all required methods and because WeakMap
	    // can't be fully polyfilled anyway.
	    var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
	    /**
	     * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
	     * exposing only those methods and properties that are defined in the spec.
	     */
	    var ResizeObserver = /** @class */ (function () {
	        /**
	         * Creates a new instance of ResizeObserver.
	         *
	         * @param {ResizeObserverCallback} callback - Callback that is invoked when
	         *      dimensions of the observed elements change.
	         */
	        function ResizeObserver(callback) {
	            if (!(this instanceof ResizeObserver)) {
	                throw new TypeError('Cannot call a class as a function.');
	            }
	            if (!arguments.length) {
	                throw new TypeError('1 argument required, but only 0 present.');
	            }
	            var controller = ResizeObserverController.getInstance();
	            var observer = new ResizeObserverSPI(callback, controller, this);
	            observers.set(this, observer);
	        }
	        return ResizeObserver;
	    }());
	    // Expose public methods of ResizeObserver.
	    [
	        'observe',
	        'unobserve',
	        'disconnect'
	    ].forEach(function (method) {
	        ResizeObserver.prototype[method] = function () {
	            var _a;
	            return (_a = observers.get(this))[method].apply(_a, arguments);
	        };
	    });
	
	    var index = (function () {
	        // Export existing implementation if available.
	        if (typeof global$1.ResizeObserver !== 'undefined') {
	            return global$1.ResizeObserver;
	        }
	        return ResizeObserver;
	    })();
	
	    return index;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(86)))

/***/ }),
/* 619 */,
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

	var throttle = __webpack_require__(185);
	var debounce = __webpack_require__(95);
	
	module.exports = {
		throttle: throttle,
		debounce: debounce
	};


/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(618);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * tiny-cookie - A tiny cookie manipulation plugin
	 * https://github.com/Alex1990/tiny-cookie
	 * Under the MIT license | (c) Alex Chao
	 */
	
	!(function(root, factory) {
	
	  // Uses CommonJS, AMD or browser global to create a jQuery plugin.
	  // See: https://github.com/umdjs/umd
	  if (true) {
	    // Expose this plugin as an AMD module. Register an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node/CommonJS module
	    module.exports = factory();
	  } else {
	    // Browser globals 
	    root.Cookie = factory();
	  }
	
	}(this, function() {
	
	  'use strict';
	
	  // The public function which can get/set/remove cookie.
	  function Cookie(key, value, opts) {
	    if (value === void 0) {
	      return Cookie.get(key);
	    } else if (value === null) {
	      Cookie.remove(key);
	    } else {
	      Cookie.set(key, value, opts);
	    }
	  }
	
	  // Check if the cookie is enabled.
	  Cookie.enabled = function() {
	    var key = '__test_key';
	    var enabled;
	
	    document.cookie = key + '=1';
	    enabled = !!document.cookie;
	
	    if (enabled) Cookie.remove(key);
	
	    return enabled;
	  };
	
	  // Get the cookie value by the key.
	  Cookie.get = function(key, raw) {
	    if (typeof key !== 'string' || !key) return null;
	
	    key = '(?:^|; )' + escapeRe(key) + '(?:=([^;]*?))?(?:;|$)';
	
	    var reKey = new RegExp(key);
	    var res = reKey.exec(document.cookie);
	
	    return res !== null ? (raw ? res[1] : decodeURIComponent(res[1])) : null;
	  };
	
	  // Get the cookie's value without decoding.
	  Cookie.getRaw = function(key) {
	    return Cookie.get(key, true);
	  };
	
	  // Set a cookie.
	  Cookie.set = function(key, value, raw, opts) {
	    if (raw !== true) {
	      opts = raw;
	      raw = false;
	    }
	    opts = opts ? convert(opts) : convert({});
	    var cookie = key + '=' + (raw ? value : encodeURIComponent(value)) + opts;
	    document.cookie = cookie;
	  };
	
	  // Set a cookie without encoding the value.
	  Cookie.setRaw = function(key, value, opts) {
	    Cookie.set(key, value, true, opts);
	  };
	
	  // Remove a cookie by the specified key.
	  Cookie.remove = function(key) {
	    Cookie.set(key, 'a', { expires: new Date() });
	  };
	
	  // Helper function
	  // ---------------
	
	  // Escape special characters.
	  function escapeRe(str) {
	    return str.replace(/[.*+?^$|[\](){}\\-]/g, '\\$&');
	  }
	
	  // Convert an object to a cookie option string.
	  function convert(opts) {
	    var res = '';
	
	    for (var p in opts) {
	      if (opts.hasOwnProperty(p)) {
	
	        if (p === 'expires') {
	          var expires = opts[p];
	          if (typeof expires !== 'object') {
	            expires += typeof expires === 'number' ? 'D' : '';
	            expires = computeExpires(expires);
	          }
	          opts[p] = expires.toUTCString();
	        }
	
	        if (p === 'secure') {
	          if (opts[p]) {
	            res += ';' + p;
	          }
	
	          continue;
	        }
	
	        res += ';' + p + '=' + opts[p];
	      }
	    }
	
	    if (!opts.hasOwnProperty('path')) {
	      res += ';path=/';
	    }
	
	    return res;
	  }
	
	  // Return a future date by the given string.
	  function computeExpires(str) {
	    var expires = new Date();
	    var lastCh = str.charAt(str.length - 1);
	    var value = parseInt(str, 10);
	
	    switch (lastCh) {
	      case 'Y': expires.setFullYear(expires.getFullYear() + value); break;
	      case 'M': expires.setMonth(expires.getMonth() + value); break;
	      case 'D': expires.setDate(expires.getDate() + value); break;
	      case 'h': expires.setHours(expires.getHours() + value); break;
	      case 'm': expires.setMinutes(expires.getMinutes() + value); break;
	      case 's': expires.setSeconds(expires.getSeconds() + value); break;
	      default: expires = new Date(str);
	    }
	
	    return expires;
	  }
	
	  return Cookie;
	
	}));


/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var toGeoJSON = (function() {
	    'use strict';
	
	    var removeSpace = /\s*/g,
	        trimSpace = /^\s*|\s*$/g,
	        splitSpace = /\s+/;
	    // generate a short, numeric hash of a string
	    function okhash(x) {
	        if (!x || !x.length) return 0;
	        for (var i = 0, h = 0; i < x.length; i++) {
	            h = ((h << 5) - h) + x.charCodeAt(i) | 0;
	        } return h;
	    }
	    // all Y children of X
	    function get(x, y) { return x.getElementsByTagName(y); }
	    function attr(x, y) { return x.getAttribute(y); }
	    function attrf(x, y) { return parseFloat(attr(x, y)); }
	    // one Y child of X, if any, otherwise null
	    function get1(x, y) { var n = get(x, y); return n.length ? n[0] : null; }
	    // https://developer.mozilla.org/en-US/docs/Web/API/Node.normalize
	    function norm(el) { if (el.normalize) { el.normalize(); } return el; }
	    // cast array x into numbers
	    function numarray(x) {
	        for (var j = 0, o = []; j < x.length; j++) { o[j] = parseFloat(x[j]); }
	        return o;
	    }
	    // get the content of a text node, if any
	    function nodeVal(x) {
	        if (x) { norm(x); }
	        return (x && x.textContent) || '';
	    }
	    // get the contents of multiple text nodes, if present
	    function getMulti(x, ys) {
	        var o = {}, n, k;
	        for (k = 0; k < ys.length; k++) {
	            n = get1(x, ys[k]);
	            if (n) o[ys[k]] = nodeVal(n);
	        }
	        return o;
	    }
	    // add properties of Y to X, overwriting if present in both
	    function extend(x, y) { for (var k in y) x[k] = y[k]; }
	    // get one coordinate from a coordinate array, if any
	    function coord1(v) { return numarray(v.replace(removeSpace, '').split(',')); }
	    // get all coordinates from a coordinate array as [[],[]]
	    function coord(v) {
	        var coords = v.replace(trimSpace, '').split(splitSpace),
	            o = [];
	        for (var i = 0; i < coords.length; i++) {
	            o.push(coord1(coords[i]));
	        }
	        return o;
	    }
	    function coordPair(x) {
	        var ll = [attrf(x, 'lon'), attrf(x, 'lat')],
	            ele = get1(x, 'ele'),
	            // handle namespaced attribute in browser
	            heartRate = get1(x, 'gpxtpx:hr') || get1(x, 'hr'),
	            time = get1(x, 'time'),
	            e;
	        if (ele) {
	            e = parseFloat(nodeVal(ele));
	            if (!isNaN(e)) {
	                ll.push(e);
	            }
	        }
	        return {
	            coordinates: ll,
	            time: time ? nodeVal(time) : null,
	            heartRate: heartRate ? parseFloat(nodeVal(heartRate)) : null
	        };
	    }
	
	    // create a new feature collection parent object
	    function fc() {
	        return {
	            type: 'FeatureCollection',
	            features: []
	        };
	    }
	
	    var serializer;
	    if (typeof XMLSerializer !== 'undefined') {
	        /* istanbul ignore next */
	        serializer = new XMLSerializer();
	    // only require xmldom in a node environment
	    } else if (typeof exports === 'object' && typeof process === 'object' && !process.browser) {
	        serializer = new (__webpack_require__(791).XMLSerializer)();
	    }
	    function xml2str(str) {
	        // IE9 will create a new XMLSerializer but it'll crash immediately.
	        // This line is ignored because we don't run coverage tests in IE9
	        /* istanbul ignore next */
	        if (str.xml !== undefined) return str.xml;
	        return serializer.serializeToString(str);
	    }
	
	    var t = {
	        kml: function(doc) {
	
	            var gj = fc(),
	                // styleindex keeps track of hashed styles in order to match features
	                styleIndex = {}, styleByHash = {},
	                // stylemapindex keeps track of style maps to expose in properties
	                styleMapIndex = {},
	                // atomic geospatial types supported by KML - MultiGeometry is
	                // handled separately
	                geotypes = ['Polygon', 'LineString', 'Point', 'Track', 'gx:Track'],
	                // all root placemarks in the file
	                placemarks = get(doc, 'Placemark'),
	                styles = get(doc, 'Style'),
	                styleMaps = get(doc, 'StyleMap');
	
	            for (var k = 0; k < styles.length; k++) {
	                var hash = okhash(xml2str(styles[k])).toString(16);
	                styleIndex['#' + attr(styles[k], 'id')] = hash;
	                styleByHash[hash] = styles[k];
	            }
	            for (var l = 0; l < styleMaps.length; l++) {
	                styleIndex['#' + attr(styleMaps[l], 'id')] = okhash(xml2str(styleMaps[l])).toString(16);
	                var pairs = get(styleMaps[l], 'Pair');
	                var pairsMap = {};
	                for (var m = 0; m < pairs.length; m++) {
	                    pairsMap[nodeVal(get1(pairs[m], 'key'))] = nodeVal(get1(pairs[m], 'styleUrl'));
	                }
	                styleMapIndex['#' + attr(styleMaps[l], 'id')] = pairsMap;
	
	            }
	            for (var j = 0; j < placemarks.length; j++) {
	                gj.features = gj.features.concat(getPlacemark(placemarks[j]));
	            }
	            function kmlColor(v) {
	                var color, opacity;
	                v = v || '';
	                if (v.substr(0, 1) === '#') { v = v.substr(1); }
	                if (v.length === 6 || v.length === 3) { color = v; }
	                if (v.length === 8) {
	                    opacity = parseInt(v.substr(0, 2), 16) / 255;
	                    color = '#' + v.substr(6, 2) +
	                        v.substr(4, 2) +
	                        v.substr(2, 2);
	                }
	                return [color, isNaN(opacity) ? undefined : opacity];
	            }
	            function gxCoord(v) { return numarray(v.split(' ')); }
	            function gxCoords(root) {
	                var elems = get(root, 'coord', 'gx'), coords = [], times = [];
	                if (elems.length === 0) elems = get(root, 'gx:coord');
	                for (var i = 0; i < elems.length; i++) coords.push(gxCoord(nodeVal(elems[i])));
	                var timeElems = get(root, 'when');
	                for (var j = 0; j < timeElems.length; j++) times.push(nodeVal(timeElems[j]));
	                return {
	                    coords: coords,
	                    times: times
	                };
	            }
	            function getGeometry(root) {
	                var geomNode, geomNodes, i, j, k, geoms = [], coordTimes = [];
	                if (get1(root, 'MultiGeometry')) { return getGeometry(get1(root, 'MultiGeometry')); }
	                if (get1(root, 'MultiTrack')) { return getGeometry(get1(root, 'MultiTrack')); }
	                if (get1(root, 'gx:MultiTrack')) { return getGeometry(get1(root, 'gx:MultiTrack')); }
	                for (i = 0; i < geotypes.length; i++) {
	                    geomNodes = get(root, geotypes[i]);
	                    if (geomNodes) {
	                        for (j = 0; j < geomNodes.length; j++) {
	                            geomNode = geomNodes[j];
	                            if (geotypes[i] === 'Point') {
	                                geoms.push({
	                                    type: 'Point',
	                                    coordinates: coord1(nodeVal(get1(geomNode, 'coordinates')))
	                                });
	                            } else if (geotypes[i] === 'LineString') {
	                                geoms.push({
	                                    type: 'LineString',
	                                    coordinates: coord(nodeVal(get1(geomNode, 'coordinates')))
	                                });
	                            } else if (geotypes[i] === 'Polygon') {
	                                var rings = get(geomNode, 'LinearRing'),
	                                    coords = [];
	                                for (k = 0; k < rings.length; k++) {
	                                    coords.push(coord(nodeVal(get1(rings[k], 'coordinates'))));
	                                }
	                                geoms.push({
	                                    type: 'Polygon',
	                                    coordinates: coords
	                                });
	                            } else if (geotypes[i] === 'Track' ||
	                                geotypes[i] === 'gx:Track') {
	                                var track = gxCoords(geomNode);
	                                geoms.push({
	                                    type: 'LineString',
	                                    coordinates: track.coords
	                                });
	                                if (track.times.length) coordTimes.push(track.times);
	                            }
	                        }
	                    }
	                }
	                return {
	                    geoms: geoms,
	                    coordTimes: coordTimes
	                };
	            }
	            function getPlacemark(root) {
	                var geomsAndTimes = getGeometry(root), i, properties = {},
	                    name = nodeVal(get1(root, 'name')),
	                    styleUrl = nodeVal(get1(root, 'styleUrl')),
	                    description = nodeVal(get1(root, 'description')),
	                    timeSpan = get1(root, 'TimeSpan'),
	                    timeStamp = get1(root, 'TimeStamp'),
	                    extendedData = get1(root, 'ExtendedData'),
	                    lineStyle = get1(root, 'LineStyle'),
	                    polyStyle = get1(root, 'PolyStyle'),
	                    visibility = get1(root, 'visibility');
	
	                if (!geomsAndTimes.geoms.length) return [];
	                if (name) properties.name = name;
	                if (styleUrl) {
	                    if (styleUrl[0] !== '#') {
	                        styleUrl = '#' + styleUrl;
	                    }
	
	                    properties.styleUrl = styleUrl;
	                    if (styleIndex[styleUrl]) {
	                        properties.styleHash = styleIndex[styleUrl];
	                    }
	                    if (styleMapIndex[styleUrl]) {
	                        properties.styleMapHash = styleMapIndex[styleUrl];
	                        properties.styleHash = styleIndex[styleMapIndex[styleUrl].normal];
	                    }
	                    // Try to populate the lineStyle or polyStyle since we got the style hash
	                    var style = styleByHash[properties.styleHash];
	                    if (style) {
	                        if (!lineStyle) lineStyle = get1(style, 'LineStyle');
	                        if (!polyStyle) polyStyle = get1(style, 'PolyStyle');
	                    }
	                }
	                if (description) properties.description = description;
	                if (timeSpan) {
	                    var begin = nodeVal(get1(timeSpan, 'begin'));
	                    var end = nodeVal(get1(timeSpan, 'end'));
	                    properties.timespan = { begin: begin, end: end };
	                }
	                if (timeStamp) {
	                    properties.timestamp = nodeVal(get1(timeStamp, 'when'));
	                }
	                if (lineStyle) {
	                    var linestyles = kmlColor(nodeVal(get1(lineStyle, 'color'))),
	                        color = linestyles[0],
	                        opacity = linestyles[1],
	                        width = parseFloat(nodeVal(get1(lineStyle, 'width')));
	                    if (color) properties.stroke = color;
	                    if (!isNaN(opacity)) properties['stroke-opacity'] = opacity;
	                    if (!isNaN(width)) properties['stroke-width'] = width;
	                }
	                if (polyStyle) {
	                    var polystyles = kmlColor(nodeVal(get1(polyStyle, 'color'))),
	                        pcolor = polystyles[0],
	                        popacity = polystyles[1],
	                        fill = nodeVal(get1(polyStyle, 'fill')),
	                        outline = nodeVal(get1(polyStyle, 'outline'));
	                    if (pcolor) properties.fill = pcolor;
	                    if (!isNaN(popacity)) properties['fill-opacity'] = popacity;
	                    if (fill) properties['fill-opacity'] = fill === '1' ? properties['fill-opacity'] || 1 : 0;
	                    if (outline) properties['stroke-opacity'] = outline === '1' ? properties['stroke-opacity'] || 1 : 0;
	                }
	                if (extendedData) {
	                    var datas = get(extendedData, 'Data'),
	                        simpleDatas = get(extendedData, 'SimpleData');
	
	                    for (i = 0; i < datas.length; i++) {
	                        properties[datas[i].getAttribute('name')] = nodeVal(get1(datas[i], 'value'));
	                    }
	                    for (i = 0; i < simpleDatas.length; i++) {
	                        properties[simpleDatas[i].getAttribute('name')] = nodeVal(simpleDatas[i]);
	                    }
	                }
	                if (visibility) {
	                    properties.visibility = nodeVal(visibility);
	                }
	                if (geomsAndTimes.coordTimes.length) {
	                    properties.coordTimes = (geomsAndTimes.coordTimes.length === 1) ?
	                        geomsAndTimes.coordTimes[0] : geomsAndTimes.coordTimes;
	                }
	                var feature = {
	                    type: 'Feature',
	                    geometry: (geomsAndTimes.geoms.length === 1) ? geomsAndTimes.geoms[0] : {
	                        type: 'GeometryCollection',
	                        geometries: geomsAndTimes.geoms
	                    },
	                    properties: properties
	                };
	                if (attr(root, 'id')) feature.id = attr(root, 'id');
	                return [feature];
	            }
	            return gj;
	        },
	        gpx: function(doc) {
	            var i,
	                tracks = get(doc, 'trk'),
	                routes = get(doc, 'rte'),
	                waypoints = get(doc, 'wpt'),
	                // a feature collection
	                gj = fc(),
	                feature;
	            for (i = 0; i < tracks.length; i++) {
	                feature = getTrack(tracks[i]);
	                if (feature) gj.features.push(feature);
	            }
	            for (i = 0; i < routes.length; i++) {
	                feature = getRoute(routes[i]);
	                if (feature) gj.features.push(feature);
	            }
	            for (i = 0; i < waypoints.length; i++) {
	                gj.features.push(getPoint(waypoints[i]));
	            }
	            function getPoints(node, pointname) {
	                var pts = get(node, pointname),
	                    line = [],
	                    times = [],
	                    heartRates = [],
	                    l = pts.length;
	                if (l < 2) return {};  // Invalid line in GeoJSON
	                for (var i = 0; i < l; i++) {
	                    var c = coordPair(pts[i]);
	                    line.push(c.coordinates);
	                    if (c.time) times.push(c.time);
	                    if (c.heartRate) heartRates.push(c.heartRate);
	                }
	                return {
	                    line: line,
	                    times: times,
	                    heartRates: heartRates
	                };
	            }
	            function getTrack(node) {
	                var segments = get(node, 'trkseg'),
	                    track = [],
	                    times = [],
	                    heartRates = [],
	                    line;
	                for (var i = 0; i < segments.length; i++) {
	                    line = getPoints(segments[i], 'trkpt');
	                    if (line) {
	                        if (line.line) track.push(line.line);
	                        if (line.times && line.times.length) times.push(line.times);
	                        if (line.heartRates && line.heartRates.length) heartRates.push(line.heartRates);
	                    }
	                }
	                if (track.length === 0) return;
	                var properties = getProperties(node);
	                if (times.length) properties.coordTimes = track.length === 1 ? times[0] : times;
	                if (heartRates.length) properties.heartRates = track.length === 1 ? heartRates[0] : heartRates;
	                return {
	                    type: 'Feature',
	                    properties: properties,
	                    geometry: {
	                        type: track.length === 1 ? 'LineString' : 'MultiLineString',
	                        coordinates: track.length === 1 ? track[0] : track
	                    }
	                };
	            }
	            function getRoute(node) {
	                var line = getPoints(node, 'rtept');
	                if (!line.line) return;
	                var routeObj = {
	                    type: 'Feature',
	                    properties: getProperties(node),
	                    geometry: {
	                        type: 'LineString',
	                        coordinates: line.line
	                    }
	                };
	                return routeObj;
	            }
	            function getPoint(node) {
	                var prop = getProperties(node);
	                extend(prop, getMulti(node, ['sym', 'type']));
	                return {
	                    type: 'Feature',
	                    properties: prop,
	                    geometry: {
	                        type: 'Point',
	                        coordinates: coordPair(node).coordinates
	                    }
	                };
	            }
	            function getProperties(node) {
	                var prop, links;
	                prop = getMulti(node, ['name', 'cmt', 'desc', 'time', 'keywords']);
	                links = get(node, 'link');
	                if (links.length) prop.links = [];
	                for (var i = 0, link; i < links.length; i++) {
	                    link = { href: attr(links[i], 'href') };
	                    extend(link, getMulti(links[i], ['text', 'type']));
	                    prop.links.push(link);
	                }
	                return prop;
	            }
	            return gj;
	        }
	    };
	    return t;
	})();
	
	if (true) module.exports = toGeoJSON;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ }),
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */,
/* 661 */,
/* 662 */,
/* 663 */,
/* 664 */,
/* 665 */,
/* 666 */,
/* 667 */,
/* 668 */,
/* 669 */,
/* 670 */,
/* 671 */,
/* 672 */,
/* 673 */,
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */,
/* 684 */,
/* 685 */,
/* 686 */,
/* 687 */,
/* 688 */,
/* 689 */,
/* 690 */,
/* 691 */,
/* 692 */,
/* 693 */,
/* 694 */,
/* 695 */,
/* 696 */,
/* 697 */,
/* 698 */,
/* 699 */,
/* 700 */,
/* 701 */,
/* 702 */,
/* 703 */,
/* 704 */,
/* 705 */,
/* 706 */,
/* 707 */,
/* 708 */,
/* 709 */,
/* 710 */,
/* 711 */,
/* 712 */,
/* 713 */,
/* 714 */,
/* 715 */,
/* 716 */,
/* 717 */,
/* 718 */,
/* 719 */,
/* 720 */,
/* 721 */,
/* 722 */,
/* 723 */,
/* 724 */,
/* 725 */,
/* 726 */,
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */,
/* 731 */,
/* 732 */,
/* 733 */,
/* 734 */,
/* 735 */,
/* 736 */,
/* 737 */,
/* 738 */,
/* 739 */,
/* 740 */,
/* 741 */,
/* 742 */,
/* 743 */,
/* 744 */,
/* 745 */,
/* 746 */,
/* 747 */,
/* 748 */,
/* 749 */,
/* 750 */,
/* 751 */,
/* 752 */,
/* 753 */,
/* 754 */,
/* 755 */,
/* 756 */,
/* 757 */,
/* 758 */,
/* 759 */,
/* 760 */,
/* 761 */,
/* 762 */,
/* 763 */,
/* 764 */,
/* 765 */,
/* 766 */,
/* 767 */,
/* 768 */,
/* 769 */,
/* 770 */,
/* 771 */,
/* 772 */,
/* 773 */,
/* 774 */,
/* 775 */,
/* 776 */,
/* 777 */,
/* 778 */,
/* 779 */,
/* 780 */,
/* 781 */,
/* 782 */,
/* 783 */,
/* 784 */,
/* 785 */,
/* 786 */,
/* 787 */,
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

	/*----------------------------------------*\
	    Vuebar
	\*----------------------------------------*/
	;(function(){
	    'use strict';
	
	
	
	    /*------------------------------------*\
	        Vuebar
	    \*------------------------------------*/
	    var Vuebar = {};
	    Vuebar.install = function(Vue, options){
	
	
	
	        /*------------------------------------*\
	            Create State
	            - contains default values
	        \*------------------------------------*/
	        function createState(el){
	            el._vuebarState = {
	
	                // config with default values that may be overwritten on directive intialization
	                config: {
	                    scrollThrottle: 10,
	                    draggerThrottle: 10,
	                    resizeRefresh: true,
	                    observerThrottle: 100,
	                    resizeDebounce: 100,
	                    unselectableBody: true,
	                    overrideFloatingScrollbar: true,
	                    scrollingPhantomDelay: 1000,
	                    draggingPhantomDelay: 1000,
	                    preventParentScroll: false,
	                    useScrollbarPseudo: false, // experimental
	
	                    el1Class: 'vb',
	                    el1ScrollVisibleClass: 'vb-visible',
	                    el1ScrollInvisibleClass: 'vb-invisible',
	                    el1ScrollingClass: 'vb-scrolling',
	                    el1ScrollingPhantomClass: 'vb-scrolling-phantom',
	                    el1DraggingClass: 'vb-dragging',
	                    el1DraggingPhantomClass: 'vb-dragging-phantom',
	
	                    el2Class: 'vb-content',
	
	                    draggerClass: 'vb-dragger',
	                    draggerStylerClass: 'vb-dragger-styler',
	                },
	
	                // reference to binding
	                binding: null,
	
	                // references to directive DOM elements
	                el1: null,
	                el2: null,
	                dragger: null,
	
	                // show dragger
	                draggerEnabled: null,
	
	                // properties computed for internal directive logic & DOM manipulations
	                visibleArea: 0, // ratio between container height and scrollable content height
	                scrollTop: 0, // position of content scrollTop in px
	                barTop: 0, // position of dragger in px
	                barHeight: 0, // height of dragger in px
	                mouseBarOffsetY: 0, // relative position of mouse at the time of clicking on dragger
	                barDragging: false, // when the dragger is used
	
	                // reference to MutationObserver
	                mutationObserver: null,
	
	                // references to timeouts for DOM class manipulation
	                scrollingClassTimeout: null,
	                draggingClassTimeout: null,
	                scrollingPhantomClassTimeout: null,
	                draggingPhantomClassTimeout: null,
	
	                // references to a functions we'll need when removing events
	                barMousedown: null,
	                documentMousemove: null,
	                documentMouseup: null,
	                windowResize: null,
	                scrollHandler: null,
	                wheelHandler: null,
	
	            };
	            return el._vuebarState;
	        }
	
	
	
	
	        /*------------------------------------*\
	            Get State
	        \*------------------------------------*/
	        function getState(el){
	            return el._vuebarState;
	        }
	
	
	
	
	        /*------------------------------------*\
	            Mount Validation
	        \*------------------------------------*/
	        function markupValidation(el){
	            if (!el.firstChild) {
	                Vue.util.warn('(Vuebar) Element 1 with v-bar directive doesn\'t have required child element 2.');
	                return false;
	            }
	            return true;
	        }
	
	
	
	
	
	        /*------------------------------------*\
	            Computing Properties
	        \*------------------------------------*/
	        function computeVisibleArea(el){
	            var state = getState(el);
	            state.visibleArea = (state.el2.clientHeight / state.el2.scrollHeight);
	        }
	
	        function computeScrollTop(el){
	            var state = getState(el);
	            state.scrollTop = state.barTop * (state.el2.scrollHeight / state.el2.clientHeight);
	        }
	
	        function computeBarTop(el, event){
	            var state = getState(el);
	
	            // if the function gets called on scroll event
	            if (!event) {
	                state.barTop = state.el2.scrollTop * state.visibleArea;
	                return false;
	            } // else the function gets called when moving dragger with mouse
	
	
	            var relativeMouseY = (event.clientY - state.el1.getBoundingClientRect().top);
	            if (relativeMouseY <= state.mouseBarOffsetY) { // if bar is trying to go over top
	                state.barTop = 0;
	            }
	
	            if (relativeMouseY > state.mouseBarOffsetY) { // if bar is moving between top and bottom
	                state.barTop = relativeMouseY - state.mouseBarOffsetY;
	            }
	
	
	            if ( (state.barTop + state.barHeight ) >= state.el2.clientHeight ) { // if bar is trying to go over bottom
	                state.barTop = state.el2.clientHeight - state.barHeight;
	            }
	
	        }
	
	        function computeBarHeight(el){
	            var state = getState(el);
	            if (state.visibleArea >= 1) {
	                state.barHeight = 0;
	            } else {
	                state.barHeight = state.el2.clientHeight * state.visibleArea;
	            }
	        }
	
	
	
	
	        /*------------------------------------*\
	            Styles & DOM
	        \*------------------------------------*/
	        function createDragger(el){
	            var state = getState(el);
	
	            var dragger = document.createElement('div');
	            var draggerStyler = document.createElement('div');
	
	            dragger.className = state.config.draggerClass;
	
	            dragger.style.position = 'absolute';
	
	            if (!state.draggerEnabled) {
	                dragger.style.display = 'none';
	            }
	
	            draggerStyler.className = state.config.draggerStylerClass;
	
	            dragger.appendChild(draggerStyler);
	            state.el1.appendChild(dragger);
	
	            return dragger;
	        }
	
	
	        function updateDragger(el, options){
	            var options = options ? options : {};
	            var state = getState(el);
	
	            // setting dragger styles
	            state.dragger.style.height = parseInt( Math.round( state.barHeight)  ) + 'px';
	            state.dragger.style.top = parseInt( Math.round( state.barTop ) ) + 'px';
	            //state.dragger.style.height = Math.ceil( state.barHeight ) + 'px';
	            //state.dragger.style.top = Math.ceil( state.barTop ) + 'px';
	
	            // scrollbar visible / invisible classes
	            if (state.draggerEnabled && (state.visibleArea<1)) {
	                removeClass(state.el1, state.config.el1ScrollInvisibleClass);
	                addClass(state.el1, state.config.el1ScrollVisibleClass);
	            } else {
	                removeClass(state.el1, state.config.el1ScrollVisibleClass);
	                addClass(state.el1, state.config.el1ScrollInvisibleClass);
	            }
	
	
	
	            if (options.withScrollingClasses) {
	
	                // add scrolling class
	                addClass(state.el1, state.config.el1ScrollingClass);
	
	                // remove scrolling class
	                state.scrollingClassTimeout ?
	                    clearTimeout(state.scrollingClassTimeout) : null;
	                state.scrollingClassTimeout = setTimeout(function() {
	                    removeClass(state.el1, state.config.el1ScrollingClass);
	                }, state.config.scrollThrottle + 5);
	
	
	
	                // add phantom scrolling class
	                addClass(state.el1, state.config.el1ScrollingPhantomClass);
	
	                // remove phantom scrolling class
	                state.scrollingPhantomClassTimeout ?
	                    clearTimeout(state.scrollingPhantomClassTimeout) : null;
	                state.scrollingPhantomClassTimeout = setTimeout(function() {
	                    removeClass(state.el1, state.config.el1ScrollingPhantomClass);
	                }, state.config.scrollThrottle + state.config.scrollingPhantomDelay);
	
	            }
	
	        }
	
	
	
	        // this is an experimental feature
	        // - it works only on chrome and safari
	        // - instead of hiding scrollbar by overflowing it with its parent set to overflow:hidden
	        //   we hide scrollbar using pseudo-element selector ::-webkit-scrollbar
	        function hideScrollbarUsingPseudoElement(el){
	            var state = getState(el);
	            var idName = 'vuebar-pseudo-element-styles';
	            var selector = '.' + state.config.el2Class + '::-webkit-scrollbar';
	            var styleElm = document.getElementById(idName);
	            var sheet = null;
	
	            if (styleElm) {
	                sheet = styleElm.sheet;
	            } else {
	                styleElm = document.createElement('style');
	                styleElm.id = idName;
	                document.head.appendChild(styleElm);
	                sheet = styleElm.sheet;
	            }
	
	            // detect if there is a rule already added to the selector
	            var ruleExists = false;
	            for(var i=0, l=sheet.rules.length; i<l; i++){
	                var rule = sheet.rules[i];
	                if (rule.selectorText == selector) {
	                    ruleExists = true;
	                }
	            }
	
	            // if there is rule added already then don't continue
	            if ( ruleExists ) { return false }
	
	            // insert rule
	            // - we only need to use insertRule and don't need to use addRule at all
	            //   because we're only targeting chrome & safari browsers
	            if (sheet.insertRule) {
	                sheet.insertRule(selector + '{display:none}', 0);
	            }
	
	        }
	
	
	
	
	        function preventParentScroll(el, event){
	            var state = getState(el);
	
	            if (state.visibleArea >= 1) {
	                return false;
	            }
	
	            var scrollDist = state.el2.scrollHeight - state.el2.clientHeight;
	            var scrollTop = state.el2.scrollTop;
	
	            var wheelingUp = event.deltaY < 0;
	            var wheelingDown = event.deltaY > 0;
	
	            if ( (scrollTop <= 0) && wheelingUp) {
	                event.preventDefault();
	                return false;
	            }
	
	            if ( (scrollTop >= scrollDist) && wheelingDown) {
	                event.preventDefault();
	                return false;
	            }
	
	        }
	
	
	
	        function updateScroll(el){
	            var state = getState(el);
	            state.el2.scrollTop = state.scrollTop;
	        }
	
	
	
	
	        /*------------------------------------*\
	            Refresh
	        \*------------------------------------*/
	
	        function refreshScrollbar(el, options){
	            var options = options ? options : {};
	
	            if (options.immediate) {
	                computeVisibleArea(el);
	                computeBarTop(el);
	                computeBarHeight(el);
	                updateDragger(el);
	            }
	
	            Vue.nextTick(function(){
	                if ( !getState(el) ) { return false }
	                computeVisibleArea(el);
	                computeBarTop(el);
	                computeBarHeight(el);
	                updateDragger(el);
	            }.bind(this));
	        }
	
	
	
	
	        /*------------------------------------*\
	            Events & Handlers
	        \*------------------------------------*/
	
	        function scrollHandler(el){
	            var state = getState(el);
	            return throttle(function(event){
	                computeVisibleArea(el);
	                computeBarHeight(el); // fallback for an undetected content change
	                if (!state.barDragging) {
	                    computeBarTop(el);
	                    updateDragger(el, {withScrollingClasses: true});
	                }
	            }.bind(this), state.config.scrollThrottle);
	        }
	
	
	        function wheelHandler(el){
	            return function(event){
	                preventParentScroll(el, event);
	            }.bind(this);
	        }
	
	
	        function documentMousemove(el){
	            var state = getState(el);
	            return throttle(function(event){
	                computeBarTop(el, event);
	                updateDragger(el);
	                computeScrollTop(el);
	                updateScroll(el);
	            }.bind(this), state.config.draggerThrottle);
	        }
	
	
	        function documentMouseup(el){
	            var state = getState(el);
	            return function(event){
	
	                //
	                state.barDragging = false;
	
	                // enable user select
	                state.el1.style.userSelect = '';
	                state.config.unselectableBody ? compatStyle(document.body, 'UserSelect', '') : null;
	
	                // remove dragging class
	                removeClass(state.el1, state.config.el1DraggingClass);
	                state.draggingPhantomClassTimeout = setTimeout(function() {
	                    removeClass(state.el1, state.config.el1DraggingPhantomClass);
	                }, state.config.draggingPhantomDelay);
	
	
	                // remove events
	                document.removeEventListener('mousemove', state.documentMousemove, 0);
	                document.removeEventListener('mouseup', state.documentMouseup, 0);
	
	            }.bind(this);
	
	        }
	
	
	        function barMousedown(el){
	            var state = getState(el);
	            return function(event){
	
	                // don't do nothing if it's not left mouse button
	                if ( event.which!==1 ) { return false }
	
	                state.barDragging = true;
	                state.mouseBarOffsetY = event.offsetY;
	
	                // disable user select
	                state.el1.style.userSelect = 'none';
	                state.config.unselectableBody ? compatStyle(document.body, 'UserSelect', 'none') : null;
	
	                // add dragging class
	                addClass(state.el1, state.config.el1DraggingClass);
	                state.draggingPhantomClassTimeout ?
	                    clearTimeout(state.draggingPhantomClassTimeout) : null;
	                addClass(state.el1, state.config.el1DraggingPhantomClass);
	
	                // add events
	                document.addEventListener('mousemove', state.documentMousemove, 0);
	                document.addEventListener('mouseup', state.documentMouseup, 0);
	
	
	            }.bind(this);
	        }
	
	
	        function windowResize(el){
	            var state = getState(el);
	            return debounce(function(event){
	                refreshScrollbar(el);
	            }.bind(this), state.config.resizeDebounce);
	        }
	
	
	
	
	        function initMutationObserver(el){
	            if (typeof MutationObserver === typeof void 0) { return null }
	
	            var state = getState(el);
	
	            var observer = new MutationObserver(throttle(function(mutations) {
	                refreshScrollbar(el);
	            }, state.config.observerThrottle));
	
	            observer.observe(state.el2, {
	                childList: true,
	                characterData: true,
	                subtree: true,
	            });
	
	            return observer;
	        }
	
	
	
	
	        /*------------------------------------*\
	            Initialize Scrollbar
	        \*------------------------------------*/
	        function initScrollbar(el, kwargs){
	
	            // validate on directive bind if the markup is OK
	            if ( !markupValidation.call(this, el) ) { return false }
	
	            // safeguard to not initialize vuebar when it's already initialized
	            if (el._vuebarState) {
	                // and I'm actually curious if that can happen
	                Vue.util.warn('(Vuebar) Tried to initialize second time. If you see this please create an issue on https://github.com/DominikSerafin/vuebar with all relevent debug information. Thank you!');
	                return false;
	            }
	
	            // create state
	            var state = createState(el);
	
	            // get options object
	            // - it will come from directive binding (there is a 'value' property)
	            // - or it will come from public method direct options object
	            var options = kwargs.value ? kwargs.value : (kwargs ? kwargs : {});
	
	            // overwrite defaults with provided options
	            for (var key in options){
	                state.config[key] = options[key];
	            }
	
	            // detect browser
	            var browser = detectBrowser();
	
	            // dragger enabled?
	            var elNativeScrollbarWidth = getNativeScrollbarWidth(el.firstElementChild);
	            var overlayScrollbar = elNativeScrollbarWidth == 0;
	            state.draggerEnabled = ( (!overlayScrollbar) || state.config.overrideFloatingScrollbar ) ? 1 : 0;
	
	            // setup scrollbar "state"
	            state.binding = kwargs.value ? kwargs : null;
	            state.el1 = el;
	            state.el2 = el.firstElementChild;
	            state.dragger = createDragger(el);
	
	            // create and reference event listeners
	            state.barMousedown = barMousedown(el);
	            state.documentMousemove = documentMousemove(el);
	            state.documentMouseup = documentMouseup(el);
	            state.windowResize = windowResize(el);
	            state.scrollHandler = scrollHandler(el);
	            state.wheelHandler = wheelHandler(el);
	
	            // initialize and reference mutation observer
	            state.mutationObserver = initMutationObserver(el);
	
	            // el1 styles and class
	            addClass(state.el1, state.config.el1Class);
	            state.el1.style.position = 'relative';
	            state.el1.style.overflow = 'hidden';
	
	            // el2 styles and class
	            addClass(state.el2, state.config.el2Class);
	            state.el2.style.display = 'block';
	            state.el2.style.overflowX = 'hidden';
	            state.el2.style.overflowY = 'scroll';
	            state.el2.style.height = '100%';
	
	            // do the magic
	            if (state.draggerEnabled) {
	
	                // hide original browser scrollbar using pseudo css selectors (only chrome & safari)
	                if ( state.config.useScrollbarPseudo && (browser.chrome || browser.safari) ) {
	                    state.el2.style.width = '100%';
	                    hideScrollbarUsingPseudoElement(el);
	                }
	
	                // hide original browser overlay scrollbar and add padding to compensate for that
	                else if (overlayScrollbar) {
	                    /* state.el2.style.width = 'calc(100% + ' + 20 + 'px)';
	                    compatStyle(state.el2, 'BoxSizing', 'border-box'); */
	                    state.el2.style.width = '100%';
	                    compatStyle(state.el2, 'BoxSizing', 'content-box');
	                    state.el2.style.paddingRight = '20px';
	                }
	
	                // hide original browser scrollbar behind element edges and hidden overflow
	                else {
	                    state.el2.style.width = 'calc(100% + ' + elNativeScrollbarWidth + 'px)';
	                }
	
	            }
	
	            // add events
	            // - wheel event is only needed when preventParentScroll option is enabled
	            // - resize event is only needed when resizeRefresh option is enabled
	            state.el2.addEventListener('scroll', state.scrollHandler, 0);
	            state.dragger.addEventListener('mousedown', state.barMousedown, 0);
	            state.config.preventParentScroll ? state.el2.addEventListener('wheel', state.wheelHandler, 0) : null;
	            state.config.resizeRefresh ? window.addEventListener('resize', state.windowResize, 0) : null;
	
	            // initial calculations using refresh scrollbar
	            refreshScrollbar(el, {immediate: true});
	
	        }
	
	
	
	
	        /*------------------------------------*\
	            Destroy Scrollbar
	        \*------------------------------------*/
	        function destroyScrollbar(el, options){
	            var options = options ? options : {};
	            var state = getState(el);
	
	            // clear events
	            state.dragger.removeEventListener('mousedown', state.barMousedown, 0);
	            state.el2.removeEventListener('scroll', state.scrollHandler, 0);
	            state.el2.removeEventListener('wheel', state.scrollHandler, 0);
	            window.removeEventListener('resize', state.windowResize, 0);
	
	            // disconnect mutation observer
	            state.mutationObserver ? state.mutationObserver.disconnect() : null;
	
	            // clear el1 classes
	            removeClass(state.el1, state.config.el1Class);
	            removeClass(state.el1, state.config.el1ScrollVisibleClass);
	            removeClass(state.el1, state.config.el1ScrollInvisibleClass);
	            removeClass(state.el1, state.config.el1ScrollingClass);
	            removeClass(state.el1, state.config.el1ScrollingPhantomClass);
	            removeClass(state.el1, state.config.el1DraggingClass);
	
	            // clear el1 styles
	            if (options.clearStyles) {
	                state.el1.style.position = '';
	                state.el1.style.overflow = '';
	            }
	
	            // clear el2 classes
	            removeClass(state.el2, state.config.el2Class);
	
	            // clear el2 styles
	            if (options.clearStyles) {
	                state.el2.style.display = '';
	                state.el2.style.overflowX = '';
	                state.el2.style.overflowY = '';
	                state.el2.style.msOverflowStyle = '';
	                state.el2.style.height = '';
	                state.el2.style.width = '';
	            }
	
	            // clear dragger
	            state.dragger.removeChild(state.dragger.firstChild);
	            state.el1.removeChild(state.dragger);
	
	            // clear timeouts that may be still running
	            state.scrollingPhantomClassTimeout ?
	                clearTimeout(state.scrollingPhantomClassTimeout) : null;
	            state.draggingPhantomClassTimeout ?
	                clearTimeout(state.draggingPhantomClassTimeout) : null;
	
	            // delete state object from element
	            delete el._vuebarState;
	
	        }
	
	
	
	
	
	
	        /*------------------------------------*\
	            Public Methods Install
	        \*------------------------------------*/
	        function publicMethods(){
	            return {
	                getState: getState,
	                initScrollbar: initScrollbar,
	                destroyScrollbar: destroyScrollbar,
	                refreshScrollbar: refreshScrollbar,
	            };
	        }
	        Vue.vuebar = publicMethods();
	        Vue.prototype.$vuebar = publicMethods();
	
	
	
	
	
	        /*------------------------------------*\
	            Directive Install
	        \*------------------------------------*/
	        Vue.directive('bar', {
	
	            inserted: function(el, binding, vnode){
	                initScrollbar.call(this, el, binding);
	            },
	
	            componentUpdated: function(el, binding, vnode, oldVnode){
	                refreshScrollbar.call(this, el);
	            },
	
	            unbind: function(el, binding, vnode, oldVnode){
	                // we shouldn't clearStyles because it actually doesn't matter that much
	                // the element will be always deleted on unbind and its styles also
	                // and if we do clear styles then it looks bad on transitions
	                destroyScrollbar.call(this, el, {clearStyles: false});
	            },
	
	        });
	
	
	
	
	
	
	
	        /*------------------------------------*\
	            Debounce Helper
	            https://remysharp.com/2010/07/21/throttling-function-calls
	        \*------------------------------------*/
	        function debounce(fn, delay) {
	            var timer = null;
	            return function () {
	                var context = this, args = arguments;
	                clearTimeout(timer);
	                timer = setTimeout(function () {
	                    fn.apply(context, args);
	                }, delay);
	            };
	        };
	
	
	
	
	        /*------------------------------------*\
	            Throttle Helper
	            https://remysharp.com/2010/07/21/throttling-function-calls
	        \*------------------------------------*/
	        function throttle(fn, threshhold, scope) {
	            threshhold || (threshhold = 250);
	            var last,
	                deferTimer;
	            return function () {
	                var context = scope || this;
	
	                var now = +new Date,
	                    args = arguments;
	                if (last && now < last + threshhold) {
	                    // hold on to it
	                    clearTimeout(deferTimer);
	                    deferTimer = setTimeout(function () {
	                        last = now;
	                        fn.apply(context, args);
	                    }, threshhold);
	                } else {
	                    last = now;
	                    fn.apply(context, args);
	                }
	            }
	        }
	
	
	
	        /*------------------------------------*\
	            Style Vendor Prefixes Helper
	        \*------------------------------------*/
	        function compatStyle(element, property, value) {
	            element.style['webkit' + property] = value;
	            element.style['moz' + property] = value;
	            element.style['ms' + property] = value;
	            element.style['o' + property] = value;
	            element.style[ property.slice(0,1).toLowerCase() + property.substring(1) ] = value;
	        }
	
	
	
	        /*------------------------------------*\
	            Class Manipulation Helpers
	            https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/
	        \*------------------------------------*/
	        function hasClass(el, className) {
	            return el.classList ? el.classList.contains(className) : new RegExp('\\b'+ className+'\\b').test(el.className);
	        }
	
	        function addClass(el, className) {
	            if (el.classList) el.classList.add(className);
	            else if (!hasClass(el, className)) el.className += ' ' + className;
	        }
	
	        function removeClass(el, className) {
	            if (el.classList) el.classList.remove(className);
	            else el.className = el.className.replace(new RegExp('\\b'+ className+'\\b', 'g'), '');
	        }
	
	
	
	
	
	        /*------------------------------------*\
	            Browser Detection Helper
	        \*------------------------------------*/
	        function detectBrowser(){
	
	            // get ie version helper
	            function getIEVersion() {
	                var match = window.navigator.userAgent.match(/(?:MSIE |Trident\/.*; rv:)(\d+)/);
	                return match ? parseInt(match[1]) : void 0;
	            }
	
	            // user agent & vendor
	            var ua = window.navigator.userAgent;
	            var vendor = window.navigator.vendor;
	
	            // chrome
	            var chrome = (
	                (ua.toLowerCase().indexOf('chrome') > -1) && (vendor.toLowerCase().indexOf('google') > -1)
	            );
	
	            // edge
	            var edge = ua.indexOf('Edge') > -1;
	
	            // safari
	            var safari = !!window.safari || ((ua.toLowerCase().indexOf('safari') > -1) && (vendor.toLowerCase().indexOf('apple') > -1));
	
	            // internet explorer
	            var ie8 = getIEVersion() == 8;
	            var ie9 = getIEVersion() == 9;
	            var ie10 = getIEVersion() == 10;
	            var ie11 = getIEVersion() == 11;
	            var ie = ie8 || ie9 || ie10 || ie11;
	
	            // is it mobile browser?
	            // regex below thanks to http://detectmobilebrowsers.com/
	            var uaOrVendor = ua || vendor || window.opera;
	            var mobile = (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(uaOrVendor)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(uaOrVendor.substr(0,4)));
	
	            // construct return object
	            return {
	                edge: edge,
	                chrome: chrome,
	                safari: safari,
	                mobile: mobile,
	                ie: ie,
	                ie8: ie8,
	                ie9: ie9,
	                ie10: ie10,
	                ie11: ie11,
	            };
	
	        }
	
	
	        /*------------------------------------*\
	            Calculate scrollbar width in element
	            - if the width is 0 it means the scrollbar is floated/overlayed
	            - accepts "container" paremeter because ie & edge can have different
	              scrollbar behaviors for different elements using '-ms-overflow-style'
	        \*------------------------------------*/
	        function getNativeScrollbarWidth(container) {
	            var container = container ? container : document.body;
	
	            var fullWidth = 0;
	            var barWidth = 0;
	
	            var wrapper = document.createElement('div');
	            var child = document.createElement('div');
	
	            wrapper.style.position = 'absolute';
	            wrapper.style.pointerEvents = 'none';
	            wrapper.style.bottom = '0';
	            wrapper.style.right = '0';
	            wrapper.style.width = '100px';
	            wrapper.style.overflow = 'hidden';
	
	            wrapper.appendChild(child);
	            container.appendChild(wrapper);
	
	            fullWidth = child.offsetWidth;
	            child.style.width = '100%';
	            wrapper.style.overflowY = 'scroll';
	            barWidth = fullWidth - child.offsetWidth;
	
	            container.removeChild(wrapper);
	
	            return barWidth;
	        }
	
	
	
	
	    };
	
	
	
	    /*------------------------------------*\
	        Expose / Autoinstall
	    \*------------------------------------*/
	    if (true) {
	        module.exports = Vuebar;
	    } else if (typeof define === 'function' && define.amd) {
	        define(function () { return Vuebar });
	    } else if (typeof window !== typeof void 0) {
	        window.Vuebar = Vuebar;
	    }
	
	    if (typeof Vue !== typeof void 0) {
	        Vue.use(Vuebar);
	    }
	
	
	
	
	})();


/***/ })
]);
//# sourceMappingURL=vendor.js.map